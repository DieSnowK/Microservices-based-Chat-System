/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#ifndef FILE_QPB_H
#define FILE_QPB_H

#include "base.qpb.h"

#include <QtProtobuf/qprotobuflazymessagepointer.h>
#include <QtProtobuf/qprotobufmessage.h>
#include <QtProtobuf/qprotobufobject.h>
#include <QtProtobuf/qprotobufoneof.h>
#include <QtProtobuf/qtprotobuftypes.h>

#include <QtCore/qbytearray.h>
#include <QtCore/qlist.h>
#include <QtCore/qmetatype.h>
#include <QtCore/qshareddata.h>
#include <QtCore/qstring.h>

#include <optional>

namespace SnowK {
class GetSingleFileReq;
using GetSingleFileReqRepeated = QList<GetSingleFileReq>;
namespace GetSingleFileReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace GetSingleFileReq_QtProtobufNested

class GetSingleFileRsp;
using GetSingleFileRspRepeated = QList<GetSingleFileRsp>;
namespace GetSingleFileRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace GetSingleFileRsp_QtProtobufNested

class GetMultiFileReq;
using GetMultiFileReqRepeated = QList<GetMultiFileReq>;
namespace GetMultiFileReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace GetMultiFileReq_QtProtobufNested

class GetMultiFileRsp;
using GetMultiFileRspRepeated = QList<GetMultiFileRsp>;
namespace GetMultiFileRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace GetMultiFileRsp_QtProtobufNested

class PutSingleFileReq;
using PutSingleFileReqRepeated = QList<PutSingleFileReq>;
namespace PutSingleFileReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace PutSingleFileReq_QtProtobufNested

class PutSingleFileRsp;
using PutSingleFileRspRepeated = QList<PutSingleFileRsp>;
namespace PutSingleFileRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace PutSingleFileRsp_QtProtobufNested

class PutMultiFileReq;
using PutMultiFileReqRepeated = QList<PutMultiFileReq>;
namespace PutMultiFileReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace PutMultiFileReq_QtProtobufNested

class PutMultiFileRsp;
using PutMultiFileRspRepeated = QList<PutMultiFileRsp>;
namespace PutMultiFileRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace PutMultiFileRsp_QtProtobufNested


class GetSingleFileReq_QtProtobufData;
class GetSingleFileReq : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString fileId READ fileId WRITE setFileId SCRIPTABLE true)
    Q_PROPERTY(QString userId READ userId_p WRITE setUserId_p)
    Q_PROPERTY(bool hasUserId READ hasUserId)
    Q_PROPERTY(QString sessionId READ sessionId_p WRITE setSessionId_p)
    Q_PROPERTY(bool hasSessionId READ hasSessionId)

public:
    using QtProtobufFieldEnum = GetSingleFileReq_QtProtobufNested::QtProtobufFieldEnum;
    GetSingleFileReq();
    ~GetSingleFileReq();
    GetSingleFileReq(const GetSingleFileReq &other);
    GetSingleFileReq &operator =(const GetSingleFileReq &other);
    GetSingleFileReq(GetSingleFileReq &&other) noexcept;
    GetSingleFileReq &operator =(GetSingleFileReq &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(GetSingleFileReq &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    const QString &fileId() const &;

    bool hasUserId() const;
    QString userId() const;

    bool hasSessionId() const;
    QString sessionId() const;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setFileId(const QString &fileId);
    void setFileId(QString &&fileId);
    void setUserId(const QString &userId);
    void setUserId(QString &&userId);
    void clearUserId();
    void setSessionId(const QString &sessionId);
    void setSessionId(QString &&sessionId);
    void clearSessionId();
    static void registerTypes();

private:
    friend bool comparesEqual(const GetSingleFileReq &lhs, const GetSingleFileReq &rhs) noexcept;
    friend bool operator==(const GetSingleFileReq &lhs, const GetSingleFileReq &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const GetSingleFileReq &lhs, const GetSingleFileReq &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QString userId_p() const;
    QString sessionId_p() const;
    void setUserId_p(QString userId);
    void setSessionId_p(QString sessionId);
    QExplicitlySharedDataPointer<GetSingleFileReq_QtProtobufData> dptr;
};
namespace GetSingleFileReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    FileIdProtoFieldNumber = 2,
    UserIdProtoFieldNumber = 3,
    SessionIdProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace GetSingleFileReq_QtProtobufNested

class GetSingleFileRsp_QtProtobufData;
class GetSingleFileRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)
    Q_PROPERTY(SnowK::FileDownloadData *fileData_p READ fileData_p WRITE setFileData_p SCRIPTABLE false)
    Q_PROPERTY(bool hasFileData READ hasFileData)

public:
    using QtProtobufFieldEnum = GetSingleFileRsp_QtProtobufNested::QtProtobufFieldEnum;
    GetSingleFileRsp();
    ~GetSingleFileRsp();
    GetSingleFileRsp(const GetSingleFileRsp &other);
    GetSingleFileRsp &operator =(const GetSingleFileRsp &other);
    GetSingleFileRsp(GetSingleFileRsp &&other) noexcept;
    GetSingleFileRsp &operator =(GetSingleFileRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(GetSingleFileRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    const QString &errmsg() const &;

    bool hasFileData() const;
    const FileDownloadData &fileData() const &;
    void clearFileData();
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    void setFileData(const FileDownloadData &fileData);
    void setFileData(FileDownloadData &&fileData);
    static void registerTypes();

private:
    friend bool comparesEqual(const GetSingleFileRsp &lhs, const GetSingleFileRsp &rhs) noexcept;
    friend bool operator==(const GetSingleFileRsp &lhs, const GetSingleFileRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const GetSingleFileRsp &lhs, const GetSingleFileRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    FileDownloadData *fileData_p();
    void setFileData_p(FileDownloadData *fileData);
    QExplicitlySharedDataPointer<GetSingleFileRsp_QtProtobufData> dptr;
};
namespace GetSingleFileRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
    FileDataProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace GetSingleFileRsp_QtProtobufNested

class GetMultiFileReq_QtProtobufData;
class GetMultiFileReq : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString userId READ userId_p WRITE setUserId_p)
    Q_PROPERTY(bool hasUserId READ hasUserId)
    Q_PROPERTY(QString sessionId READ sessionId_p WRITE setSessionId_p)
    Q_PROPERTY(bool hasSessionId READ hasSessionId)
    Q_PROPERTY(QStringList fileIdList READ fileIdList WRITE setFileIdList SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = GetMultiFileReq_QtProtobufNested::QtProtobufFieldEnum;
    GetMultiFileReq();
    ~GetMultiFileReq();
    GetMultiFileReq(const GetMultiFileReq &other);
    GetMultiFileReq &operator =(const GetMultiFileReq &other);
    GetMultiFileReq(GetMultiFileReq &&other) noexcept;
    GetMultiFileReq &operator =(GetMultiFileReq &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(GetMultiFileReq &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool hasUserId() const;
    QString userId() const;

    bool hasSessionId() const;
    QString sessionId() const;

    const QStringList &fileIdList() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setUserId(const QString &userId);
    void setUserId(QString &&userId);
    void clearUserId();
    void setSessionId(const QString &sessionId);
    void setSessionId(QString &&sessionId);
    void clearSessionId();
    void setFileIdList(const QStringList &fileIdList);
    void setFileIdList(QStringList &&fileIdList);
    static void registerTypes();

private:
    friend bool comparesEqual(const GetMultiFileReq &lhs, const GetMultiFileReq &rhs) noexcept;
    friend bool operator==(const GetMultiFileReq &lhs, const GetMultiFileReq &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const GetMultiFileReq &lhs, const GetMultiFileReq &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QString userId_p() const;
    QString sessionId_p() const;
    void setUserId_p(QString userId);
    void setSessionId_p(QString sessionId);
    QExplicitlySharedDataPointer<GetMultiFileReq_QtProtobufData> dptr;
};
namespace GetMultiFileReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    UserIdProtoFieldNumber = 2,
    SessionIdProtoFieldNumber = 3,
    FileIdListProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace GetMultiFileReq_QtProtobufNested

class GetMultiFileRsp_QtProtobufData;
class GetMultiFileRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)
    Q_PROPERTY(SnowK::GetMultiFileRsp::FileDataEntry fileData READ fileData WRITE setFileData SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = GetMultiFileRsp_QtProtobufNested::QtProtobufFieldEnum;
    using FileDataEntry = QHash<QString, FileDownloadData>;
    GetMultiFileRsp();
    ~GetMultiFileRsp();
    GetMultiFileRsp(const GetMultiFileRsp &other);
    GetMultiFileRsp &operator =(const GetMultiFileRsp &other);
    GetMultiFileRsp(GetMultiFileRsp &&other) noexcept;
    GetMultiFileRsp &operator =(GetMultiFileRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(GetMultiFileRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    const QString &errmsg() const &;

    const GetMultiFileRsp::FileDataEntry &fileData() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    void setFileData(const GetMultiFileRsp::FileDataEntry &fileData);
    void setFileData(GetMultiFileRsp::FileDataEntry &&fileData);
    static void registerTypes();

private:
    friend bool comparesEqual(const GetMultiFileRsp &lhs, const GetMultiFileRsp &rhs) noexcept;
    friend bool operator==(const GetMultiFileRsp &lhs, const GetMultiFileRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const GetMultiFileRsp &lhs, const GetMultiFileRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<GetMultiFileRsp_QtProtobufData> dptr;
};
namespace GetMultiFileRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
    FileDataProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace GetMultiFileRsp_QtProtobufNested

class PutSingleFileReq_QtProtobufData;
class PutSingleFileReq : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString userId READ userId_p WRITE setUserId_p)
    Q_PROPERTY(bool hasUserId READ hasUserId)
    Q_PROPERTY(QString sessionId READ sessionId_p WRITE setSessionId_p)
    Q_PROPERTY(bool hasSessionId READ hasSessionId)
    Q_PROPERTY(SnowK::FileUploadData *fileData_p READ fileData_p WRITE setFileData_p SCRIPTABLE false)
    Q_PROPERTY(bool hasFileData READ hasFileData)

public:
    using QtProtobufFieldEnum = PutSingleFileReq_QtProtobufNested::QtProtobufFieldEnum;
    PutSingleFileReq();
    ~PutSingleFileReq();
    PutSingleFileReq(const PutSingleFileReq &other);
    PutSingleFileReq &operator =(const PutSingleFileReq &other);
    PutSingleFileReq(PutSingleFileReq &&other) noexcept;
    PutSingleFileReq &operator =(PutSingleFileReq &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(PutSingleFileReq &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool hasUserId() const;
    QString userId() const;

    bool hasSessionId() const;
    QString sessionId() const;

    bool hasFileData() const;
    const FileUploadData &fileData() const &;
    void clearFileData();
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setUserId(const QString &userId);
    void setUserId(QString &&userId);
    void clearUserId();
    void setSessionId(const QString &sessionId);
    void setSessionId(QString &&sessionId);
    void clearSessionId();
    void setFileData(const FileUploadData &fileData);
    void setFileData(FileUploadData &&fileData);
    static void registerTypes();

private:
    friend bool comparesEqual(const PutSingleFileReq &lhs, const PutSingleFileReq &rhs) noexcept;
    friend bool operator==(const PutSingleFileReq &lhs, const PutSingleFileReq &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const PutSingleFileReq &lhs, const PutSingleFileReq &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QString userId_p() const;
    QString sessionId_p() const;
    FileUploadData *fileData_p();
    void setUserId_p(QString userId);
    void setSessionId_p(QString sessionId);
    void setFileData_p(FileUploadData *fileData);
    QExplicitlySharedDataPointer<PutSingleFileReq_QtProtobufData> dptr;
};
namespace PutSingleFileReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    UserIdProtoFieldNumber = 2,
    SessionIdProtoFieldNumber = 3,
    FileDataProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace PutSingleFileReq_QtProtobufNested

class PutSingleFileRsp_QtProtobufData;
class PutSingleFileRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)
    Q_PROPERTY(SnowK::FileMessageInfo *fileInfo_p READ fileInfo_p WRITE setFileInfo_p SCRIPTABLE false)
    Q_PROPERTY(bool hasFileInfo READ hasFileInfo)

public:
    using QtProtobufFieldEnum = PutSingleFileRsp_QtProtobufNested::QtProtobufFieldEnum;
    PutSingleFileRsp();
    ~PutSingleFileRsp();
    PutSingleFileRsp(const PutSingleFileRsp &other);
    PutSingleFileRsp &operator =(const PutSingleFileRsp &other);
    PutSingleFileRsp(PutSingleFileRsp &&other) noexcept;
    PutSingleFileRsp &operator =(PutSingleFileRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(PutSingleFileRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    const QString &errmsg() const &;

    bool hasFileInfo() const;
    const FileMessageInfo &fileInfo() const &;
    void clearFileInfo();
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    void setFileInfo(const FileMessageInfo &fileInfo);
    void setFileInfo(FileMessageInfo &&fileInfo);
    static void registerTypes();

private:
    friend bool comparesEqual(const PutSingleFileRsp &lhs, const PutSingleFileRsp &rhs) noexcept;
    friend bool operator==(const PutSingleFileRsp &lhs, const PutSingleFileRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const PutSingleFileRsp &lhs, const PutSingleFileRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    FileMessageInfo *fileInfo_p();
    void setFileInfo_p(FileMessageInfo *fileInfo);
    QExplicitlySharedDataPointer<PutSingleFileRsp_QtProtobufData> dptr;
};
namespace PutSingleFileRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
    FileInfoProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace PutSingleFileRsp_QtProtobufNested

class PutMultiFileReq_QtProtobufData;
class PutMultiFileReq : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString userId READ userId_p WRITE setUserId_p)
    Q_PROPERTY(bool hasUserId READ hasUserId)
    Q_PROPERTY(QString sessionId READ sessionId_p WRITE setSessionId_p)
    Q_PROPERTY(bool hasSessionId READ hasSessionId)
    Q_PROPERTY(SnowK::FileUploadDataRepeated fileDataData READ fileData WRITE setFileData SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = PutMultiFileReq_QtProtobufNested::QtProtobufFieldEnum;
    PutMultiFileReq();
    ~PutMultiFileReq();
    PutMultiFileReq(const PutMultiFileReq &other);
    PutMultiFileReq &operator =(const PutMultiFileReq &other);
    PutMultiFileReq(PutMultiFileReq &&other) noexcept;
    PutMultiFileReq &operator =(PutMultiFileReq &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(PutMultiFileReq &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool hasUserId() const;
    QString userId() const;

    bool hasSessionId() const;
    QString sessionId() const;

    const FileUploadDataRepeated &fileData() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setUserId(const QString &userId);
    void setUserId(QString &&userId);
    void clearUserId();
    void setSessionId(const QString &sessionId);
    void setSessionId(QString &&sessionId);
    void clearSessionId();
    void setFileData(const FileUploadDataRepeated &fileData);
    void setFileData(FileUploadDataRepeated &&fileData);
    static void registerTypes();

private:
    friend bool comparesEqual(const PutMultiFileReq &lhs, const PutMultiFileReq &rhs) noexcept;
    friend bool operator==(const PutMultiFileReq &lhs, const PutMultiFileReq &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const PutMultiFileReq &lhs, const PutMultiFileReq &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QString userId_p() const;
    QString sessionId_p() const;
    void setUserId_p(QString userId);
    void setSessionId_p(QString sessionId);
    QExplicitlySharedDataPointer<PutMultiFileReq_QtProtobufData> dptr;
};
namespace PutMultiFileReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    UserIdProtoFieldNumber = 2,
    SessionIdProtoFieldNumber = 3,
    FileDataProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace PutMultiFileReq_QtProtobufNested

class PutMultiFileRsp_QtProtobufData;
class PutMultiFileRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)
    Q_PROPERTY(SnowK::FileMessageInfoRepeated fileInfoData READ fileInfo WRITE setFileInfo SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = PutMultiFileRsp_QtProtobufNested::QtProtobufFieldEnum;
    PutMultiFileRsp();
    ~PutMultiFileRsp();
    PutMultiFileRsp(const PutMultiFileRsp &other);
    PutMultiFileRsp &operator =(const PutMultiFileRsp &other);
    PutMultiFileRsp(PutMultiFileRsp &&other) noexcept;
    PutMultiFileRsp &operator =(PutMultiFileRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(PutMultiFileRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    const QString &errmsg() const &;

    const FileMessageInfoRepeated &fileInfo() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    void setFileInfo(const FileMessageInfoRepeated &fileInfo);
    void setFileInfo(FileMessageInfoRepeated &&fileInfo);
    static void registerTypes();

private:
    friend bool comparesEqual(const PutMultiFileRsp &lhs, const PutMultiFileRsp &rhs) noexcept;
    friend bool operator==(const PutMultiFileRsp &lhs, const PutMultiFileRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const PutMultiFileRsp &lhs, const PutMultiFileRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<PutMultiFileRsp_QtProtobufData> dptr;
};
namespace PutMultiFileRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
    FileInfoProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace PutMultiFileRsp_QtProtobufNested
} // namespace SnowK

#endif // FILE_QPB_H
