/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#ifndef USER_QPB_H
#define USER_QPB_H

#include "base.qpb.h"

#include <QtProtobuf/qprotobuflazymessagepointer.h>
#include <QtProtobuf/qprotobufmessage.h>
#include <QtProtobuf/qprotobufobject.h>
#include <QtProtobuf/qprotobufoneof.h>
#include <QtProtobuf/qtprotobuftypes.h>

#include <QtCore/qbytearray.h>
#include <QtCore/qlist.h>
#include <QtCore/qmetatype.h>
#include <QtCore/qshareddata.h>
#include <QtCore/qstring.h>

#include <optional>

namespace SnowK {
class UserRegisterReq;
using UserRegisterReqRepeated = QList<UserRegisterReq>;
namespace UserRegisterReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace UserRegisterReq_QtProtobufNested

class UserRegisterRsp;
using UserRegisterRspRepeated = QList<UserRegisterRsp>;
namespace UserRegisterRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace UserRegisterRsp_QtProtobufNested

class UserLoginReq;
using UserLoginReqRepeated = QList<UserLoginReq>;
namespace UserLoginReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace UserLoginReq_QtProtobufNested

class UserLoginRsp;
using UserLoginRspRepeated = QList<UserLoginRsp>;
namespace UserLoginRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace UserLoginRsp_QtProtobufNested

class PhoneVerifyCodeReq;
using PhoneVerifyCodeReqRepeated = QList<PhoneVerifyCodeReq>;
namespace PhoneVerifyCodeReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace PhoneVerifyCodeReq_QtProtobufNested

class PhoneVerifyCodeRsp;
using PhoneVerifyCodeRspRepeated = QList<PhoneVerifyCodeRsp>;
namespace PhoneVerifyCodeRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace PhoneVerifyCodeRsp_QtProtobufNested

class PhoneRegisterReq;
using PhoneRegisterReqRepeated = QList<PhoneRegisterReq>;
namespace PhoneRegisterReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace PhoneRegisterReq_QtProtobufNested

class PhoneRegisterRsp;
using PhoneRegisterRspRepeated = QList<PhoneRegisterRsp>;
namespace PhoneRegisterRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace PhoneRegisterRsp_QtProtobufNested

class PhoneLoginReq;
using PhoneLoginReqRepeated = QList<PhoneLoginReq>;
namespace PhoneLoginReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace PhoneLoginReq_QtProtobufNested

class PhoneLoginRsp;
using PhoneLoginRspRepeated = QList<PhoneLoginRsp>;
namespace PhoneLoginRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace PhoneLoginRsp_QtProtobufNested

class GetUserInfoReq;
using GetUserInfoReqRepeated = QList<GetUserInfoReq>;
namespace GetUserInfoReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace GetUserInfoReq_QtProtobufNested

class GetUserInfoRsp;
using GetUserInfoRspRepeated = QList<GetUserInfoRsp>;
namespace GetUserInfoRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace GetUserInfoRsp_QtProtobufNested

class GetMultiUserInfoReq;
using GetMultiUserInfoReqRepeated = QList<GetMultiUserInfoReq>;
namespace GetMultiUserInfoReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace GetMultiUserInfoReq_QtProtobufNested

class GetMultiUserInfoRsp;
using GetMultiUserInfoRspRepeated = QList<GetMultiUserInfoRsp>;
namespace GetMultiUserInfoRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace GetMultiUserInfoRsp_QtProtobufNested

class SetUserAvatarReq;
using SetUserAvatarReqRepeated = QList<SetUserAvatarReq>;
namespace SetUserAvatarReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SetUserAvatarReq_QtProtobufNested

class SetUserAvatarRsp;
using SetUserAvatarRspRepeated = QList<SetUserAvatarRsp>;
namespace SetUserAvatarRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SetUserAvatarRsp_QtProtobufNested

class SetUserNicknameReq;
using SetUserNicknameReqRepeated = QList<SetUserNicknameReq>;
namespace SetUserNicknameReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SetUserNicknameReq_QtProtobufNested

class SetUserNicknameRsp;
using SetUserNicknameRspRepeated = QList<SetUserNicknameRsp>;
namespace SetUserNicknameRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SetUserNicknameRsp_QtProtobufNested

class SetUserDescriptionReq;
using SetUserDescriptionReqRepeated = QList<SetUserDescriptionReq>;
namespace SetUserDescriptionReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SetUserDescriptionReq_QtProtobufNested

class SetUserDescriptionRsp;
using SetUserDescriptionRspRepeated = QList<SetUserDescriptionRsp>;
namespace SetUserDescriptionRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SetUserDescriptionRsp_QtProtobufNested

class SetUserPhoneNumberReq;
using SetUserPhoneNumberReqRepeated = QList<SetUserPhoneNumberReq>;
namespace SetUserPhoneNumberReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SetUserPhoneNumberReq_QtProtobufNested

class SetUserPhoneNumberRsp;
using SetUserPhoneNumberRspRepeated = QList<SetUserPhoneNumberRsp>;
namespace SetUserPhoneNumberRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SetUserPhoneNumberRsp_QtProtobufNested


class UserRegisterReq_QtProtobufData;
class UserRegisterReq : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString nickname READ nickname WRITE setNickname SCRIPTABLE true)
    Q_PROPERTY(QString password READ password WRITE setPassword SCRIPTABLE true)
    Q_PROPERTY(QString verifyCodeId READ verifyCodeId_p WRITE setVerifyCodeId_p)
    Q_PROPERTY(bool hasVerifyCodeId READ hasVerifyCodeId)
    Q_PROPERTY(QString verifyCode READ verifyCode_p WRITE setVerifyCode_p)
    Q_PROPERTY(bool hasVerifyCode READ hasVerifyCode)

public:
    using QtProtobufFieldEnum = UserRegisterReq_QtProtobufNested::QtProtobufFieldEnum;
    UserRegisterReq();
    ~UserRegisterReq();
    UserRegisterReq(const UserRegisterReq &other);
    UserRegisterReq &operator =(const UserRegisterReq &other);
    UserRegisterReq(UserRegisterReq &&other) noexcept;
    UserRegisterReq &operator =(UserRegisterReq &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(UserRegisterReq &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    const QString &nickname() const &;

    const QString &password() const &;

    bool hasVerifyCodeId() const;
    QString verifyCodeId() const;

    bool hasVerifyCode() const;
    QString verifyCode() const;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setNickname(const QString &nickname);
    void setNickname(QString &&nickname);
    void setPassword(const QString &password);
    void setPassword(QString &&password);
    void setVerifyCodeId(const QString &verifyCodeId);
    void setVerifyCodeId(QString &&verifyCodeId);
    void clearVerifyCodeId();
    void setVerifyCode(const QString &verifyCode);
    void setVerifyCode(QString &&verifyCode);
    void clearVerifyCode();
    static void registerTypes();

private:
    friend bool comparesEqual(const UserRegisterReq &lhs, const UserRegisterReq &rhs) noexcept;
    friend bool operator==(const UserRegisterReq &lhs, const UserRegisterReq &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const UserRegisterReq &lhs, const UserRegisterReq &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QString verifyCodeId_p() const;
    QString verifyCode_p() const;
    void setVerifyCodeId_p(QString verifyCodeId);
    void setVerifyCode_p(QString verifyCode);
    QExplicitlySharedDataPointer<UserRegisterReq_QtProtobufData> dptr;
};
namespace UserRegisterReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    NicknameProtoFieldNumber = 2,
    PasswordProtoFieldNumber = 3,
    VerifyCodeIdProtoFieldNumber = 4,
    VerifyCodeProtoFieldNumber = 5,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace UserRegisterReq_QtProtobufNested

class UserRegisterRsp_QtProtobufData;
class UserRegisterRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = UserRegisterRsp_QtProtobufNested::QtProtobufFieldEnum;
    UserRegisterRsp();
    ~UserRegisterRsp();
    UserRegisterRsp(const UserRegisterRsp &other);
    UserRegisterRsp &operator =(const UserRegisterRsp &other);
    UserRegisterRsp(UserRegisterRsp &&other) noexcept;
    UserRegisterRsp &operator =(UserRegisterRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(UserRegisterRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    const QString &errmsg() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    static void registerTypes();

private:
    friend bool comparesEqual(const UserRegisterRsp &lhs, const UserRegisterRsp &rhs) noexcept;
    friend bool operator==(const UserRegisterRsp &lhs, const UserRegisterRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const UserRegisterRsp &lhs, const UserRegisterRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<UserRegisterRsp_QtProtobufData> dptr;
};
namespace UserRegisterRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace UserRegisterRsp_QtProtobufNested

class UserLoginReq_QtProtobufData;
class UserLoginReq : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString nickname READ nickname WRITE setNickname SCRIPTABLE true)
    Q_PROPERTY(QString password READ password WRITE setPassword SCRIPTABLE true)
    Q_PROPERTY(QString verifyCodeId READ verifyCodeId_p WRITE setVerifyCodeId_p)
    Q_PROPERTY(bool hasVerifyCodeId READ hasVerifyCodeId)
    Q_PROPERTY(QString verifyCode READ verifyCode_p WRITE setVerifyCode_p)
    Q_PROPERTY(bool hasVerifyCode READ hasVerifyCode)

public:
    using QtProtobufFieldEnum = UserLoginReq_QtProtobufNested::QtProtobufFieldEnum;
    UserLoginReq();
    ~UserLoginReq();
    UserLoginReq(const UserLoginReq &other);
    UserLoginReq &operator =(const UserLoginReq &other);
    UserLoginReq(UserLoginReq &&other) noexcept;
    UserLoginReq &operator =(UserLoginReq &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(UserLoginReq &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    const QString &nickname() const &;

    const QString &password() const &;

    bool hasVerifyCodeId() const;
    QString verifyCodeId() const;

    bool hasVerifyCode() const;
    QString verifyCode() const;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setNickname(const QString &nickname);
    void setNickname(QString &&nickname);
    void setPassword(const QString &password);
    void setPassword(QString &&password);
    void setVerifyCodeId(const QString &verifyCodeId);
    void setVerifyCodeId(QString &&verifyCodeId);
    void clearVerifyCodeId();
    void setVerifyCode(const QString &verifyCode);
    void setVerifyCode(QString &&verifyCode);
    void clearVerifyCode();
    static void registerTypes();

private:
    friend bool comparesEqual(const UserLoginReq &lhs, const UserLoginReq &rhs) noexcept;
    friend bool operator==(const UserLoginReq &lhs, const UserLoginReq &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const UserLoginReq &lhs, const UserLoginReq &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QString verifyCodeId_p() const;
    QString verifyCode_p() const;
    void setVerifyCodeId_p(QString verifyCodeId);
    void setVerifyCode_p(QString verifyCode);
    QExplicitlySharedDataPointer<UserLoginReq_QtProtobufData> dptr;
};
namespace UserLoginReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    NicknameProtoFieldNumber = 2,
    PasswordProtoFieldNumber = 3,
    VerifyCodeIdProtoFieldNumber = 4,
    VerifyCodeProtoFieldNumber = 5,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace UserLoginReq_QtProtobufNested

class UserLoginRsp_QtProtobufData;
class UserLoginRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)
    Q_PROPERTY(QString loginSessionId READ loginSessionId WRITE setLoginSessionId SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = UserLoginRsp_QtProtobufNested::QtProtobufFieldEnum;
    UserLoginRsp();
    ~UserLoginRsp();
    UserLoginRsp(const UserLoginRsp &other);
    UserLoginRsp &operator =(const UserLoginRsp &other);
    UserLoginRsp(UserLoginRsp &&other) noexcept;
    UserLoginRsp &operator =(UserLoginRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(UserLoginRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    const QString &errmsg() const &;

    const QString &loginSessionId() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    void setLoginSessionId(const QString &loginSessionId);
    void setLoginSessionId(QString &&loginSessionId);
    static void registerTypes();

private:
    friend bool comparesEqual(const UserLoginRsp &lhs, const UserLoginRsp &rhs) noexcept;
    friend bool operator==(const UserLoginRsp &lhs, const UserLoginRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const UserLoginRsp &lhs, const UserLoginRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<UserLoginRsp_QtProtobufData> dptr;
};
namespace UserLoginRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
    LoginSessionIdProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace UserLoginRsp_QtProtobufNested

class PhoneVerifyCodeReq_QtProtobufData;
class PhoneVerifyCodeReq : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString phoneNumber READ phoneNumber WRITE setPhoneNumber SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = PhoneVerifyCodeReq_QtProtobufNested::QtProtobufFieldEnum;
    PhoneVerifyCodeReq();
    ~PhoneVerifyCodeReq();
    PhoneVerifyCodeReq(const PhoneVerifyCodeReq &other);
    PhoneVerifyCodeReq &operator =(const PhoneVerifyCodeReq &other);
    PhoneVerifyCodeReq(PhoneVerifyCodeReq &&other) noexcept;
    PhoneVerifyCodeReq &operator =(PhoneVerifyCodeReq &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(PhoneVerifyCodeReq &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    const QString &phoneNumber() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setPhoneNumber(const QString &phoneNumber);
    void setPhoneNumber(QString &&phoneNumber);
    static void registerTypes();

private:
    friend bool comparesEqual(const PhoneVerifyCodeReq &lhs, const PhoneVerifyCodeReq &rhs) noexcept;
    friend bool operator==(const PhoneVerifyCodeReq &lhs, const PhoneVerifyCodeReq &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const PhoneVerifyCodeReq &lhs, const PhoneVerifyCodeReq &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<PhoneVerifyCodeReq_QtProtobufData> dptr;
};
namespace PhoneVerifyCodeReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    PhoneNumberProtoFieldNumber = 2,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace PhoneVerifyCodeReq_QtProtobufNested

class PhoneVerifyCodeRsp_QtProtobufData;
class PhoneVerifyCodeRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)
    Q_PROPERTY(QString verifyCodeId READ verifyCodeId WRITE setVerifyCodeId SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = PhoneVerifyCodeRsp_QtProtobufNested::QtProtobufFieldEnum;
    PhoneVerifyCodeRsp();
    ~PhoneVerifyCodeRsp();
    PhoneVerifyCodeRsp(const PhoneVerifyCodeRsp &other);
    PhoneVerifyCodeRsp &operator =(const PhoneVerifyCodeRsp &other);
    PhoneVerifyCodeRsp(PhoneVerifyCodeRsp &&other) noexcept;
    PhoneVerifyCodeRsp &operator =(PhoneVerifyCodeRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(PhoneVerifyCodeRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    const QString &errmsg() const &;

    const QString &verifyCodeId() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    void setVerifyCodeId(const QString &verifyCodeId);
    void setVerifyCodeId(QString &&verifyCodeId);
    static void registerTypes();

private:
    friend bool comparesEqual(const PhoneVerifyCodeRsp &lhs, const PhoneVerifyCodeRsp &rhs) noexcept;
    friend bool operator==(const PhoneVerifyCodeRsp &lhs, const PhoneVerifyCodeRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const PhoneVerifyCodeRsp &lhs, const PhoneVerifyCodeRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<PhoneVerifyCodeRsp_QtProtobufData> dptr;
};
namespace PhoneVerifyCodeRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
    VerifyCodeIdProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace PhoneVerifyCodeRsp_QtProtobufNested

class PhoneRegisterReq_QtProtobufData;
class PhoneRegisterReq : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString phoneNumber READ phoneNumber WRITE setPhoneNumber SCRIPTABLE true)
    Q_PROPERTY(QString verifyCodeId READ verifyCodeId WRITE setVerifyCodeId SCRIPTABLE true)
    Q_PROPERTY(QString verifyCode READ verifyCode WRITE setVerifyCode SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = PhoneRegisterReq_QtProtobufNested::QtProtobufFieldEnum;
    PhoneRegisterReq();
    ~PhoneRegisterReq();
    PhoneRegisterReq(const PhoneRegisterReq &other);
    PhoneRegisterReq &operator =(const PhoneRegisterReq &other);
    PhoneRegisterReq(PhoneRegisterReq &&other) noexcept;
    PhoneRegisterReq &operator =(PhoneRegisterReq &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(PhoneRegisterReq &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    const QString &phoneNumber() const &;

    const QString &verifyCodeId() const &;

    const QString &verifyCode() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setPhoneNumber(const QString &phoneNumber);
    void setPhoneNumber(QString &&phoneNumber);
    void setVerifyCodeId(const QString &verifyCodeId);
    void setVerifyCodeId(QString &&verifyCodeId);
    void setVerifyCode(const QString &verifyCode);
    void setVerifyCode(QString &&verifyCode);
    static void registerTypes();

private:
    friend bool comparesEqual(const PhoneRegisterReq &lhs, const PhoneRegisterReq &rhs) noexcept;
    friend bool operator==(const PhoneRegisterReq &lhs, const PhoneRegisterReq &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const PhoneRegisterReq &lhs, const PhoneRegisterReq &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<PhoneRegisterReq_QtProtobufData> dptr;
};
namespace PhoneRegisterReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    PhoneNumberProtoFieldNumber = 2,
    VerifyCodeIdProtoFieldNumber = 3,
    VerifyCodeProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace PhoneRegisterReq_QtProtobufNested

class PhoneRegisterRsp_QtProtobufData;
class PhoneRegisterRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = PhoneRegisterRsp_QtProtobufNested::QtProtobufFieldEnum;
    PhoneRegisterRsp();
    ~PhoneRegisterRsp();
    PhoneRegisterRsp(const PhoneRegisterRsp &other);
    PhoneRegisterRsp &operator =(const PhoneRegisterRsp &other);
    PhoneRegisterRsp(PhoneRegisterRsp &&other) noexcept;
    PhoneRegisterRsp &operator =(PhoneRegisterRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(PhoneRegisterRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    const QString &errmsg() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    static void registerTypes();

private:
    friend bool comparesEqual(const PhoneRegisterRsp &lhs, const PhoneRegisterRsp &rhs) noexcept;
    friend bool operator==(const PhoneRegisterRsp &lhs, const PhoneRegisterRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const PhoneRegisterRsp &lhs, const PhoneRegisterRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<PhoneRegisterRsp_QtProtobufData> dptr;
};
namespace PhoneRegisterRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace PhoneRegisterRsp_QtProtobufNested

class PhoneLoginReq_QtProtobufData;
class PhoneLoginReq : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString phoneNumber READ phoneNumber WRITE setPhoneNumber SCRIPTABLE true)
    Q_PROPERTY(QString verifyCodeId READ verifyCodeId WRITE setVerifyCodeId SCRIPTABLE true)
    Q_PROPERTY(QString verifyCode READ verifyCode WRITE setVerifyCode SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = PhoneLoginReq_QtProtobufNested::QtProtobufFieldEnum;
    PhoneLoginReq();
    ~PhoneLoginReq();
    PhoneLoginReq(const PhoneLoginReq &other);
    PhoneLoginReq &operator =(const PhoneLoginReq &other);
    PhoneLoginReq(PhoneLoginReq &&other) noexcept;
    PhoneLoginReq &operator =(PhoneLoginReq &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(PhoneLoginReq &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    const QString &phoneNumber() const &;

    const QString &verifyCodeId() const &;

    const QString &verifyCode() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setPhoneNumber(const QString &phoneNumber);
    void setPhoneNumber(QString &&phoneNumber);
    void setVerifyCodeId(const QString &verifyCodeId);
    void setVerifyCodeId(QString &&verifyCodeId);
    void setVerifyCode(const QString &verifyCode);
    void setVerifyCode(QString &&verifyCode);
    static void registerTypes();

private:
    friend bool comparesEqual(const PhoneLoginReq &lhs, const PhoneLoginReq &rhs) noexcept;
    friend bool operator==(const PhoneLoginReq &lhs, const PhoneLoginReq &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const PhoneLoginReq &lhs, const PhoneLoginReq &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<PhoneLoginReq_QtProtobufData> dptr;
};
namespace PhoneLoginReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    PhoneNumberProtoFieldNumber = 2,
    VerifyCodeIdProtoFieldNumber = 3,
    VerifyCodeProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace PhoneLoginReq_QtProtobufNested

class PhoneLoginRsp_QtProtobufData;
class PhoneLoginRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)
    Q_PROPERTY(QString loginSessionId READ loginSessionId WRITE setLoginSessionId SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = PhoneLoginRsp_QtProtobufNested::QtProtobufFieldEnum;
    PhoneLoginRsp();
    ~PhoneLoginRsp();
    PhoneLoginRsp(const PhoneLoginRsp &other);
    PhoneLoginRsp &operator =(const PhoneLoginRsp &other);
    PhoneLoginRsp(PhoneLoginRsp &&other) noexcept;
    PhoneLoginRsp &operator =(PhoneLoginRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(PhoneLoginRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    const QString &errmsg() const &;

    const QString &loginSessionId() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    void setLoginSessionId(const QString &loginSessionId);
    void setLoginSessionId(QString &&loginSessionId);
    static void registerTypes();

private:
    friend bool comparesEqual(const PhoneLoginRsp &lhs, const PhoneLoginRsp &rhs) noexcept;
    friend bool operator==(const PhoneLoginRsp &lhs, const PhoneLoginRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const PhoneLoginRsp &lhs, const PhoneLoginRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<PhoneLoginRsp_QtProtobufData> dptr;
};
namespace PhoneLoginRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
    LoginSessionIdProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace PhoneLoginRsp_QtProtobufNested

class GetUserInfoReq_QtProtobufData;
class GetUserInfoReq : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString userId READ userId_p WRITE setUserId_p)
    Q_PROPERTY(bool hasUserId READ hasUserId)
    Q_PROPERTY(QString sessionId READ sessionId_p WRITE setSessionId_p)
    Q_PROPERTY(bool hasSessionId READ hasSessionId)

public:
    using QtProtobufFieldEnum = GetUserInfoReq_QtProtobufNested::QtProtobufFieldEnum;
    GetUserInfoReq();
    ~GetUserInfoReq();
    GetUserInfoReq(const GetUserInfoReq &other);
    GetUserInfoReq &operator =(const GetUserInfoReq &other);
    GetUserInfoReq(GetUserInfoReq &&other) noexcept;
    GetUserInfoReq &operator =(GetUserInfoReq &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(GetUserInfoReq &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool hasUserId() const;
    QString userId() const;

    bool hasSessionId() const;
    QString sessionId() const;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setUserId(const QString &userId);
    void setUserId(QString &&userId);
    void clearUserId();
    void setSessionId(const QString &sessionId);
    void setSessionId(QString &&sessionId);
    void clearSessionId();
    static void registerTypes();

private:
    friend bool comparesEqual(const GetUserInfoReq &lhs, const GetUserInfoReq &rhs) noexcept;
    friend bool operator==(const GetUserInfoReq &lhs, const GetUserInfoReq &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const GetUserInfoReq &lhs, const GetUserInfoReq &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QString userId_p() const;
    QString sessionId_p() const;
    void setUserId_p(QString userId);
    void setSessionId_p(QString sessionId);
    QExplicitlySharedDataPointer<GetUserInfoReq_QtProtobufData> dptr;
};
namespace GetUserInfoReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    UserIdProtoFieldNumber = 2,
    SessionIdProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace GetUserInfoReq_QtProtobufNested

class GetUserInfoRsp_QtProtobufData;
class GetUserInfoRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)
    Q_PROPERTY(SnowK::UserInfo *userInfo_p READ userInfo_p WRITE setUserInfo_p SCRIPTABLE false)
    Q_PROPERTY(bool hasUserInfo READ hasUserInfo)

public:
    using QtProtobufFieldEnum = GetUserInfoRsp_QtProtobufNested::QtProtobufFieldEnum;
    GetUserInfoRsp();
    ~GetUserInfoRsp();
    GetUserInfoRsp(const GetUserInfoRsp &other);
    GetUserInfoRsp &operator =(const GetUserInfoRsp &other);
    GetUserInfoRsp(GetUserInfoRsp &&other) noexcept;
    GetUserInfoRsp &operator =(GetUserInfoRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(GetUserInfoRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    const QString &errmsg() const &;

    bool hasUserInfo() const;
    const UserInfo &userInfo() const &;
    void clearUserInfo();
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    void setUserInfo(const UserInfo &userInfo);
    void setUserInfo(UserInfo &&userInfo);
    static void registerTypes();

private:
    friend bool comparesEqual(const GetUserInfoRsp &lhs, const GetUserInfoRsp &rhs) noexcept;
    friend bool operator==(const GetUserInfoRsp &lhs, const GetUserInfoRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const GetUserInfoRsp &lhs, const GetUserInfoRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    UserInfo *userInfo_p();
    void setUserInfo_p(UserInfo *userInfo);
    QExplicitlySharedDataPointer<GetUserInfoRsp_QtProtobufData> dptr;
};
namespace GetUserInfoRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
    UserInfoProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace GetUserInfoRsp_QtProtobufNested

class GetMultiUserInfoReq_QtProtobufData;
class GetMultiUserInfoReq : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QStringList usersId READ usersId WRITE setUsersId SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = GetMultiUserInfoReq_QtProtobufNested::QtProtobufFieldEnum;
    GetMultiUserInfoReq();
    ~GetMultiUserInfoReq();
    GetMultiUserInfoReq(const GetMultiUserInfoReq &other);
    GetMultiUserInfoReq &operator =(const GetMultiUserInfoReq &other);
    GetMultiUserInfoReq(GetMultiUserInfoReq &&other) noexcept;
    GetMultiUserInfoReq &operator =(GetMultiUserInfoReq &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(GetMultiUserInfoReq &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    const QStringList &usersId() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setUsersId(const QStringList &usersId);
    void setUsersId(QStringList &&usersId);
    static void registerTypes();

private:
    friend bool comparesEqual(const GetMultiUserInfoReq &lhs, const GetMultiUserInfoReq &rhs) noexcept;
    friend bool operator==(const GetMultiUserInfoReq &lhs, const GetMultiUserInfoReq &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const GetMultiUserInfoReq &lhs, const GetMultiUserInfoReq &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<GetMultiUserInfoReq_QtProtobufData> dptr;
};
namespace GetMultiUserInfoReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    UsersIdProtoFieldNumber = 2,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace GetMultiUserInfoReq_QtProtobufNested

class GetMultiUserInfoRsp_QtProtobufData;
class GetMultiUserInfoRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)
    Q_PROPERTY(SnowK::GetMultiUserInfoRsp::UsersInfoEntry usersInfo READ usersInfo WRITE setUsersInfo SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = GetMultiUserInfoRsp_QtProtobufNested::QtProtobufFieldEnum;
    using UsersInfoEntry = QHash<QString, UserInfo>;
    GetMultiUserInfoRsp();
    ~GetMultiUserInfoRsp();
    GetMultiUserInfoRsp(const GetMultiUserInfoRsp &other);
    GetMultiUserInfoRsp &operator =(const GetMultiUserInfoRsp &other);
    GetMultiUserInfoRsp(GetMultiUserInfoRsp &&other) noexcept;
    GetMultiUserInfoRsp &operator =(GetMultiUserInfoRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(GetMultiUserInfoRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    const QString &errmsg() const &;

    const GetMultiUserInfoRsp::UsersInfoEntry &usersInfo() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    void setUsersInfo(const GetMultiUserInfoRsp::UsersInfoEntry &usersInfo);
    void setUsersInfo(GetMultiUserInfoRsp::UsersInfoEntry &&usersInfo);
    static void registerTypes();

private:
    friend bool comparesEqual(const GetMultiUserInfoRsp &lhs, const GetMultiUserInfoRsp &rhs) noexcept;
    friend bool operator==(const GetMultiUserInfoRsp &lhs, const GetMultiUserInfoRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const GetMultiUserInfoRsp &lhs, const GetMultiUserInfoRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<GetMultiUserInfoRsp_QtProtobufData> dptr;
};
namespace GetMultiUserInfoRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
    UsersInfoProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace GetMultiUserInfoRsp_QtProtobufNested

class SetUserAvatarReq_QtProtobufData;
class SetUserAvatarReq : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString userId READ userId_p WRITE setUserId_p)
    Q_PROPERTY(bool hasUserId READ hasUserId)
    Q_PROPERTY(QString sessionId READ sessionId_p WRITE setSessionId_p)
    Q_PROPERTY(bool hasSessionId READ hasSessionId)
    Q_PROPERTY(QByteArray avatar READ avatar WRITE setAvatar SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SetUserAvatarReq_QtProtobufNested::QtProtobufFieldEnum;
    SetUserAvatarReq();
    ~SetUserAvatarReq();
    SetUserAvatarReq(const SetUserAvatarReq &other);
    SetUserAvatarReq &operator =(const SetUserAvatarReq &other);
    SetUserAvatarReq(SetUserAvatarReq &&other) noexcept;
    SetUserAvatarReq &operator =(SetUserAvatarReq &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SetUserAvatarReq &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool hasUserId() const;
    QString userId() const;

    bool hasSessionId() const;
    QString sessionId() const;

    const QByteArray &avatar() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setUserId(const QString &userId);
    void setUserId(QString &&userId);
    void clearUserId();
    void setSessionId(const QString &sessionId);
    void setSessionId(QString &&sessionId);
    void clearSessionId();
    void setAvatar(const QByteArray &avatar);
    void setAvatar(QByteArray &&avatar);
    static void registerTypes();

private:
    friend bool comparesEqual(const SetUserAvatarReq &lhs, const SetUserAvatarReq &rhs) noexcept;
    friend bool operator==(const SetUserAvatarReq &lhs, const SetUserAvatarReq &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SetUserAvatarReq &lhs, const SetUserAvatarReq &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QString userId_p() const;
    QString sessionId_p() const;
    void setUserId_p(QString userId);
    void setSessionId_p(QString sessionId);
    QExplicitlySharedDataPointer<SetUserAvatarReq_QtProtobufData> dptr;
};
namespace SetUserAvatarReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    UserIdProtoFieldNumber = 2,
    SessionIdProtoFieldNumber = 3,
    AvatarProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SetUserAvatarReq_QtProtobufNested

class SetUserAvatarRsp_QtProtobufData;
class SetUserAvatarRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SetUserAvatarRsp_QtProtobufNested::QtProtobufFieldEnum;
    SetUserAvatarRsp();
    ~SetUserAvatarRsp();
    SetUserAvatarRsp(const SetUserAvatarRsp &other);
    SetUserAvatarRsp &operator =(const SetUserAvatarRsp &other);
    SetUserAvatarRsp(SetUserAvatarRsp &&other) noexcept;
    SetUserAvatarRsp &operator =(SetUserAvatarRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SetUserAvatarRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    const QString &errmsg() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    static void registerTypes();

private:
    friend bool comparesEqual(const SetUserAvatarRsp &lhs, const SetUserAvatarRsp &rhs) noexcept;
    friend bool operator==(const SetUserAvatarRsp &lhs, const SetUserAvatarRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SetUserAvatarRsp &lhs, const SetUserAvatarRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SetUserAvatarRsp_QtProtobufData> dptr;
};
namespace SetUserAvatarRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SetUserAvatarRsp_QtProtobufNested

class SetUserNicknameReq_QtProtobufData;
class SetUserNicknameReq : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString userId READ userId_p WRITE setUserId_p)
    Q_PROPERTY(bool hasUserId READ hasUserId)
    Q_PROPERTY(QString sessionId READ sessionId_p WRITE setSessionId_p)
    Q_PROPERTY(bool hasSessionId READ hasSessionId)
    Q_PROPERTY(QString nickname READ nickname WRITE setNickname SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SetUserNicknameReq_QtProtobufNested::QtProtobufFieldEnum;
    SetUserNicknameReq();
    ~SetUserNicknameReq();
    SetUserNicknameReq(const SetUserNicknameReq &other);
    SetUserNicknameReq &operator =(const SetUserNicknameReq &other);
    SetUserNicknameReq(SetUserNicknameReq &&other) noexcept;
    SetUserNicknameReq &operator =(SetUserNicknameReq &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SetUserNicknameReq &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool hasUserId() const;
    QString userId() const;

    bool hasSessionId() const;
    QString sessionId() const;

    const QString &nickname() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setUserId(const QString &userId);
    void setUserId(QString &&userId);
    void clearUserId();
    void setSessionId(const QString &sessionId);
    void setSessionId(QString &&sessionId);
    void clearSessionId();
    void setNickname(const QString &nickname);
    void setNickname(QString &&nickname);
    static void registerTypes();

private:
    friend bool comparesEqual(const SetUserNicknameReq &lhs, const SetUserNicknameReq &rhs) noexcept;
    friend bool operator==(const SetUserNicknameReq &lhs, const SetUserNicknameReq &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SetUserNicknameReq &lhs, const SetUserNicknameReq &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QString userId_p() const;
    QString sessionId_p() const;
    void setUserId_p(QString userId);
    void setSessionId_p(QString sessionId);
    QExplicitlySharedDataPointer<SetUserNicknameReq_QtProtobufData> dptr;
};
namespace SetUserNicknameReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    UserIdProtoFieldNumber = 2,
    SessionIdProtoFieldNumber = 3,
    NicknameProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SetUserNicknameReq_QtProtobufNested

class SetUserNicknameRsp_QtProtobufData;
class SetUserNicknameRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SetUserNicknameRsp_QtProtobufNested::QtProtobufFieldEnum;
    SetUserNicknameRsp();
    ~SetUserNicknameRsp();
    SetUserNicknameRsp(const SetUserNicknameRsp &other);
    SetUserNicknameRsp &operator =(const SetUserNicknameRsp &other);
    SetUserNicknameRsp(SetUserNicknameRsp &&other) noexcept;
    SetUserNicknameRsp &operator =(SetUserNicknameRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SetUserNicknameRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    const QString &errmsg() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    static void registerTypes();

private:
    friend bool comparesEqual(const SetUserNicknameRsp &lhs, const SetUserNicknameRsp &rhs) noexcept;
    friend bool operator==(const SetUserNicknameRsp &lhs, const SetUserNicknameRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SetUserNicknameRsp &lhs, const SetUserNicknameRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SetUserNicknameRsp_QtProtobufData> dptr;
};
namespace SetUserNicknameRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SetUserNicknameRsp_QtProtobufNested

class SetUserDescriptionReq_QtProtobufData;
class SetUserDescriptionReq : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString userId READ userId_p WRITE setUserId_p)
    Q_PROPERTY(bool hasUserId READ hasUserId)
    Q_PROPERTY(QString sessionId READ sessionId_p WRITE setSessionId_p)
    Q_PROPERTY(bool hasSessionId READ hasSessionId)
    Q_PROPERTY(QString description READ description WRITE setDescription SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SetUserDescriptionReq_QtProtobufNested::QtProtobufFieldEnum;
    SetUserDescriptionReq();
    ~SetUserDescriptionReq();
    SetUserDescriptionReq(const SetUserDescriptionReq &other);
    SetUserDescriptionReq &operator =(const SetUserDescriptionReq &other);
    SetUserDescriptionReq(SetUserDescriptionReq &&other) noexcept;
    SetUserDescriptionReq &operator =(SetUserDescriptionReq &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SetUserDescriptionReq &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool hasUserId() const;
    QString userId() const;

    bool hasSessionId() const;
    QString sessionId() const;

    const QString &description() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setUserId(const QString &userId);
    void setUserId(QString &&userId);
    void clearUserId();
    void setSessionId(const QString &sessionId);
    void setSessionId(QString &&sessionId);
    void clearSessionId();
    void setDescription(const QString &description);
    void setDescription(QString &&description);
    static void registerTypes();

private:
    friend bool comparesEqual(const SetUserDescriptionReq &lhs, const SetUserDescriptionReq &rhs) noexcept;
    friend bool operator==(const SetUserDescriptionReq &lhs, const SetUserDescriptionReq &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SetUserDescriptionReq &lhs, const SetUserDescriptionReq &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QString userId_p() const;
    QString sessionId_p() const;
    void setUserId_p(QString userId);
    void setSessionId_p(QString sessionId);
    QExplicitlySharedDataPointer<SetUserDescriptionReq_QtProtobufData> dptr;
};
namespace SetUserDescriptionReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    UserIdProtoFieldNumber = 2,
    SessionIdProtoFieldNumber = 3,
    DescriptionProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SetUserDescriptionReq_QtProtobufNested

class SetUserDescriptionRsp_QtProtobufData;
class SetUserDescriptionRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SetUserDescriptionRsp_QtProtobufNested::QtProtobufFieldEnum;
    SetUserDescriptionRsp();
    ~SetUserDescriptionRsp();
    SetUserDescriptionRsp(const SetUserDescriptionRsp &other);
    SetUserDescriptionRsp &operator =(const SetUserDescriptionRsp &other);
    SetUserDescriptionRsp(SetUserDescriptionRsp &&other) noexcept;
    SetUserDescriptionRsp &operator =(SetUserDescriptionRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SetUserDescriptionRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    const QString &errmsg() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    static void registerTypes();

private:
    friend bool comparesEqual(const SetUserDescriptionRsp &lhs, const SetUserDescriptionRsp &rhs) noexcept;
    friend bool operator==(const SetUserDescriptionRsp &lhs, const SetUserDescriptionRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SetUserDescriptionRsp &lhs, const SetUserDescriptionRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SetUserDescriptionRsp_QtProtobufData> dptr;
};
namespace SetUserDescriptionRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SetUserDescriptionRsp_QtProtobufNested

class SetUserPhoneNumberReq_QtProtobufData;
class SetUserPhoneNumberReq : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString userId READ userId_p WRITE setUserId_p)
    Q_PROPERTY(bool hasUserId READ hasUserId)
    Q_PROPERTY(QString sessionId READ sessionId_p WRITE setSessionId_p)
    Q_PROPERTY(bool hasSessionId READ hasSessionId)
    Q_PROPERTY(QString phoneNumber READ phoneNumber WRITE setPhoneNumber SCRIPTABLE true)
    Q_PROPERTY(QString phoneVerifyCodeId READ phoneVerifyCodeId WRITE setPhoneVerifyCodeId SCRIPTABLE true)
    Q_PROPERTY(QString phoneVerifyCode READ phoneVerifyCode WRITE setPhoneVerifyCode SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SetUserPhoneNumberReq_QtProtobufNested::QtProtobufFieldEnum;
    SetUserPhoneNumberReq();
    ~SetUserPhoneNumberReq();
    SetUserPhoneNumberReq(const SetUserPhoneNumberReq &other);
    SetUserPhoneNumberReq &operator =(const SetUserPhoneNumberReq &other);
    SetUserPhoneNumberReq(SetUserPhoneNumberReq &&other) noexcept;
    SetUserPhoneNumberReq &operator =(SetUserPhoneNumberReq &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SetUserPhoneNumberReq &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool hasUserId() const;
    QString userId() const;

    bool hasSessionId() const;
    QString sessionId() const;

    const QString &phoneNumber() const &;

    const QString &phoneVerifyCodeId() const &;

    const QString &phoneVerifyCode() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setUserId(const QString &userId);
    void setUserId(QString &&userId);
    void clearUserId();
    void setSessionId(const QString &sessionId);
    void setSessionId(QString &&sessionId);
    void clearSessionId();
    void setPhoneNumber(const QString &phoneNumber);
    void setPhoneNumber(QString &&phoneNumber);
    void setPhoneVerifyCodeId(const QString &phoneVerifyCodeId);
    void setPhoneVerifyCodeId(QString &&phoneVerifyCodeId);
    void setPhoneVerifyCode(const QString &phoneVerifyCode);
    void setPhoneVerifyCode(QString &&phoneVerifyCode);
    static void registerTypes();

private:
    friend bool comparesEqual(const SetUserPhoneNumberReq &lhs, const SetUserPhoneNumberReq &rhs) noexcept;
    friend bool operator==(const SetUserPhoneNumberReq &lhs, const SetUserPhoneNumberReq &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SetUserPhoneNumberReq &lhs, const SetUserPhoneNumberReq &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QString userId_p() const;
    QString sessionId_p() const;
    void setUserId_p(QString userId);
    void setSessionId_p(QString sessionId);
    QExplicitlySharedDataPointer<SetUserPhoneNumberReq_QtProtobufData> dptr;
};
namespace SetUserPhoneNumberReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    UserIdProtoFieldNumber = 2,
    SessionIdProtoFieldNumber = 3,
    PhoneNumberProtoFieldNumber = 4,
    PhoneVerifyCodeIdProtoFieldNumber = 5,
    PhoneVerifyCodeProtoFieldNumber = 6,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SetUserPhoneNumberReq_QtProtobufNested

class SetUserPhoneNumberRsp_QtProtobufData;
class SetUserPhoneNumberRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SetUserPhoneNumberRsp_QtProtobufNested::QtProtobufFieldEnum;
    SetUserPhoneNumberRsp();
    ~SetUserPhoneNumberRsp();
    SetUserPhoneNumberRsp(const SetUserPhoneNumberRsp &other);
    SetUserPhoneNumberRsp &operator =(const SetUserPhoneNumberRsp &other);
    SetUserPhoneNumberRsp(SetUserPhoneNumberRsp &&other) noexcept;
    SetUserPhoneNumberRsp &operator =(SetUserPhoneNumberRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SetUserPhoneNumberRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    const QString &errmsg() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    static void registerTypes();

private:
    friend bool comparesEqual(const SetUserPhoneNumberRsp &lhs, const SetUserPhoneNumberRsp &rhs) noexcept;
    friend bool operator==(const SetUserPhoneNumberRsp &lhs, const SetUserPhoneNumberRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SetUserPhoneNumberRsp &lhs, const SetUserPhoneNumberRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SetUserPhoneNumberRsp_QtProtobufData> dptr;
};
namespace SetUserPhoneNumberRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SetUserPhoneNumberRsp_QtProtobufNested
} // namespace SnowK

#endif // USER_QPB_H
