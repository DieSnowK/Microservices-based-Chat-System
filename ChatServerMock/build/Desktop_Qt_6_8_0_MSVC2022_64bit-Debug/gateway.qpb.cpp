/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */


#include "gateway.qpb.h"

#include <QtProtobuf/qprotobufregistration.h>

#include <cmath>

namespace SnowK {

class ClientAuthenticationReq_QtProtobufData : public QSharedData
{
public:
    ClientAuthenticationReq_QtProtobufData()
        : QSharedData()
    {
    }

    ClientAuthenticationReq_QtProtobufData(const ClientAuthenticationReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_sessionId(other.m_sessionId)
    {
    }

    QString m_requestId;
    QString m_sessionId;
};

ClientAuthenticationReq::~ClientAuthenticationReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 9> qt_protobuf_ClientAuthenticationReq_uint_data;
    const char qt_protobuf_ClientAuthenticationReq_char_data[51];
} qt_protobuf_ClientAuthenticationReq_metadata {
    // data
    {
        0, /* = version */
        2, /* = num fields */
        3, /* = field number offset */
        5, /* = property index offset */
        7, /* = field flags offset */
        29, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        30, /* = requestId */
        40, /* = sessionId */
        50, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = sessionId */
        // Property indices:
        0, /* = requestId */
        1, /* = sessionId */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = requestId */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = sessionId */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.ClientAuthenticationReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0sessionId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering ClientAuthenticationReq::staticPropertyOrdering = {
    &qt_protobuf_ClientAuthenticationReq_metadata.data
};

void ClientAuthenticationReq::registerTypes()
{
    qRegisterMetaType<ClientAuthenticationReq>();
    qRegisterMetaType<ClientAuthenticationReqRepeated>();
}

ClientAuthenticationReq::ClientAuthenticationReq()
    : QProtobufMessage(&ClientAuthenticationReq::staticMetaObject, &ClientAuthenticationReq::staticPropertyOrdering),
      dptr(new ClientAuthenticationReq_QtProtobufData)
{
}

ClientAuthenticationReq::ClientAuthenticationReq(const ClientAuthenticationReq &other)
    = default;
ClientAuthenticationReq &ClientAuthenticationReq::operator =(const ClientAuthenticationReq &other)
{
    ClientAuthenticationReq temp(other);
    swap(temp);
    return *this;
}
ClientAuthenticationReq::ClientAuthenticationReq(ClientAuthenticationReq &&other) noexcept
    = default;
bool comparesEqual(const ClientAuthenticationReq &lhs, const ClientAuthenticationReq &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_requestId == rhs.dptr->m_requestId
        && lhs.dptr->m_sessionId == rhs.dptr->m_sessionId;
}

const QString &ClientAuthenticationReq::requestId() const &
{
    return dptr->m_requestId;
}

const QString &ClientAuthenticationReq::sessionId() const &
{
    return dptr->m_sessionId;
}

void ClientAuthenticationReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void ClientAuthenticationReq::setRequestId(QString &&requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = std::move(requestId);
    }
}

void ClientAuthenticationReq::setSessionId(const QString &sessionId)
{
    if (dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void ClientAuthenticationReq::setSessionId(QString &&sessionId)
{
    if (dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = std::move(sessionId);
    }
}

} // namespace SnowK

#include "moc_gateway.qpb.cpp"
