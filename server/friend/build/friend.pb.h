// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_friend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_friend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_friend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_friend_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_friend_2eproto;
namespace SnowK {
class ChatSessionCreateReq;
struct ChatSessionCreateReqDefaultTypeInternal;
extern ChatSessionCreateReqDefaultTypeInternal _ChatSessionCreateReq_default_instance_;
class ChatSessionCreateRsp;
struct ChatSessionCreateRspDefaultTypeInternal;
extern ChatSessionCreateRspDefaultTypeInternal _ChatSessionCreateRsp_default_instance_;
class FriendAddProcessReq;
struct FriendAddProcessReqDefaultTypeInternal;
extern FriendAddProcessReqDefaultTypeInternal _FriendAddProcessReq_default_instance_;
class FriendAddProcessRsp;
struct FriendAddProcessRspDefaultTypeInternal;
extern FriendAddProcessRspDefaultTypeInternal _FriendAddProcessRsp_default_instance_;
class FriendAddReq;
struct FriendAddReqDefaultTypeInternal;
extern FriendAddReqDefaultTypeInternal _FriendAddReq_default_instance_;
class FriendAddRsp;
struct FriendAddRspDefaultTypeInternal;
extern FriendAddRspDefaultTypeInternal _FriendAddRsp_default_instance_;
class FriendEvent;
struct FriendEventDefaultTypeInternal;
extern FriendEventDefaultTypeInternal _FriendEvent_default_instance_;
class FriendRemoveReq;
struct FriendRemoveReqDefaultTypeInternal;
extern FriendRemoveReqDefaultTypeInternal _FriendRemoveReq_default_instance_;
class FriendRemoveRsp;
struct FriendRemoveRspDefaultTypeInternal;
extern FriendRemoveRspDefaultTypeInternal _FriendRemoveRsp_default_instance_;
class FriendSearchReq;
struct FriendSearchReqDefaultTypeInternal;
extern FriendSearchReqDefaultTypeInternal _FriendSearchReq_default_instance_;
class FriendSearchRsp;
struct FriendSearchRspDefaultTypeInternal;
extern FriendSearchRspDefaultTypeInternal _FriendSearchRsp_default_instance_;
class GetChatSessionListReq;
struct GetChatSessionListReqDefaultTypeInternal;
extern GetChatSessionListReqDefaultTypeInternal _GetChatSessionListReq_default_instance_;
class GetChatSessionListRsp;
struct GetChatSessionListRspDefaultTypeInternal;
extern GetChatSessionListRspDefaultTypeInternal _GetChatSessionListRsp_default_instance_;
class GetChatSessionMemberReq;
struct GetChatSessionMemberReqDefaultTypeInternal;
extern GetChatSessionMemberReqDefaultTypeInternal _GetChatSessionMemberReq_default_instance_;
class GetChatSessionMemberRsp;
struct GetChatSessionMemberRspDefaultTypeInternal;
extern GetChatSessionMemberRspDefaultTypeInternal _GetChatSessionMemberRsp_default_instance_;
class GetFriendListReq;
struct GetFriendListReqDefaultTypeInternal;
extern GetFriendListReqDefaultTypeInternal _GetFriendListReq_default_instance_;
class GetFriendListRsp;
struct GetFriendListRspDefaultTypeInternal;
extern GetFriendListRspDefaultTypeInternal _GetFriendListRsp_default_instance_;
class GetPendingFriendEventListReq;
struct GetPendingFriendEventListReqDefaultTypeInternal;
extern GetPendingFriendEventListReqDefaultTypeInternal _GetPendingFriendEventListReq_default_instance_;
class GetPendingFriendEventListRsp;
struct GetPendingFriendEventListRspDefaultTypeInternal;
extern GetPendingFriendEventListRspDefaultTypeInternal _GetPendingFriendEventListRsp_default_instance_;
}  // namespace SnowK
PROTOBUF_NAMESPACE_OPEN
template<> ::SnowK::ChatSessionCreateReq* Arena::CreateMaybeMessage<::SnowK::ChatSessionCreateReq>(Arena*);
template<> ::SnowK::ChatSessionCreateRsp* Arena::CreateMaybeMessage<::SnowK::ChatSessionCreateRsp>(Arena*);
template<> ::SnowK::FriendAddProcessReq* Arena::CreateMaybeMessage<::SnowK::FriendAddProcessReq>(Arena*);
template<> ::SnowK::FriendAddProcessRsp* Arena::CreateMaybeMessage<::SnowK::FriendAddProcessRsp>(Arena*);
template<> ::SnowK::FriendAddReq* Arena::CreateMaybeMessage<::SnowK::FriendAddReq>(Arena*);
template<> ::SnowK::FriendAddRsp* Arena::CreateMaybeMessage<::SnowK::FriendAddRsp>(Arena*);
template<> ::SnowK::FriendEvent* Arena::CreateMaybeMessage<::SnowK::FriendEvent>(Arena*);
template<> ::SnowK::FriendRemoveReq* Arena::CreateMaybeMessage<::SnowK::FriendRemoveReq>(Arena*);
template<> ::SnowK::FriendRemoveRsp* Arena::CreateMaybeMessage<::SnowK::FriendRemoveRsp>(Arena*);
template<> ::SnowK::FriendSearchReq* Arena::CreateMaybeMessage<::SnowK::FriendSearchReq>(Arena*);
template<> ::SnowK::FriendSearchRsp* Arena::CreateMaybeMessage<::SnowK::FriendSearchRsp>(Arena*);
template<> ::SnowK::GetChatSessionListReq* Arena::CreateMaybeMessage<::SnowK::GetChatSessionListReq>(Arena*);
template<> ::SnowK::GetChatSessionListRsp* Arena::CreateMaybeMessage<::SnowK::GetChatSessionListRsp>(Arena*);
template<> ::SnowK::GetChatSessionMemberReq* Arena::CreateMaybeMessage<::SnowK::GetChatSessionMemberReq>(Arena*);
template<> ::SnowK::GetChatSessionMemberRsp* Arena::CreateMaybeMessage<::SnowK::GetChatSessionMemberRsp>(Arena*);
template<> ::SnowK::GetFriendListReq* Arena::CreateMaybeMessage<::SnowK::GetFriendListReq>(Arena*);
template<> ::SnowK::GetFriendListRsp* Arena::CreateMaybeMessage<::SnowK::GetFriendListRsp>(Arena*);
template<> ::SnowK::GetPendingFriendEventListReq* Arena::CreateMaybeMessage<::SnowK::GetPendingFriendEventListReq>(Arena*);
template<> ::SnowK::GetPendingFriendEventListRsp* Arena::CreateMaybeMessage<::SnowK::GetPendingFriendEventListRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SnowK {

// ===================================================================

class GetFriendListReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.GetFriendListReq) */ {
 public:
  inline GetFriendListReq() : GetFriendListReq(nullptr) {}
  ~GetFriendListReq() override;
  explicit PROTOBUF_CONSTEXPR GetFriendListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriendListReq(const GetFriendListReq& from);
  GetFriendListReq(GetFriendListReq&& from) noexcept
    : GetFriendListReq() {
    *this = ::std::move(from);
  }

  inline GetFriendListReq& operator=(const GetFriendListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListReq& operator=(GetFriendListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendListReq* internal_default_instance() {
    return reinterpret_cast<const GetFriendListReq*>(
               &_GetFriendListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetFriendListReq& a, GetFriendListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFriendListReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFriendListReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFriendListReq& from) {
    GetFriendListReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.GetFriendListReq";
  }
  protected:
  explicit GetFriendListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional string user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // optional string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:SnowK.GetFriendListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetFriendListRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.GetFriendListRsp) */ {
 public:
  inline GetFriendListRsp() : GetFriendListRsp(nullptr) {}
  ~GetFriendListRsp() override;
  explicit PROTOBUF_CONSTEXPR GetFriendListRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriendListRsp(const GetFriendListRsp& from);
  GetFriendListRsp(GetFriendListRsp&& from) noexcept
    : GetFriendListRsp() {
    *this = ::std::move(from);
  }

  inline GetFriendListRsp& operator=(const GetFriendListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListRsp& operator=(GetFriendListRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendListRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendListRsp* internal_default_instance() {
    return reinterpret_cast<const GetFriendListRsp*>(
               &_GetFriendListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetFriendListRsp& a, GetFriendListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFriendListRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFriendListRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFriendListRsp& from) {
    GetFriendListRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.GetFriendListRsp";
  }
  protected:
  explicit GetFriendListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendListFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // repeated .SnowK.UserInfo friend_list = 4;
  int friend_list_size() const;
  private:
  int _internal_friend_list_size() const;
  public:
  void clear_friend_list();
  ::SnowK::UserInfo* mutable_friend_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::UserInfo >*
      mutable_friend_list();
  private:
  const ::SnowK::UserInfo& _internal_friend_list(int index) const;
  ::SnowK::UserInfo* _internal_add_friend_list();
  public:
  const ::SnowK::UserInfo& friend_list(int index) const;
  ::SnowK::UserInfo* add_friend_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::UserInfo >&
      friend_list() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SnowK.GetFriendListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::UserInfo > friend_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendRemoveReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.FriendRemoveReq) */ {
 public:
  inline FriendRemoveReq() : FriendRemoveReq(nullptr) {}
  ~FriendRemoveReq() override;
  explicit PROTOBUF_CONSTEXPR FriendRemoveReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendRemoveReq(const FriendRemoveReq& from);
  FriendRemoveReq(FriendRemoveReq&& from) noexcept
    : FriendRemoveReq() {
    *this = ::std::move(from);
  }

  inline FriendRemoveReq& operator=(const FriendRemoveReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendRemoveReq& operator=(FriendRemoveReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendRemoveReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendRemoveReq* internal_default_instance() {
    return reinterpret_cast<const FriendRemoveReq*>(
               &_FriendRemoveReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FriendRemoveReq& a, FriendRemoveReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendRemoveReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendRemoveReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendRemoveReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendRemoveReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendRemoveReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendRemoveReq& from) {
    FriendRemoveReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRemoveReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.FriendRemoveReq";
  }
  protected:
  explicit FriendRemoveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kPeerIdFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional string user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // optional string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string peer_id = 4;
  void clear_peer_id();
  const std::string& peer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_peer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_peer_id();
  PROTOBUF_NODISCARD std::string* release_peer_id();
  void set_allocated_peer_id(std::string* peer_id);
  private:
  const std::string& _internal_peer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_peer_id(const std::string& value);
  std::string* _internal_mutable_peer_id();
  public:

  // @@protoc_insertion_point(class_scope:SnowK.FriendRemoveReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendRemoveRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.FriendRemoveRsp) */ {
 public:
  inline FriendRemoveRsp() : FriendRemoveRsp(nullptr) {}
  ~FriendRemoveRsp() override;
  explicit PROTOBUF_CONSTEXPR FriendRemoveRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendRemoveRsp(const FriendRemoveRsp& from);
  FriendRemoveRsp(FriendRemoveRsp&& from) noexcept
    : FriendRemoveRsp() {
    *this = ::std::move(from);
  }

  inline FriendRemoveRsp& operator=(const FriendRemoveRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendRemoveRsp& operator=(FriendRemoveRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendRemoveRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendRemoveRsp* internal_default_instance() {
    return reinterpret_cast<const FriendRemoveRsp*>(
               &_FriendRemoveRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FriendRemoveRsp& a, FriendRemoveRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendRemoveRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendRemoveRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendRemoveRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendRemoveRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendRemoveRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendRemoveRsp& from) {
    FriendRemoveRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRemoveRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.FriendRemoveRsp";
  }
  protected:
  explicit FriendRemoveRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SnowK.FriendRemoveRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendAddReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.FriendAddReq) */ {
 public:
  inline FriendAddReq() : FriendAddReq(nullptr) {}
  ~FriendAddReq() override;
  explicit PROTOBUF_CONSTEXPR FriendAddReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendAddReq(const FriendAddReq& from);
  FriendAddReq(FriendAddReq&& from) noexcept
    : FriendAddReq() {
    *this = ::std::move(from);
  }

  inline FriendAddReq& operator=(const FriendAddReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendAddReq& operator=(FriendAddReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendAddReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendAddReq* internal_default_instance() {
    return reinterpret_cast<const FriendAddReq*>(
               &_FriendAddReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FriendAddReq& a, FriendAddReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendAddReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendAddReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendAddReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendAddReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendAddReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendAddReq& from) {
    FriendAddReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAddReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.FriendAddReq";
  }
  protected:
  explicit FriendAddReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kRespondentIdFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional string session_id = 2;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // optional string user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string respondent_id = 4;
  void clear_respondent_id();
  const std::string& respondent_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_respondent_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_respondent_id();
  PROTOBUF_NODISCARD std::string* release_respondent_id();
  void set_allocated_respondent_id(std::string* respondent_id);
  private:
  const std::string& _internal_respondent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_respondent_id(const std::string& value);
  std::string* _internal_mutable_respondent_id();
  public:

  // @@protoc_insertion_point(class_scope:SnowK.FriendAddReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr respondent_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendAddRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.FriendAddRsp) */ {
 public:
  inline FriendAddRsp() : FriendAddRsp(nullptr) {}
  ~FriendAddRsp() override;
  explicit PROTOBUF_CONSTEXPR FriendAddRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendAddRsp(const FriendAddRsp& from);
  FriendAddRsp(FriendAddRsp&& from) noexcept
    : FriendAddRsp() {
    *this = ::std::move(from);
  }

  inline FriendAddRsp& operator=(const FriendAddRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendAddRsp& operator=(FriendAddRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendAddRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendAddRsp* internal_default_instance() {
    return reinterpret_cast<const FriendAddRsp*>(
               &_FriendAddRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FriendAddRsp& a, FriendAddRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendAddRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendAddRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendAddRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendAddRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendAddRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendAddRsp& from) {
    FriendAddRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAddRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.FriendAddRsp";
  }
  protected:
  explicit FriendAddRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kNotifyEventIdFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // string notify_event_id = 4;
  void clear_notify_event_id();
  const std::string& notify_event_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notify_event_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notify_event_id();
  PROTOBUF_NODISCARD std::string* release_notify_event_id();
  void set_allocated_notify_event_id(std::string* notify_event_id);
  private:
  const std::string& _internal_notify_event_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notify_event_id(const std::string& value);
  std::string* _internal_mutable_notify_event_id();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SnowK.FriendAddRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notify_event_id_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendAddProcessReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.FriendAddProcessReq) */ {
 public:
  inline FriendAddProcessReq() : FriendAddProcessReq(nullptr) {}
  ~FriendAddProcessReq() override;
  explicit PROTOBUF_CONSTEXPR FriendAddProcessReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendAddProcessReq(const FriendAddProcessReq& from);
  FriendAddProcessReq(FriendAddProcessReq&& from) noexcept
    : FriendAddProcessReq() {
    *this = ::std::move(from);
  }

  inline FriendAddProcessReq& operator=(const FriendAddProcessReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendAddProcessReq& operator=(FriendAddProcessReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendAddProcessReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendAddProcessReq* internal_default_instance() {
    return reinterpret_cast<const FriendAddProcessReq*>(
               &_FriendAddProcessReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FriendAddProcessReq& a, FriendAddProcessReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendAddProcessReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendAddProcessReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendAddProcessReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendAddProcessReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendAddProcessReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendAddProcessReq& from) {
    FriendAddProcessReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAddProcessReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.FriendAddProcessReq";
  }
  protected:
  explicit FriendAddProcessReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kNotifyEventIdFieldNumber = 2,
    kApplyUserIdFieldNumber = 4,
    kSessionIdFieldNumber = 5,
    kUserIdFieldNumber = 6,
    kAgreeFieldNumber = 3,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string notify_event_id = 2;
  void clear_notify_event_id();
  const std::string& notify_event_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notify_event_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notify_event_id();
  PROTOBUF_NODISCARD std::string* release_notify_event_id();
  void set_allocated_notify_event_id(std::string* notify_event_id);
  private:
  const std::string& _internal_notify_event_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notify_event_id(const std::string& value);
  std::string* _internal_mutable_notify_event_id();
  public:

  // string apply_user_id = 4;
  void clear_apply_user_id();
  const std::string& apply_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apply_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apply_user_id();
  PROTOBUF_NODISCARD std::string* release_apply_user_id();
  void set_allocated_apply_user_id(std::string* apply_user_id);
  private:
  const std::string& _internal_apply_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apply_user_id(const std::string& value);
  std::string* _internal_mutable_apply_user_id();
  public:

  // optional string session_id = 5;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // optional string user_id = 6;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bool agree = 3;
  void clear_agree();
  bool agree() const;
  void set_agree(bool value);
  private:
  bool _internal_agree() const;
  void _internal_set_agree(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SnowK.FriendAddProcessReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notify_event_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apply_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    bool agree_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendAddProcessRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.FriendAddProcessRsp) */ {
 public:
  inline FriendAddProcessRsp() : FriendAddProcessRsp(nullptr) {}
  ~FriendAddProcessRsp() override;
  explicit PROTOBUF_CONSTEXPR FriendAddProcessRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendAddProcessRsp(const FriendAddProcessRsp& from);
  FriendAddProcessRsp(FriendAddProcessRsp&& from) noexcept
    : FriendAddProcessRsp() {
    *this = ::std::move(from);
  }

  inline FriendAddProcessRsp& operator=(const FriendAddProcessRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendAddProcessRsp& operator=(FriendAddProcessRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendAddProcessRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendAddProcessRsp* internal_default_instance() {
    return reinterpret_cast<const FriendAddProcessRsp*>(
               &_FriendAddProcessRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FriendAddProcessRsp& a, FriendAddProcessRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendAddProcessRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendAddProcessRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendAddProcessRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendAddProcessRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendAddProcessRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendAddProcessRsp& from) {
    FriendAddProcessRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAddProcessRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.FriendAddProcessRsp";
  }
  protected:
  explicit FriendAddProcessRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kNewSessionIdFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // optional string new_session_id = 4;
  bool has_new_session_id() const;
  private:
  bool _internal_has_new_session_id() const;
  public:
  void clear_new_session_id();
  const std::string& new_session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_session_id();
  PROTOBUF_NODISCARD std::string* release_new_session_id();
  void set_allocated_new_session_id(std::string* new_session_id);
  private:
  const std::string& _internal_new_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_session_id(const std::string& value);
  std::string* _internal_mutable_new_session_id();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SnowK.FriendAddProcessRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_session_id_;
    bool success_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetPendingFriendEventListReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.GetPendingFriendEventListReq) */ {
 public:
  inline GetPendingFriendEventListReq() : GetPendingFriendEventListReq(nullptr) {}
  ~GetPendingFriendEventListReq() override;
  explicit PROTOBUF_CONSTEXPR GetPendingFriendEventListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPendingFriendEventListReq(const GetPendingFriendEventListReq& from);
  GetPendingFriendEventListReq(GetPendingFriendEventListReq&& from) noexcept
    : GetPendingFriendEventListReq() {
    *this = ::std::move(from);
  }

  inline GetPendingFriendEventListReq& operator=(const GetPendingFriendEventListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPendingFriendEventListReq& operator=(GetPendingFriendEventListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPendingFriendEventListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPendingFriendEventListReq* internal_default_instance() {
    return reinterpret_cast<const GetPendingFriendEventListReq*>(
               &_GetPendingFriendEventListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetPendingFriendEventListReq& a, GetPendingFriendEventListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPendingFriendEventListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPendingFriendEventListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPendingFriendEventListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPendingFriendEventListReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPendingFriendEventListReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPendingFriendEventListReq& from) {
    GetPendingFriendEventListReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPendingFriendEventListReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.GetPendingFriendEventListReq";
  }
  protected:
  explicit GetPendingFriendEventListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional string session_id = 2;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // optional string user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:SnowK.GetPendingFriendEventListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.FriendEvent) */ {
 public:
  inline FriendEvent() : FriendEvent(nullptr) {}
  ~FriendEvent() override;
  explicit PROTOBUF_CONSTEXPR FriendEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendEvent(const FriendEvent& from);
  FriendEvent(FriendEvent&& from) noexcept
    : FriendEvent() {
    *this = ::std::move(from);
  }

  inline FriendEvent& operator=(const FriendEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendEvent& operator=(FriendEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendEvent* internal_default_instance() {
    return reinterpret_cast<const FriendEvent*>(
               &_FriendEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FriendEvent& a, FriendEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendEvent& from) {
    FriendEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.FriendEvent";
  }
  protected:
  explicit FriendEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 1,
    kSenderFieldNumber = 3,
  };
  // optional string event_id = 1;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  const std::string& event_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_id();
  PROTOBUF_NODISCARD std::string* release_event_id();
  void set_allocated_event_id(std::string* event_id);
  private:
  const std::string& _internal_event_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_id(const std::string& value);
  std::string* _internal_mutable_event_id();
  public:

  // .SnowK.UserInfo sender = 3;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::SnowK::UserInfo& sender() const;
  PROTOBUF_NODISCARD ::SnowK::UserInfo* release_sender();
  ::SnowK::UserInfo* mutable_sender();
  void set_allocated_sender(::SnowK::UserInfo* sender);
  private:
  const ::SnowK::UserInfo& _internal_sender() const;
  ::SnowK::UserInfo* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::SnowK::UserInfo* sender);
  ::SnowK::UserInfo* unsafe_arena_release_sender();

  // @@protoc_insertion_point(class_scope:SnowK.FriendEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_id_;
    ::SnowK::UserInfo* sender_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetPendingFriendEventListRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.GetPendingFriendEventListRsp) */ {
 public:
  inline GetPendingFriendEventListRsp() : GetPendingFriendEventListRsp(nullptr) {}
  ~GetPendingFriendEventListRsp() override;
  explicit PROTOBUF_CONSTEXPR GetPendingFriendEventListRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPendingFriendEventListRsp(const GetPendingFriendEventListRsp& from);
  GetPendingFriendEventListRsp(GetPendingFriendEventListRsp&& from) noexcept
    : GetPendingFriendEventListRsp() {
    *this = ::std::move(from);
  }

  inline GetPendingFriendEventListRsp& operator=(const GetPendingFriendEventListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPendingFriendEventListRsp& operator=(GetPendingFriendEventListRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPendingFriendEventListRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPendingFriendEventListRsp* internal_default_instance() {
    return reinterpret_cast<const GetPendingFriendEventListRsp*>(
               &_GetPendingFriendEventListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetPendingFriendEventListRsp& a, GetPendingFriendEventListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPendingFriendEventListRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPendingFriendEventListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPendingFriendEventListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPendingFriendEventListRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPendingFriendEventListRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPendingFriendEventListRsp& from) {
    GetPendingFriendEventListRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPendingFriendEventListRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.GetPendingFriendEventListRsp";
  }
  protected:
  explicit GetPendingFriendEventListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // repeated .SnowK.FriendEvent event = 4;
  int event_size() const;
  private:
  int _internal_event_size() const;
  public:
  void clear_event();
  ::SnowK::FriendEvent* mutable_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::FriendEvent >*
      mutable_event();
  private:
  const ::SnowK::FriendEvent& _internal_event(int index) const;
  ::SnowK::FriendEvent* _internal_add_event();
  public:
  const ::SnowK::FriendEvent& event(int index) const;
  ::SnowK::FriendEvent* add_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::FriendEvent >&
      event() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SnowK.GetPendingFriendEventListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::FriendEvent > event_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendSearchReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.FriendSearchReq) */ {
 public:
  inline FriendSearchReq() : FriendSearchReq(nullptr) {}
  ~FriendSearchReq() override;
  explicit PROTOBUF_CONSTEXPR FriendSearchReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendSearchReq(const FriendSearchReq& from);
  FriendSearchReq(FriendSearchReq&& from) noexcept
    : FriendSearchReq() {
    *this = ::std::move(from);
  }

  inline FriendSearchReq& operator=(const FriendSearchReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendSearchReq& operator=(FriendSearchReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendSearchReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendSearchReq* internal_default_instance() {
    return reinterpret_cast<const FriendSearchReq*>(
               &_FriendSearchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FriendSearchReq& a, FriendSearchReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendSearchReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendSearchReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendSearchReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendSearchReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendSearchReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendSearchReq& from) {
    FriendSearchReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendSearchReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.FriendSearchReq";
  }
  protected:
  explicit FriendSearchReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kSearchKeyFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kUserIdFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string search_key = 2;
  void clear_search_key();
  const std::string& search_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_search_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_search_key();
  PROTOBUF_NODISCARD std::string* release_search_key();
  void set_allocated_search_key(std::string* search_key);
  private:
  const std::string& _internal_search_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_search_key(const std::string& value);
  std::string* _internal_mutable_search_key();
  public:

  // optional string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // optional string user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:SnowK.FriendSearchReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendSearchRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.FriendSearchRsp) */ {
 public:
  inline FriendSearchRsp() : FriendSearchRsp(nullptr) {}
  ~FriendSearchRsp() override;
  explicit PROTOBUF_CONSTEXPR FriendSearchRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendSearchRsp(const FriendSearchRsp& from);
  FriendSearchRsp(FriendSearchRsp&& from) noexcept
    : FriendSearchRsp() {
    *this = ::std::move(from);
  }

  inline FriendSearchRsp& operator=(const FriendSearchRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendSearchRsp& operator=(FriendSearchRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendSearchRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendSearchRsp* internal_default_instance() {
    return reinterpret_cast<const FriendSearchRsp*>(
               &_FriendSearchRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FriendSearchRsp& a, FriendSearchRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendSearchRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendSearchRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendSearchRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendSearchRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendSearchRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendSearchRsp& from) {
    FriendSearchRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendSearchRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.FriendSearchRsp";
  }
  protected:
  explicit FriendSearchRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // repeated .SnowK.UserInfo user_info = 4;
  int user_info_size() const;
  private:
  int _internal_user_info_size() const;
  public:
  void clear_user_info();
  ::SnowK::UserInfo* mutable_user_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::UserInfo >*
      mutable_user_info();
  private:
  const ::SnowK::UserInfo& _internal_user_info(int index) const;
  ::SnowK::UserInfo* _internal_add_user_info();
  public:
  const ::SnowK::UserInfo& user_info(int index) const;
  ::SnowK::UserInfo* add_user_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::UserInfo >&
      user_info() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SnowK.FriendSearchRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::UserInfo > user_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetChatSessionListReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.GetChatSessionListReq) */ {
 public:
  inline GetChatSessionListReq() : GetChatSessionListReq(nullptr) {}
  ~GetChatSessionListReq() override;
  explicit PROTOBUF_CONSTEXPR GetChatSessionListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChatSessionListReq(const GetChatSessionListReq& from);
  GetChatSessionListReq(GetChatSessionListReq&& from) noexcept
    : GetChatSessionListReq() {
    *this = ::std::move(from);
  }

  inline GetChatSessionListReq& operator=(const GetChatSessionListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChatSessionListReq& operator=(GetChatSessionListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChatSessionListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChatSessionListReq* internal_default_instance() {
    return reinterpret_cast<const GetChatSessionListReq*>(
               &_GetChatSessionListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetChatSessionListReq& a, GetChatSessionListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChatSessionListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChatSessionListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetChatSessionListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetChatSessionListReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChatSessionListReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetChatSessionListReq& from) {
    GetChatSessionListReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatSessionListReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.GetChatSessionListReq";
  }
  protected:
  explicit GetChatSessionListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional string session_id = 2;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // optional string user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:SnowK.GetChatSessionListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetChatSessionListRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.GetChatSessionListRsp) */ {
 public:
  inline GetChatSessionListRsp() : GetChatSessionListRsp(nullptr) {}
  ~GetChatSessionListRsp() override;
  explicit PROTOBUF_CONSTEXPR GetChatSessionListRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChatSessionListRsp(const GetChatSessionListRsp& from);
  GetChatSessionListRsp(GetChatSessionListRsp&& from) noexcept
    : GetChatSessionListRsp() {
    *this = ::std::move(from);
  }

  inline GetChatSessionListRsp& operator=(const GetChatSessionListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChatSessionListRsp& operator=(GetChatSessionListRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChatSessionListRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChatSessionListRsp* internal_default_instance() {
    return reinterpret_cast<const GetChatSessionListRsp*>(
               &_GetChatSessionListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetChatSessionListRsp& a, GetChatSessionListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChatSessionListRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChatSessionListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetChatSessionListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetChatSessionListRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChatSessionListRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetChatSessionListRsp& from) {
    GetChatSessionListRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatSessionListRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.GetChatSessionListRsp";
  }
  protected:
  explicit GetChatSessionListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatSessionInfoListFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // repeated .SnowK.ChatSessionInfo chat_session_info_list = 4;
  int chat_session_info_list_size() const;
  private:
  int _internal_chat_session_info_list_size() const;
  public:
  void clear_chat_session_info_list();
  ::SnowK::ChatSessionInfo* mutable_chat_session_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::ChatSessionInfo >*
      mutable_chat_session_info_list();
  private:
  const ::SnowK::ChatSessionInfo& _internal_chat_session_info_list(int index) const;
  ::SnowK::ChatSessionInfo* _internal_add_chat_session_info_list();
  public:
  const ::SnowK::ChatSessionInfo& chat_session_info_list(int index) const;
  ::SnowK::ChatSessionInfo* add_chat_session_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::ChatSessionInfo >&
      chat_session_info_list() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SnowK.GetChatSessionListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::ChatSessionInfo > chat_session_info_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class ChatSessionCreateReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.ChatSessionCreateReq) */ {
 public:
  inline ChatSessionCreateReq() : ChatSessionCreateReq(nullptr) {}
  ~ChatSessionCreateReq() override;
  explicit PROTOBUF_CONSTEXPR ChatSessionCreateReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatSessionCreateReq(const ChatSessionCreateReq& from);
  ChatSessionCreateReq(ChatSessionCreateReq&& from) noexcept
    : ChatSessionCreateReq() {
    *this = ::std::move(from);
  }

  inline ChatSessionCreateReq& operator=(const ChatSessionCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatSessionCreateReq& operator=(ChatSessionCreateReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatSessionCreateReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatSessionCreateReq* internal_default_instance() {
    return reinterpret_cast<const ChatSessionCreateReq*>(
               &_ChatSessionCreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ChatSessionCreateReq& a, ChatSessionCreateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatSessionCreateReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatSessionCreateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatSessionCreateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatSessionCreateReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatSessionCreateReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatSessionCreateReq& from) {
    ChatSessionCreateReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatSessionCreateReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.ChatSessionCreateReq";
  }
  protected:
  explicit ChatSessionCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdListFieldNumber = 5,
    kRequestIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kChatSessionNameFieldNumber = 4,
  };
  // repeated string member_id_list = 5;
  int member_id_list_size() const;
  private:
  int _internal_member_id_list_size() const;
  public:
  void clear_member_id_list();
  const std::string& member_id_list(int index) const;
  std::string* mutable_member_id_list(int index);
  void set_member_id_list(int index, const std::string& value);
  void set_member_id_list(int index, std::string&& value);
  void set_member_id_list(int index, const char* value);
  void set_member_id_list(int index, const char* value, size_t size);
  std::string* add_member_id_list();
  void add_member_id_list(const std::string& value);
  void add_member_id_list(std::string&& value);
  void add_member_id_list(const char* value);
  void add_member_id_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& member_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_member_id_list();
  private:
  const std::string& _internal_member_id_list(int index) const;
  std::string* _internal_add_member_id_list();
  public:

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional string session_id = 2;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // optional string user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string chat_session_name = 4;
  void clear_chat_session_name();
  const std::string& chat_session_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_session_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_session_name();
  PROTOBUF_NODISCARD std::string* release_chat_session_name();
  void set_allocated_chat_session_name(std::string* chat_session_name);
  private:
  const std::string& _internal_chat_session_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_session_name(const std::string& value);
  std::string* _internal_mutable_chat_session_name();
  public:

  // @@protoc_insertion_point(class_scope:SnowK.ChatSessionCreateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> member_id_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_session_name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class ChatSessionCreateRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.ChatSessionCreateRsp) */ {
 public:
  inline ChatSessionCreateRsp() : ChatSessionCreateRsp(nullptr) {}
  ~ChatSessionCreateRsp() override;
  explicit PROTOBUF_CONSTEXPR ChatSessionCreateRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatSessionCreateRsp(const ChatSessionCreateRsp& from);
  ChatSessionCreateRsp(ChatSessionCreateRsp&& from) noexcept
    : ChatSessionCreateRsp() {
    *this = ::std::move(from);
  }

  inline ChatSessionCreateRsp& operator=(const ChatSessionCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatSessionCreateRsp& operator=(ChatSessionCreateRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatSessionCreateRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatSessionCreateRsp* internal_default_instance() {
    return reinterpret_cast<const ChatSessionCreateRsp*>(
               &_ChatSessionCreateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ChatSessionCreateRsp& a, ChatSessionCreateRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatSessionCreateRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatSessionCreateRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatSessionCreateRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatSessionCreateRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatSessionCreateRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatSessionCreateRsp& from) {
    ChatSessionCreateRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatSessionCreateRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.ChatSessionCreateRsp";
  }
  protected:
  explicit ChatSessionCreateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kChatSessionInfoFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // optional .SnowK.ChatSessionInfo chat_session_info = 4;
  bool has_chat_session_info() const;
  private:
  bool _internal_has_chat_session_info() const;
  public:
  void clear_chat_session_info();
  const ::SnowK::ChatSessionInfo& chat_session_info() const;
  PROTOBUF_NODISCARD ::SnowK::ChatSessionInfo* release_chat_session_info();
  ::SnowK::ChatSessionInfo* mutable_chat_session_info();
  void set_allocated_chat_session_info(::SnowK::ChatSessionInfo* chat_session_info);
  private:
  const ::SnowK::ChatSessionInfo& _internal_chat_session_info() const;
  ::SnowK::ChatSessionInfo* _internal_mutable_chat_session_info();
  public:
  void unsafe_arena_set_allocated_chat_session_info(
      ::SnowK::ChatSessionInfo* chat_session_info);
  ::SnowK::ChatSessionInfo* unsafe_arena_release_chat_session_info();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SnowK.ChatSessionCreateRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    ::SnowK::ChatSessionInfo* chat_session_info_;
    bool success_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetChatSessionMemberReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.GetChatSessionMemberReq) */ {
 public:
  inline GetChatSessionMemberReq() : GetChatSessionMemberReq(nullptr) {}
  ~GetChatSessionMemberReq() override;
  explicit PROTOBUF_CONSTEXPR GetChatSessionMemberReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChatSessionMemberReq(const GetChatSessionMemberReq& from);
  GetChatSessionMemberReq(GetChatSessionMemberReq&& from) noexcept
    : GetChatSessionMemberReq() {
    *this = ::std::move(from);
  }

  inline GetChatSessionMemberReq& operator=(const GetChatSessionMemberReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChatSessionMemberReq& operator=(GetChatSessionMemberReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChatSessionMemberReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChatSessionMemberReq* internal_default_instance() {
    return reinterpret_cast<const GetChatSessionMemberReq*>(
               &_GetChatSessionMemberReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetChatSessionMemberReq& a, GetChatSessionMemberReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChatSessionMemberReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChatSessionMemberReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetChatSessionMemberReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetChatSessionMemberReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChatSessionMemberReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetChatSessionMemberReq& from) {
    GetChatSessionMemberReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatSessionMemberReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.GetChatSessionMemberReq";
  }
  protected:
  explicit GetChatSessionMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kChatSessionIdFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional string session_id = 2;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // optional string user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string chat_session_id = 4;
  void clear_chat_session_id();
  const std::string& chat_session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_session_id();
  PROTOBUF_NODISCARD std::string* release_chat_session_id();
  void set_allocated_chat_session_id(std::string* chat_session_id);
  private:
  const std::string& _internal_chat_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_session_id(const std::string& value);
  std::string* _internal_mutable_chat_session_id();
  public:

  // @@protoc_insertion_point(class_scope:SnowK.GetChatSessionMemberReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_session_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class GetChatSessionMemberRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.GetChatSessionMemberRsp) */ {
 public:
  inline GetChatSessionMemberRsp() : GetChatSessionMemberRsp(nullptr) {}
  ~GetChatSessionMemberRsp() override;
  explicit PROTOBUF_CONSTEXPR GetChatSessionMemberRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChatSessionMemberRsp(const GetChatSessionMemberRsp& from);
  GetChatSessionMemberRsp(GetChatSessionMemberRsp&& from) noexcept
    : GetChatSessionMemberRsp() {
    *this = ::std::move(from);
  }

  inline GetChatSessionMemberRsp& operator=(const GetChatSessionMemberRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChatSessionMemberRsp& operator=(GetChatSessionMemberRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChatSessionMemberRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChatSessionMemberRsp* internal_default_instance() {
    return reinterpret_cast<const GetChatSessionMemberRsp*>(
               &_GetChatSessionMemberRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetChatSessionMemberRsp& a, GetChatSessionMemberRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChatSessionMemberRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChatSessionMemberRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetChatSessionMemberRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetChatSessionMemberRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChatSessionMemberRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetChatSessionMemberRsp& from) {
    GetChatSessionMemberRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatSessionMemberRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.GetChatSessionMemberRsp";
  }
  protected:
  explicit GetChatSessionMemberRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberInfoListFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // repeated .SnowK.UserInfo member_info_list = 4;
  int member_info_list_size() const;
  private:
  int _internal_member_info_list_size() const;
  public:
  void clear_member_info_list();
  ::SnowK::UserInfo* mutable_member_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::UserInfo >*
      mutable_member_info_list();
  private:
  const ::SnowK::UserInfo& _internal_member_info_list(int index) const;
  ::SnowK::UserInfo* _internal_add_member_info_list();
  public:
  const ::SnowK::UserInfo& member_info_list(int index) const;
  ::SnowK::UserInfo* add_member_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::UserInfo >&
      member_info_list() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SnowK.GetChatSessionMemberRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::UserInfo > member_info_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// ===================================================================

class FriendService_Stub;

class FriendService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FriendService() {};
 public:
  virtual ~FriendService();

  typedef FriendService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::GetFriendListReq* request,
                       ::SnowK::GetFriendListRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void FriendRemove(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::FriendRemoveReq* request,
                       ::SnowK::FriendRemoveRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void FriendAdd(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::FriendAddReq* request,
                       ::SnowK::FriendAddRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void FriendAddProcess(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::FriendAddProcessReq* request,
                       ::SnowK::FriendAddProcessRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void FriendSearch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::FriendSearchReq* request,
                       ::SnowK::FriendSearchRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void GetChatSessionList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::GetChatSessionListReq* request,
                       ::SnowK::GetChatSessionListRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void ChatSessionCreate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::ChatSessionCreateReq* request,
                       ::SnowK::ChatSessionCreateRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void GetChatSessionMember(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::GetChatSessionMemberReq* request,
                       ::SnowK::GetChatSessionMemberRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPendingFriendEventList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::GetPendingFriendEventListReq* request,
                       ::SnowK::GetPendingFriendEventListRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendService);
};

class FriendService_Stub : public FriendService {
 public:
  FriendService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FriendService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FriendService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FriendService ------------------------------------------

  void GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::GetFriendListReq* request,
                       ::SnowK::GetFriendListRsp* response,
                       ::google::protobuf::Closure* done);
  void FriendRemove(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::FriendRemoveReq* request,
                       ::SnowK::FriendRemoveRsp* response,
                       ::google::protobuf::Closure* done);
  void FriendAdd(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::FriendAddReq* request,
                       ::SnowK::FriendAddRsp* response,
                       ::google::protobuf::Closure* done);
  void FriendAddProcess(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::FriendAddProcessReq* request,
                       ::SnowK::FriendAddProcessRsp* response,
                       ::google::protobuf::Closure* done);
  void FriendSearch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::FriendSearchReq* request,
                       ::SnowK::FriendSearchRsp* response,
                       ::google::protobuf::Closure* done);
  void GetChatSessionList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::GetChatSessionListReq* request,
                       ::SnowK::GetChatSessionListRsp* response,
                       ::google::protobuf::Closure* done);
  void ChatSessionCreate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::ChatSessionCreateReq* request,
                       ::SnowK::ChatSessionCreateRsp* response,
                       ::google::protobuf::Closure* done);
  void GetChatSessionMember(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::GetChatSessionMemberReq* request,
                       ::SnowK::GetChatSessionMemberRsp* response,
                       ::google::protobuf::Closure* done);
  void GetPendingFriendEventList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SnowK::GetPendingFriendEventListReq* request,
                       ::SnowK::GetPendingFriendEventListRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetFriendListReq

// string request_id = 1;
inline void GetFriendListReq::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& GetFriendListReq::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.GetFriendListReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFriendListReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetFriendListReq.request_id)
}
inline std::string* GetFriendListReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.GetFriendListReq.request_id)
  return _s;
}
inline const std::string& GetFriendListReq::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void GetFriendListReq::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFriendListReq::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFriendListReq::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.GetFriendListReq.request_id)
  return _impl_.request_id_.Release();
}
inline void GetFriendListReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetFriendListReq.request_id)
}

// optional string user_id = 2;
inline bool GetFriendListReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetFriendListReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetFriendListReq::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetFriendListReq::user_id() const {
  // @@protoc_insertion_point(field_get:SnowK.GetFriendListReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFriendListReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetFriendListReq.user_id)
}
inline std::string* GetFriendListReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:SnowK.GetFriendListReq.user_id)
  return _s;
}
inline const std::string& GetFriendListReq::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetFriendListReq::_internal_set_user_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFriendListReq::_internal_mutable_user_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFriendListReq::release_user_id() {
  // @@protoc_insertion_point(field_release:SnowK.GetFriendListReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetFriendListReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetFriendListReq.user_id)
}

// optional string session_id = 3;
inline bool GetFriendListReq::_internal_has_session_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetFriendListReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void GetFriendListReq::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetFriendListReq::session_id() const {
  // @@protoc_insertion_point(field_get:SnowK.GetFriendListReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFriendListReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetFriendListReq.session_id)
}
inline std::string* GetFriendListReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:SnowK.GetFriendListReq.session_id)
  return _s;
}
inline const std::string& GetFriendListReq::_internal_session_id() const {
  return _impl_.session_id_.Get();
}
inline void GetFriendListReq::_internal_set_session_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFriendListReq::_internal_mutable_session_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFriendListReq::release_session_id() {
  // @@protoc_insertion_point(field_release:SnowK.GetFriendListReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetFriendListReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetFriendListReq.session_id)
}

// -------------------------------------------------------------------

// GetFriendListRsp

// string request_id = 1;
inline void GetFriendListRsp::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& GetFriendListRsp::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.GetFriendListRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFriendListRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetFriendListRsp.request_id)
}
inline std::string* GetFriendListRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.GetFriendListRsp.request_id)
  return _s;
}
inline const std::string& GetFriendListRsp::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void GetFriendListRsp::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFriendListRsp::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFriendListRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.GetFriendListRsp.request_id)
  return _impl_.request_id_.Release();
}
inline void GetFriendListRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetFriendListRsp.request_id)
}

// bool success = 2;
inline void GetFriendListRsp::clear_success() {
  _impl_.success_ = false;
}
inline bool GetFriendListRsp::_internal_success() const {
  return _impl_.success_;
}
inline bool GetFriendListRsp::success() const {
  // @@protoc_insertion_point(field_get:SnowK.GetFriendListRsp.success)
  return _internal_success();
}
inline void GetFriendListRsp::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GetFriendListRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:SnowK.GetFriendListRsp.success)
}

// string errmsg = 3;
inline void GetFriendListRsp::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& GetFriendListRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:SnowK.GetFriendListRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFriendListRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetFriendListRsp.errmsg)
}
inline std::string* GetFriendListRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:SnowK.GetFriendListRsp.errmsg)
  return _s;
}
inline const std::string& GetFriendListRsp::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void GetFriendListRsp::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFriendListRsp::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFriendListRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:SnowK.GetFriendListRsp.errmsg)
  return _impl_.errmsg_.Release();
}
inline void GetFriendListRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetFriendListRsp.errmsg)
}

// repeated .SnowK.UserInfo friend_list = 4;
inline int GetFriendListRsp::_internal_friend_list_size() const {
  return _impl_.friend_list_.size();
}
inline int GetFriendListRsp::friend_list_size() const {
  return _internal_friend_list_size();
}
inline ::SnowK::UserInfo* GetFriendListRsp::mutable_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:SnowK.GetFriendListRsp.friend_list)
  return _impl_.friend_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::UserInfo >*
GetFriendListRsp::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:SnowK.GetFriendListRsp.friend_list)
  return &_impl_.friend_list_;
}
inline const ::SnowK::UserInfo& GetFriendListRsp::_internal_friend_list(int index) const {
  return _impl_.friend_list_.Get(index);
}
inline const ::SnowK::UserInfo& GetFriendListRsp::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:SnowK.GetFriendListRsp.friend_list)
  return _internal_friend_list(index);
}
inline ::SnowK::UserInfo* GetFriendListRsp::_internal_add_friend_list() {
  return _impl_.friend_list_.Add();
}
inline ::SnowK::UserInfo* GetFriendListRsp::add_friend_list() {
  ::SnowK::UserInfo* _add = _internal_add_friend_list();
  // @@protoc_insertion_point(field_add:SnowK.GetFriendListRsp.friend_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::UserInfo >&
GetFriendListRsp::friend_list() const {
  // @@protoc_insertion_point(field_list:SnowK.GetFriendListRsp.friend_list)
  return _impl_.friend_list_;
}

// -------------------------------------------------------------------

// FriendRemoveReq

// string request_id = 1;
inline void FriendRemoveReq::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& FriendRemoveReq::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendRemoveReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendRemoveReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendRemoveReq.request_id)
}
inline std::string* FriendRemoveReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendRemoveReq.request_id)
  return _s;
}
inline const std::string& FriendRemoveReq::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void FriendRemoveReq::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendRemoveReq::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendRemoveReq::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendRemoveReq.request_id)
  return _impl_.request_id_.Release();
}
inline void FriendRemoveReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendRemoveReq.request_id)
}

// optional string user_id = 2;
inline bool FriendRemoveReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendRemoveReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void FriendRemoveReq::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FriendRemoveReq::user_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendRemoveReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendRemoveReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendRemoveReq.user_id)
}
inline std::string* FriendRemoveReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendRemoveReq.user_id)
  return _s;
}
inline const std::string& FriendRemoveReq::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void FriendRemoveReq::_internal_set_user_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendRemoveReq::_internal_mutable_user_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendRemoveReq::release_user_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendRemoveReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FriendRemoveReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendRemoveReq.user_id)
}

// optional string session_id = 3;
inline bool FriendRemoveReq::_internal_has_session_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FriendRemoveReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void FriendRemoveReq::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FriendRemoveReq::session_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendRemoveReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendRemoveReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendRemoveReq.session_id)
}
inline std::string* FriendRemoveReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendRemoveReq.session_id)
  return _s;
}
inline const std::string& FriendRemoveReq::_internal_session_id() const {
  return _impl_.session_id_.Get();
}
inline void FriendRemoveReq::_internal_set_session_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendRemoveReq::_internal_mutable_session_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendRemoveReq::release_session_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendRemoveReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FriendRemoveReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendRemoveReq.session_id)
}

// string peer_id = 4;
inline void FriendRemoveReq::clear_peer_id() {
  _impl_.peer_id_.ClearToEmpty();
}
inline const std::string& FriendRemoveReq::peer_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendRemoveReq.peer_id)
  return _internal_peer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendRemoveReq::set_peer_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.peer_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendRemoveReq.peer_id)
}
inline std::string* FriendRemoveReq::mutable_peer_id() {
  std::string* _s = _internal_mutable_peer_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendRemoveReq.peer_id)
  return _s;
}
inline const std::string& FriendRemoveReq::_internal_peer_id() const {
  return _impl_.peer_id_.Get();
}
inline void FriendRemoveReq::_internal_set_peer_id(const std::string& value) {
  
  _impl_.peer_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendRemoveReq::_internal_mutable_peer_id() {
  
  return _impl_.peer_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendRemoveReq::release_peer_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendRemoveReq.peer_id)
  return _impl_.peer_id_.Release();
}
inline void FriendRemoveReq::set_allocated_peer_id(std::string* peer_id) {
  if (peer_id != nullptr) {
    
  } else {
    
  }
  _impl_.peer_id_.SetAllocated(peer_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.peer_id_.IsDefault()) {
    _impl_.peer_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendRemoveReq.peer_id)
}

// -------------------------------------------------------------------

// FriendRemoveRsp

// string request_id = 1;
inline void FriendRemoveRsp::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& FriendRemoveRsp::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendRemoveRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendRemoveRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendRemoveRsp.request_id)
}
inline std::string* FriendRemoveRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendRemoveRsp.request_id)
  return _s;
}
inline const std::string& FriendRemoveRsp::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void FriendRemoveRsp::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendRemoveRsp::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendRemoveRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendRemoveRsp.request_id)
  return _impl_.request_id_.Release();
}
inline void FriendRemoveRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendRemoveRsp.request_id)
}

// bool success = 2;
inline void FriendRemoveRsp::clear_success() {
  _impl_.success_ = false;
}
inline bool FriendRemoveRsp::_internal_success() const {
  return _impl_.success_;
}
inline bool FriendRemoveRsp::success() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendRemoveRsp.success)
  return _internal_success();
}
inline void FriendRemoveRsp::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void FriendRemoveRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:SnowK.FriendRemoveRsp.success)
}

// string errmsg = 3;
inline void FriendRemoveRsp::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& FriendRemoveRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendRemoveRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendRemoveRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendRemoveRsp.errmsg)
}
inline std::string* FriendRemoveRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendRemoveRsp.errmsg)
  return _s;
}
inline const std::string& FriendRemoveRsp::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void FriendRemoveRsp::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendRemoveRsp::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendRemoveRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:SnowK.FriendRemoveRsp.errmsg)
  return _impl_.errmsg_.Release();
}
inline void FriendRemoveRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendRemoveRsp.errmsg)
}

// -------------------------------------------------------------------

// FriendAddReq

// string request_id = 1;
inline void FriendAddReq::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& FriendAddReq::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendAddReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendAddReq.request_id)
}
inline std::string* FriendAddReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendAddReq.request_id)
  return _s;
}
inline const std::string& FriendAddReq::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void FriendAddReq::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendAddReq::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendAddReq::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendAddReq.request_id)
  return _impl_.request_id_.Release();
}
inline void FriendAddReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendAddReq.request_id)
}

// optional string session_id = 2;
inline bool FriendAddReq::_internal_has_session_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendAddReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void FriendAddReq::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FriendAddReq::session_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendAddReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendAddReq.session_id)
}
inline std::string* FriendAddReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendAddReq.session_id)
  return _s;
}
inline const std::string& FriendAddReq::_internal_session_id() const {
  return _impl_.session_id_.Get();
}
inline void FriendAddReq::_internal_set_session_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendAddReq::_internal_mutable_session_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendAddReq::release_session_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendAddReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FriendAddReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendAddReq.session_id)
}

// optional string user_id = 3;
inline bool FriendAddReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FriendAddReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void FriendAddReq::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FriendAddReq::user_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendAddReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendAddReq.user_id)
}
inline std::string* FriendAddReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendAddReq.user_id)
  return _s;
}
inline const std::string& FriendAddReq::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void FriendAddReq::_internal_set_user_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendAddReq::_internal_mutable_user_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendAddReq::release_user_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendAddReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FriendAddReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendAddReq.user_id)
}

// string respondent_id = 4;
inline void FriendAddReq::clear_respondent_id() {
  _impl_.respondent_id_.ClearToEmpty();
}
inline const std::string& FriendAddReq::respondent_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddReq.respondent_id)
  return _internal_respondent_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendAddReq::set_respondent_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.respondent_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendAddReq.respondent_id)
}
inline std::string* FriendAddReq::mutable_respondent_id() {
  std::string* _s = _internal_mutable_respondent_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendAddReq.respondent_id)
  return _s;
}
inline const std::string& FriendAddReq::_internal_respondent_id() const {
  return _impl_.respondent_id_.Get();
}
inline void FriendAddReq::_internal_set_respondent_id(const std::string& value) {
  
  _impl_.respondent_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendAddReq::_internal_mutable_respondent_id() {
  
  return _impl_.respondent_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendAddReq::release_respondent_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendAddReq.respondent_id)
  return _impl_.respondent_id_.Release();
}
inline void FriendAddReq::set_allocated_respondent_id(std::string* respondent_id) {
  if (respondent_id != nullptr) {
    
  } else {
    
  }
  _impl_.respondent_id_.SetAllocated(respondent_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.respondent_id_.IsDefault()) {
    _impl_.respondent_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendAddReq.respondent_id)
}

// -------------------------------------------------------------------

// FriendAddRsp

// string request_id = 1;
inline void FriendAddRsp::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& FriendAddRsp::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendAddRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendAddRsp.request_id)
}
inline std::string* FriendAddRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendAddRsp.request_id)
  return _s;
}
inline const std::string& FriendAddRsp::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void FriendAddRsp::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendAddRsp::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendAddRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendAddRsp.request_id)
  return _impl_.request_id_.Release();
}
inline void FriendAddRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendAddRsp.request_id)
}

// bool success = 2;
inline void FriendAddRsp::clear_success() {
  _impl_.success_ = false;
}
inline bool FriendAddRsp::_internal_success() const {
  return _impl_.success_;
}
inline bool FriendAddRsp::success() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddRsp.success)
  return _internal_success();
}
inline void FriendAddRsp::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void FriendAddRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:SnowK.FriendAddRsp.success)
}

// string errmsg = 3;
inline void FriendAddRsp::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& FriendAddRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendAddRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendAddRsp.errmsg)
}
inline std::string* FriendAddRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendAddRsp.errmsg)
  return _s;
}
inline const std::string& FriendAddRsp::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void FriendAddRsp::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendAddRsp::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendAddRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:SnowK.FriendAddRsp.errmsg)
  return _impl_.errmsg_.Release();
}
inline void FriendAddRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendAddRsp.errmsg)
}

// string notify_event_id = 4;
inline void FriendAddRsp::clear_notify_event_id() {
  _impl_.notify_event_id_.ClearToEmpty();
}
inline const std::string& FriendAddRsp::notify_event_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddRsp.notify_event_id)
  return _internal_notify_event_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendAddRsp::set_notify_event_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.notify_event_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendAddRsp.notify_event_id)
}
inline std::string* FriendAddRsp::mutable_notify_event_id() {
  std::string* _s = _internal_mutable_notify_event_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendAddRsp.notify_event_id)
  return _s;
}
inline const std::string& FriendAddRsp::_internal_notify_event_id() const {
  return _impl_.notify_event_id_.Get();
}
inline void FriendAddRsp::_internal_set_notify_event_id(const std::string& value) {
  
  _impl_.notify_event_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendAddRsp::_internal_mutable_notify_event_id() {
  
  return _impl_.notify_event_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendAddRsp::release_notify_event_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendAddRsp.notify_event_id)
  return _impl_.notify_event_id_.Release();
}
inline void FriendAddRsp::set_allocated_notify_event_id(std::string* notify_event_id) {
  if (notify_event_id != nullptr) {
    
  } else {
    
  }
  _impl_.notify_event_id_.SetAllocated(notify_event_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.notify_event_id_.IsDefault()) {
    _impl_.notify_event_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendAddRsp.notify_event_id)
}

// -------------------------------------------------------------------

// FriendAddProcessReq

// string request_id = 1;
inline void FriendAddProcessReq::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& FriendAddProcessReq::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddProcessReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendAddProcessReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendAddProcessReq.request_id)
}
inline std::string* FriendAddProcessReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendAddProcessReq.request_id)
  return _s;
}
inline const std::string& FriendAddProcessReq::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void FriendAddProcessReq::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendAddProcessReq::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendAddProcessReq::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendAddProcessReq.request_id)
  return _impl_.request_id_.Release();
}
inline void FriendAddProcessReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendAddProcessReq.request_id)
}

// string notify_event_id = 2;
inline void FriendAddProcessReq::clear_notify_event_id() {
  _impl_.notify_event_id_.ClearToEmpty();
}
inline const std::string& FriendAddProcessReq::notify_event_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddProcessReq.notify_event_id)
  return _internal_notify_event_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendAddProcessReq::set_notify_event_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.notify_event_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendAddProcessReq.notify_event_id)
}
inline std::string* FriendAddProcessReq::mutable_notify_event_id() {
  std::string* _s = _internal_mutable_notify_event_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendAddProcessReq.notify_event_id)
  return _s;
}
inline const std::string& FriendAddProcessReq::_internal_notify_event_id() const {
  return _impl_.notify_event_id_.Get();
}
inline void FriendAddProcessReq::_internal_set_notify_event_id(const std::string& value) {
  
  _impl_.notify_event_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendAddProcessReq::_internal_mutable_notify_event_id() {
  
  return _impl_.notify_event_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendAddProcessReq::release_notify_event_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendAddProcessReq.notify_event_id)
  return _impl_.notify_event_id_.Release();
}
inline void FriendAddProcessReq::set_allocated_notify_event_id(std::string* notify_event_id) {
  if (notify_event_id != nullptr) {
    
  } else {
    
  }
  _impl_.notify_event_id_.SetAllocated(notify_event_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.notify_event_id_.IsDefault()) {
    _impl_.notify_event_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendAddProcessReq.notify_event_id)
}

// bool agree = 3;
inline void FriendAddProcessReq::clear_agree() {
  _impl_.agree_ = false;
}
inline bool FriendAddProcessReq::_internal_agree() const {
  return _impl_.agree_;
}
inline bool FriendAddProcessReq::agree() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddProcessReq.agree)
  return _internal_agree();
}
inline void FriendAddProcessReq::_internal_set_agree(bool value) {
  
  _impl_.agree_ = value;
}
inline void FriendAddProcessReq::set_agree(bool value) {
  _internal_set_agree(value);
  // @@protoc_insertion_point(field_set:SnowK.FriendAddProcessReq.agree)
}

// string apply_user_id = 4;
inline void FriendAddProcessReq::clear_apply_user_id() {
  _impl_.apply_user_id_.ClearToEmpty();
}
inline const std::string& FriendAddProcessReq::apply_user_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddProcessReq.apply_user_id)
  return _internal_apply_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendAddProcessReq::set_apply_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.apply_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendAddProcessReq.apply_user_id)
}
inline std::string* FriendAddProcessReq::mutable_apply_user_id() {
  std::string* _s = _internal_mutable_apply_user_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendAddProcessReq.apply_user_id)
  return _s;
}
inline const std::string& FriendAddProcessReq::_internal_apply_user_id() const {
  return _impl_.apply_user_id_.Get();
}
inline void FriendAddProcessReq::_internal_set_apply_user_id(const std::string& value) {
  
  _impl_.apply_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendAddProcessReq::_internal_mutable_apply_user_id() {
  
  return _impl_.apply_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendAddProcessReq::release_apply_user_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendAddProcessReq.apply_user_id)
  return _impl_.apply_user_id_.Release();
}
inline void FriendAddProcessReq::set_allocated_apply_user_id(std::string* apply_user_id) {
  if (apply_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.apply_user_id_.SetAllocated(apply_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apply_user_id_.IsDefault()) {
    _impl_.apply_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendAddProcessReq.apply_user_id)
}

// optional string session_id = 5;
inline bool FriendAddProcessReq::_internal_has_session_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendAddProcessReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void FriendAddProcessReq::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FriendAddProcessReq::session_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddProcessReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendAddProcessReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendAddProcessReq.session_id)
}
inline std::string* FriendAddProcessReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendAddProcessReq.session_id)
  return _s;
}
inline const std::string& FriendAddProcessReq::_internal_session_id() const {
  return _impl_.session_id_.Get();
}
inline void FriendAddProcessReq::_internal_set_session_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendAddProcessReq::_internal_mutable_session_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendAddProcessReq::release_session_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendAddProcessReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FriendAddProcessReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendAddProcessReq.session_id)
}

// optional string user_id = 6;
inline bool FriendAddProcessReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FriendAddProcessReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void FriendAddProcessReq::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FriendAddProcessReq::user_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddProcessReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendAddProcessReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendAddProcessReq.user_id)
}
inline std::string* FriendAddProcessReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendAddProcessReq.user_id)
  return _s;
}
inline const std::string& FriendAddProcessReq::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void FriendAddProcessReq::_internal_set_user_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendAddProcessReq::_internal_mutable_user_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendAddProcessReq::release_user_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendAddProcessReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FriendAddProcessReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendAddProcessReq.user_id)
}

// -------------------------------------------------------------------

// FriendAddProcessRsp

// string request_id = 1;
inline void FriendAddProcessRsp::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& FriendAddProcessRsp::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddProcessRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendAddProcessRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendAddProcessRsp.request_id)
}
inline std::string* FriendAddProcessRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendAddProcessRsp.request_id)
  return _s;
}
inline const std::string& FriendAddProcessRsp::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void FriendAddProcessRsp::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendAddProcessRsp::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendAddProcessRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendAddProcessRsp.request_id)
  return _impl_.request_id_.Release();
}
inline void FriendAddProcessRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendAddProcessRsp.request_id)
}

// bool success = 2;
inline void FriendAddProcessRsp::clear_success() {
  _impl_.success_ = false;
}
inline bool FriendAddProcessRsp::_internal_success() const {
  return _impl_.success_;
}
inline bool FriendAddProcessRsp::success() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddProcessRsp.success)
  return _internal_success();
}
inline void FriendAddProcessRsp::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void FriendAddProcessRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:SnowK.FriendAddProcessRsp.success)
}

// string errmsg = 3;
inline void FriendAddProcessRsp::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& FriendAddProcessRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddProcessRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendAddProcessRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendAddProcessRsp.errmsg)
}
inline std::string* FriendAddProcessRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendAddProcessRsp.errmsg)
  return _s;
}
inline const std::string& FriendAddProcessRsp::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void FriendAddProcessRsp::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendAddProcessRsp::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendAddProcessRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:SnowK.FriendAddProcessRsp.errmsg)
  return _impl_.errmsg_.Release();
}
inline void FriendAddProcessRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendAddProcessRsp.errmsg)
}

// optional string new_session_id = 4;
inline bool FriendAddProcessRsp::_internal_has_new_session_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendAddProcessRsp::has_new_session_id() const {
  return _internal_has_new_session_id();
}
inline void FriendAddProcessRsp::clear_new_session_id() {
  _impl_.new_session_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FriendAddProcessRsp::new_session_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendAddProcessRsp.new_session_id)
  return _internal_new_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendAddProcessRsp::set_new_session_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.new_session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendAddProcessRsp.new_session_id)
}
inline std::string* FriendAddProcessRsp::mutable_new_session_id() {
  std::string* _s = _internal_mutable_new_session_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendAddProcessRsp.new_session_id)
  return _s;
}
inline const std::string& FriendAddProcessRsp::_internal_new_session_id() const {
  return _impl_.new_session_id_.Get();
}
inline void FriendAddProcessRsp::_internal_set_new_session_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.new_session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendAddProcessRsp::_internal_mutable_new_session_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.new_session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendAddProcessRsp::release_new_session_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendAddProcessRsp.new_session_id)
  if (!_internal_has_new_session_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.new_session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_session_id_.IsDefault()) {
    _impl_.new_session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FriendAddProcessRsp::set_allocated_new_session_id(std::string* new_session_id) {
  if (new_session_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.new_session_id_.SetAllocated(new_session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_session_id_.IsDefault()) {
    _impl_.new_session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendAddProcessRsp.new_session_id)
}

// -------------------------------------------------------------------

// GetPendingFriendEventListReq

// string request_id = 1;
inline void GetPendingFriendEventListReq::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& GetPendingFriendEventListReq::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.GetPendingFriendEventListReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPendingFriendEventListReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetPendingFriendEventListReq.request_id)
}
inline std::string* GetPendingFriendEventListReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.GetPendingFriendEventListReq.request_id)
  return _s;
}
inline const std::string& GetPendingFriendEventListReq::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void GetPendingFriendEventListReq::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPendingFriendEventListReq::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPendingFriendEventListReq::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.GetPendingFriendEventListReq.request_id)
  return _impl_.request_id_.Release();
}
inline void GetPendingFriendEventListReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetPendingFriendEventListReq.request_id)
}

// optional string session_id = 2;
inline bool GetPendingFriendEventListReq::_internal_has_session_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetPendingFriendEventListReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void GetPendingFriendEventListReq::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetPendingFriendEventListReq::session_id() const {
  // @@protoc_insertion_point(field_get:SnowK.GetPendingFriendEventListReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPendingFriendEventListReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetPendingFriendEventListReq.session_id)
}
inline std::string* GetPendingFriendEventListReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:SnowK.GetPendingFriendEventListReq.session_id)
  return _s;
}
inline const std::string& GetPendingFriendEventListReq::_internal_session_id() const {
  return _impl_.session_id_.Get();
}
inline void GetPendingFriendEventListReq::_internal_set_session_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPendingFriendEventListReq::_internal_mutable_session_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPendingFriendEventListReq::release_session_id() {
  // @@protoc_insertion_point(field_release:SnowK.GetPendingFriendEventListReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetPendingFriendEventListReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetPendingFriendEventListReq.session_id)
}

// optional string user_id = 3;
inline bool GetPendingFriendEventListReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetPendingFriendEventListReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetPendingFriendEventListReq::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetPendingFriendEventListReq::user_id() const {
  // @@protoc_insertion_point(field_get:SnowK.GetPendingFriendEventListReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPendingFriendEventListReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetPendingFriendEventListReq.user_id)
}
inline std::string* GetPendingFriendEventListReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:SnowK.GetPendingFriendEventListReq.user_id)
  return _s;
}
inline const std::string& GetPendingFriendEventListReq::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetPendingFriendEventListReq::_internal_set_user_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPendingFriendEventListReq::_internal_mutable_user_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPendingFriendEventListReq::release_user_id() {
  // @@protoc_insertion_point(field_release:SnowK.GetPendingFriendEventListReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetPendingFriendEventListReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetPendingFriendEventListReq.user_id)
}

// -------------------------------------------------------------------

// FriendEvent

// optional string event_id = 1;
inline bool FriendEvent::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendEvent::has_event_id() const {
  return _internal_has_event_id();
}
inline void FriendEvent::clear_event_id() {
  _impl_.event_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FriendEvent::event_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendEvent.event_id)
  return _internal_event_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendEvent::set_event_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.event_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendEvent.event_id)
}
inline std::string* FriendEvent::mutable_event_id() {
  std::string* _s = _internal_mutable_event_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendEvent.event_id)
  return _s;
}
inline const std::string& FriendEvent::_internal_event_id() const {
  return _impl_.event_id_.Get();
}
inline void FriendEvent::_internal_set_event_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendEvent::_internal_mutable_event_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.event_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendEvent::release_event_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendEvent.event_id)
  if (!_internal_has_event_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.event_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_id_.IsDefault()) {
    _impl_.event_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FriendEvent::set_allocated_event_id(std::string* event_id) {
  if (event_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.event_id_.SetAllocated(event_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_id_.IsDefault()) {
    _impl_.event_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendEvent.event_id)
}

// .SnowK.UserInfo sender = 3;
inline bool FriendEvent::_internal_has_sender() const {
  return this != internal_default_instance() && _impl_.sender_ != nullptr;
}
inline bool FriendEvent::has_sender() const {
  return _internal_has_sender();
}
inline const ::SnowK::UserInfo& FriendEvent::_internal_sender() const {
  const ::SnowK::UserInfo* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::SnowK::UserInfo&>(
      ::SnowK::_UserInfo_default_instance_);
}
inline const ::SnowK::UserInfo& FriendEvent::sender() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendEvent.sender)
  return _internal_sender();
}
inline void FriendEvent::unsafe_arena_set_allocated_sender(
    ::SnowK::UserInfo* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SnowK.FriendEvent.sender)
}
inline ::SnowK::UserInfo* FriendEvent::release_sender() {
  
  ::SnowK::UserInfo* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SnowK::UserInfo* FriendEvent::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:SnowK.FriendEvent.sender)
  
  ::SnowK::UserInfo* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::SnowK::UserInfo* FriendEvent::_internal_mutable_sender() {
  
  if (_impl_.sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::SnowK::UserInfo>(GetArenaForAllocation());
    _impl_.sender_ = p;
  }
  return _impl_.sender_;
}
inline ::SnowK::UserInfo* FriendEvent::mutable_sender() {
  ::SnowK::UserInfo* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendEvent.sender)
  return _msg;
}
inline void FriendEvent::set_allocated_sender(::SnowK::UserInfo* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender));
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendEvent.sender)
}

// -------------------------------------------------------------------

// GetPendingFriendEventListRsp

// string request_id = 1;
inline void GetPendingFriendEventListRsp::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& GetPendingFriendEventListRsp::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.GetPendingFriendEventListRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPendingFriendEventListRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetPendingFriendEventListRsp.request_id)
}
inline std::string* GetPendingFriendEventListRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.GetPendingFriendEventListRsp.request_id)
  return _s;
}
inline const std::string& GetPendingFriendEventListRsp::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void GetPendingFriendEventListRsp::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPendingFriendEventListRsp::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPendingFriendEventListRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.GetPendingFriendEventListRsp.request_id)
  return _impl_.request_id_.Release();
}
inline void GetPendingFriendEventListRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetPendingFriendEventListRsp.request_id)
}

// bool success = 2;
inline void GetPendingFriendEventListRsp::clear_success() {
  _impl_.success_ = false;
}
inline bool GetPendingFriendEventListRsp::_internal_success() const {
  return _impl_.success_;
}
inline bool GetPendingFriendEventListRsp::success() const {
  // @@protoc_insertion_point(field_get:SnowK.GetPendingFriendEventListRsp.success)
  return _internal_success();
}
inline void GetPendingFriendEventListRsp::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GetPendingFriendEventListRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:SnowK.GetPendingFriendEventListRsp.success)
}

// string errmsg = 3;
inline void GetPendingFriendEventListRsp::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& GetPendingFriendEventListRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:SnowK.GetPendingFriendEventListRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPendingFriendEventListRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetPendingFriendEventListRsp.errmsg)
}
inline std::string* GetPendingFriendEventListRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:SnowK.GetPendingFriendEventListRsp.errmsg)
  return _s;
}
inline const std::string& GetPendingFriendEventListRsp::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void GetPendingFriendEventListRsp::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPendingFriendEventListRsp::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPendingFriendEventListRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:SnowK.GetPendingFriendEventListRsp.errmsg)
  return _impl_.errmsg_.Release();
}
inline void GetPendingFriendEventListRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetPendingFriendEventListRsp.errmsg)
}

// repeated .SnowK.FriendEvent event = 4;
inline int GetPendingFriendEventListRsp::_internal_event_size() const {
  return _impl_.event_.size();
}
inline int GetPendingFriendEventListRsp::event_size() const {
  return _internal_event_size();
}
inline void GetPendingFriendEventListRsp::clear_event() {
  _impl_.event_.Clear();
}
inline ::SnowK::FriendEvent* GetPendingFriendEventListRsp::mutable_event(int index) {
  // @@protoc_insertion_point(field_mutable:SnowK.GetPendingFriendEventListRsp.event)
  return _impl_.event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::FriendEvent >*
GetPendingFriendEventListRsp::mutable_event() {
  // @@protoc_insertion_point(field_mutable_list:SnowK.GetPendingFriendEventListRsp.event)
  return &_impl_.event_;
}
inline const ::SnowK::FriendEvent& GetPendingFriendEventListRsp::_internal_event(int index) const {
  return _impl_.event_.Get(index);
}
inline const ::SnowK::FriendEvent& GetPendingFriendEventListRsp::event(int index) const {
  // @@protoc_insertion_point(field_get:SnowK.GetPendingFriendEventListRsp.event)
  return _internal_event(index);
}
inline ::SnowK::FriendEvent* GetPendingFriendEventListRsp::_internal_add_event() {
  return _impl_.event_.Add();
}
inline ::SnowK::FriendEvent* GetPendingFriendEventListRsp::add_event() {
  ::SnowK::FriendEvent* _add = _internal_add_event();
  // @@protoc_insertion_point(field_add:SnowK.GetPendingFriendEventListRsp.event)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::FriendEvent >&
GetPendingFriendEventListRsp::event() const {
  // @@protoc_insertion_point(field_list:SnowK.GetPendingFriendEventListRsp.event)
  return _impl_.event_;
}

// -------------------------------------------------------------------

// FriendSearchReq

// string request_id = 1;
inline void FriendSearchReq::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& FriendSearchReq::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendSearchReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendSearchReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendSearchReq.request_id)
}
inline std::string* FriendSearchReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendSearchReq.request_id)
  return _s;
}
inline const std::string& FriendSearchReq::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void FriendSearchReq::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendSearchReq::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendSearchReq::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendSearchReq.request_id)
  return _impl_.request_id_.Release();
}
inline void FriendSearchReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendSearchReq.request_id)
}

// string search_key = 2;
inline void FriendSearchReq::clear_search_key() {
  _impl_.search_key_.ClearToEmpty();
}
inline const std::string& FriendSearchReq::search_key() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendSearchReq.search_key)
  return _internal_search_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendSearchReq::set_search_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.search_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendSearchReq.search_key)
}
inline std::string* FriendSearchReq::mutable_search_key() {
  std::string* _s = _internal_mutable_search_key();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendSearchReq.search_key)
  return _s;
}
inline const std::string& FriendSearchReq::_internal_search_key() const {
  return _impl_.search_key_.Get();
}
inline void FriendSearchReq::_internal_set_search_key(const std::string& value) {
  
  _impl_.search_key_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendSearchReq::_internal_mutable_search_key() {
  
  return _impl_.search_key_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendSearchReq::release_search_key() {
  // @@protoc_insertion_point(field_release:SnowK.FriendSearchReq.search_key)
  return _impl_.search_key_.Release();
}
inline void FriendSearchReq::set_allocated_search_key(std::string* search_key) {
  if (search_key != nullptr) {
    
  } else {
    
  }
  _impl_.search_key_.SetAllocated(search_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.search_key_.IsDefault()) {
    _impl_.search_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendSearchReq.search_key)
}

// optional string session_id = 3;
inline bool FriendSearchReq::_internal_has_session_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendSearchReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void FriendSearchReq::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FriendSearchReq::session_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendSearchReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendSearchReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendSearchReq.session_id)
}
inline std::string* FriendSearchReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendSearchReq.session_id)
  return _s;
}
inline const std::string& FriendSearchReq::_internal_session_id() const {
  return _impl_.session_id_.Get();
}
inline void FriendSearchReq::_internal_set_session_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendSearchReq::_internal_mutable_session_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendSearchReq::release_session_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendSearchReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FriendSearchReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendSearchReq.session_id)
}

// optional string user_id = 4;
inline bool FriendSearchReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FriendSearchReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void FriendSearchReq::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FriendSearchReq::user_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendSearchReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendSearchReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendSearchReq.user_id)
}
inline std::string* FriendSearchReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendSearchReq.user_id)
  return _s;
}
inline const std::string& FriendSearchReq::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void FriendSearchReq::_internal_set_user_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendSearchReq::_internal_mutable_user_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendSearchReq::release_user_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendSearchReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FriendSearchReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendSearchReq.user_id)
}

// -------------------------------------------------------------------

// FriendSearchRsp

// string request_id = 1;
inline void FriendSearchRsp::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& FriendSearchRsp::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendSearchRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendSearchRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendSearchRsp.request_id)
}
inline std::string* FriendSearchRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendSearchRsp.request_id)
  return _s;
}
inline const std::string& FriendSearchRsp::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void FriendSearchRsp::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendSearchRsp::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendSearchRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.FriendSearchRsp.request_id)
  return _impl_.request_id_.Release();
}
inline void FriendSearchRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendSearchRsp.request_id)
}

// bool success = 2;
inline void FriendSearchRsp::clear_success() {
  _impl_.success_ = false;
}
inline bool FriendSearchRsp::_internal_success() const {
  return _impl_.success_;
}
inline bool FriendSearchRsp::success() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendSearchRsp.success)
  return _internal_success();
}
inline void FriendSearchRsp::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void FriendSearchRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:SnowK.FriendSearchRsp.success)
}

// string errmsg = 3;
inline void FriendSearchRsp::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& FriendSearchRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:SnowK.FriendSearchRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendSearchRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.FriendSearchRsp.errmsg)
}
inline std::string* FriendSearchRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:SnowK.FriendSearchRsp.errmsg)
  return _s;
}
inline const std::string& FriendSearchRsp::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void FriendSearchRsp::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendSearchRsp::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendSearchRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:SnowK.FriendSearchRsp.errmsg)
  return _impl_.errmsg_.Release();
}
inline void FriendSearchRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.FriendSearchRsp.errmsg)
}

// repeated .SnowK.UserInfo user_info = 4;
inline int FriendSearchRsp::_internal_user_info_size() const {
  return _impl_.user_info_.size();
}
inline int FriendSearchRsp::user_info_size() const {
  return _internal_user_info_size();
}
inline ::SnowK::UserInfo* FriendSearchRsp::mutable_user_info(int index) {
  // @@protoc_insertion_point(field_mutable:SnowK.FriendSearchRsp.user_info)
  return _impl_.user_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::UserInfo >*
FriendSearchRsp::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable_list:SnowK.FriendSearchRsp.user_info)
  return &_impl_.user_info_;
}
inline const ::SnowK::UserInfo& FriendSearchRsp::_internal_user_info(int index) const {
  return _impl_.user_info_.Get(index);
}
inline const ::SnowK::UserInfo& FriendSearchRsp::user_info(int index) const {
  // @@protoc_insertion_point(field_get:SnowK.FriendSearchRsp.user_info)
  return _internal_user_info(index);
}
inline ::SnowK::UserInfo* FriendSearchRsp::_internal_add_user_info() {
  return _impl_.user_info_.Add();
}
inline ::SnowK::UserInfo* FriendSearchRsp::add_user_info() {
  ::SnowK::UserInfo* _add = _internal_add_user_info();
  // @@protoc_insertion_point(field_add:SnowK.FriendSearchRsp.user_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::UserInfo >&
FriendSearchRsp::user_info() const {
  // @@protoc_insertion_point(field_list:SnowK.FriendSearchRsp.user_info)
  return _impl_.user_info_;
}

// -------------------------------------------------------------------

// GetChatSessionListReq

// string request_id = 1;
inline void GetChatSessionListReq::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& GetChatSessionListReq::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.GetChatSessionListReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChatSessionListReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetChatSessionListReq.request_id)
}
inline std::string* GetChatSessionListReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.GetChatSessionListReq.request_id)
  return _s;
}
inline const std::string& GetChatSessionListReq::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void GetChatSessionListReq::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetChatSessionListReq::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetChatSessionListReq::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.GetChatSessionListReq.request_id)
  return _impl_.request_id_.Release();
}
inline void GetChatSessionListReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetChatSessionListReq.request_id)
}

// optional string session_id = 2;
inline bool GetChatSessionListReq::_internal_has_session_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetChatSessionListReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void GetChatSessionListReq::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetChatSessionListReq::session_id() const {
  // @@protoc_insertion_point(field_get:SnowK.GetChatSessionListReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChatSessionListReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetChatSessionListReq.session_id)
}
inline std::string* GetChatSessionListReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:SnowK.GetChatSessionListReq.session_id)
  return _s;
}
inline const std::string& GetChatSessionListReq::_internal_session_id() const {
  return _impl_.session_id_.Get();
}
inline void GetChatSessionListReq::_internal_set_session_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetChatSessionListReq::_internal_mutable_session_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetChatSessionListReq::release_session_id() {
  // @@protoc_insertion_point(field_release:SnowK.GetChatSessionListReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetChatSessionListReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetChatSessionListReq.session_id)
}

// optional string user_id = 3;
inline bool GetChatSessionListReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetChatSessionListReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetChatSessionListReq::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetChatSessionListReq::user_id() const {
  // @@protoc_insertion_point(field_get:SnowK.GetChatSessionListReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChatSessionListReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetChatSessionListReq.user_id)
}
inline std::string* GetChatSessionListReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:SnowK.GetChatSessionListReq.user_id)
  return _s;
}
inline const std::string& GetChatSessionListReq::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetChatSessionListReq::_internal_set_user_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetChatSessionListReq::_internal_mutable_user_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetChatSessionListReq::release_user_id() {
  // @@protoc_insertion_point(field_release:SnowK.GetChatSessionListReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetChatSessionListReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetChatSessionListReq.user_id)
}

// -------------------------------------------------------------------

// GetChatSessionListRsp

// string request_id = 1;
inline void GetChatSessionListRsp::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& GetChatSessionListRsp::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.GetChatSessionListRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChatSessionListRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetChatSessionListRsp.request_id)
}
inline std::string* GetChatSessionListRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.GetChatSessionListRsp.request_id)
  return _s;
}
inline const std::string& GetChatSessionListRsp::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void GetChatSessionListRsp::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetChatSessionListRsp::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetChatSessionListRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.GetChatSessionListRsp.request_id)
  return _impl_.request_id_.Release();
}
inline void GetChatSessionListRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetChatSessionListRsp.request_id)
}

// bool success = 2;
inline void GetChatSessionListRsp::clear_success() {
  _impl_.success_ = false;
}
inline bool GetChatSessionListRsp::_internal_success() const {
  return _impl_.success_;
}
inline bool GetChatSessionListRsp::success() const {
  // @@protoc_insertion_point(field_get:SnowK.GetChatSessionListRsp.success)
  return _internal_success();
}
inline void GetChatSessionListRsp::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GetChatSessionListRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:SnowK.GetChatSessionListRsp.success)
}

// string errmsg = 3;
inline void GetChatSessionListRsp::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& GetChatSessionListRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:SnowK.GetChatSessionListRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChatSessionListRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetChatSessionListRsp.errmsg)
}
inline std::string* GetChatSessionListRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:SnowK.GetChatSessionListRsp.errmsg)
  return _s;
}
inline const std::string& GetChatSessionListRsp::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void GetChatSessionListRsp::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetChatSessionListRsp::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* GetChatSessionListRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:SnowK.GetChatSessionListRsp.errmsg)
  return _impl_.errmsg_.Release();
}
inline void GetChatSessionListRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetChatSessionListRsp.errmsg)
}

// repeated .SnowK.ChatSessionInfo chat_session_info_list = 4;
inline int GetChatSessionListRsp::_internal_chat_session_info_list_size() const {
  return _impl_.chat_session_info_list_.size();
}
inline int GetChatSessionListRsp::chat_session_info_list_size() const {
  return _internal_chat_session_info_list_size();
}
inline ::SnowK::ChatSessionInfo* GetChatSessionListRsp::mutable_chat_session_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:SnowK.GetChatSessionListRsp.chat_session_info_list)
  return _impl_.chat_session_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::ChatSessionInfo >*
GetChatSessionListRsp::mutable_chat_session_info_list() {
  // @@protoc_insertion_point(field_mutable_list:SnowK.GetChatSessionListRsp.chat_session_info_list)
  return &_impl_.chat_session_info_list_;
}
inline const ::SnowK::ChatSessionInfo& GetChatSessionListRsp::_internal_chat_session_info_list(int index) const {
  return _impl_.chat_session_info_list_.Get(index);
}
inline const ::SnowK::ChatSessionInfo& GetChatSessionListRsp::chat_session_info_list(int index) const {
  // @@protoc_insertion_point(field_get:SnowK.GetChatSessionListRsp.chat_session_info_list)
  return _internal_chat_session_info_list(index);
}
inline ::SnowK::ChatSessionInfo* GetChatSessionListRsp::_internal_add_chat_session_info_list() {
  return _impl_.chat_session_info_list_.Add();
}
inline ::SnowK::ChatSessionInfo* GetChatSessionListRsp::add_chat_session_info_list() {
  ::SnowK::ChatSessionInfo* _add = _internal_add_chat_session_info_list();
  // @@protoc_insertion_point(field_add:SnowK.GetChatSessionListRsp.chat_session_info_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::ChatSessionInfo >&
GetChatSessionListRsp::chat_session_info_list() const {
  // @@protoc_insertion_point(field_list:SnowK.GetChatSessionListRsp.chat_session_info_list)
  return _impl_.chat_session_info_list_;
}

// -------------------------------------------------------------------

// ChatSessionCreateReq

// string request_id = 1;
inline void ChatSessionCreateReq::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& ChatSessionCreateReq::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.ChatSessionCreateReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatSessionCreateReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.ChatSessionCreateReq.request_id)
}
inline std::string* ChatSessionCreateReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.ChatSessionCreateReq.request_id)
  return _s;
}
inline const std::string& ChatSessionCreateReq::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void ChatSessionCreateReq::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatSessionCreateReq::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatSessionCreateReq::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.ChatSessionCreateReq.request_id)
  return _impl_.request_id_.Release();
}
inline void ChatSessionCreateReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.ChatSessionCreateReq.request_id)
}

// optional string session_id = 2;
inline bool ChatSessionCreateReq::_internal_has_session_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChatSessionCreateReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void ChatSessionCreateReq::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChatSessionCreateReq::session_id() const {
  // @@protoc_insertion_point(field_get:SnowK.ChatSessionCreateReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatSessionCreateReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.ChatSessionCreateReq.session_id)
}
inline std::string* ChatSessionCreateReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:SnowK.ChatSessionCreateReq.session_id)
  return _s;
}
inline const std::string& ChatSessionCreateReq::_internal_session_id() const {
  return _impl_.session_id_.Get();
}
inline void ChatSessionCreateReq::_internal_set_session_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatSessionCreateReq::_internal_mutable_session_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatSessionCreateReq::release_session_id() {
  // @@protoc_insertion_point(field_release:SnowK.ChatSessionCreateReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChatSessionCreateReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.ChatSessionCreateReq.session_id)
}

// optional string user_id = 3;
inline bool ChatSessionCreateReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChatSessionCreateReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void ChatSessionCreateReq::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChatSessionCreateReq::user_id() const {
  // @@protoc_insertion_point(field_get:SnowK.ChatSessionCreateReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatSessionCreateReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.ChatSessionCreateReq.user_id)
}
inline std::string* ChatSessionCreateReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:SnowK.ChatSessionCreateReq.user_id)
  return _s;
}
inline const std::string& ChatSessionCreateReq::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void ChatSessionCreateReq::_internal_set_user_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatSessionCreateReq::_internal_mutable_user_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatSessionCreateReq::release_user_id() {
  // @@protoc_insertion_point(field_release:SnowK.ChatSessionCreateReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChatSessionCreateReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.ChatSessionCreateReq.user_id)
}

// string chat_session_name = 4;
inline void ChatSessionCreateReq::clear_chat_session_name() {
  _impl_.chat_session_name_.ClearToEmpty();
}
inline const std::string& ChatSessionCreateReq::chat_session_name() const {
  // @@protoc_insertion_point(field_get:SnowK.ChatSessionCreateReq.chat_session_name)
  return _internal_chat_session_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatSessionCreateReq::set_chat_session_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.chat_session_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.ChatSessionCreateReq.chat_session_name)
}
inline std::string* ChatSessionCreateReq::mutable_chat_session_name() {
  std::string* _s = _internal_mutable_chat_session_name();
  // @@protoc_insertion_point(field_mutable:SnowK.ChatSessionCreateReq.chat_session_name)
  return _s;
}
inline const std::string& ChatSessionCreateReq::_internal_chat_session_name() const {
  return _impl_.chat_session_name_.Get();
}
inline void ChatSessionCreateReq::_internal_set_chat_session_name(const std::string& value) {
  
  _impl_.chat_session_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatSessionCreateReq::_internal_mutable_chat_session_name() {
  
  return _impl_.chat_session_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatSessionCreateReq::release_chat_session_name() {
  // @@protoc_insertion_point(field_release:SnowK.ChatSessionCreateReq.chat_session_name)
  return _impl_.chat_session_name_.Release();
}
inline void ChatSessionCreateReq::set_allocated_chat_session_name(std::string* chat_session_name) {
  if (chat_session_name != nullptr) {
    
  } else {
    
  }
  _impl_.chat_session_name_.SetAllocated(chat_session_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chat_session_name_.IsDefault()) {
    _impl_.chat_session_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.ChatSessionCreateReq.chat_session_name)
}

// repeated string member_id_list = 5;
inline int ChatSessionCreateReq::_internal_member_id_list_size() const {
  return _impl_.member_id_list_.size();
}
inline int ChatSessionCreateReq::member_id_list_size() const {
  return _internal_member_id_list_size();
}
inline void ChatSessionCreateReq::clear_member_id_list() {
  _impl_.member_id_list_.Clear();
}
inline std::string* ChatSessionCreateReq::add_member_id_list() {
  std::string* _s = _internal_add_member_id_list();
  // @@protoc_insertion_point(field_add_mutable:SnowK.ChatSessionCreateReq.member_id_list)
  return _s;
}
inline const std::string& ChatSessionCreateReq::_internal_member_id_list(int index) const {
  return _impl_.member_id_list_.Get(index);
}
inline const std::string& ChatSessionCreateReq::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:SnowK.ChatSessionCreateReq.member_id_list)
  return _internal_member_id_list(index);
}
inline std::string* ChatSessionCreateReq::mutable_member_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:SnowK.ChatSessionCreateReq.member_id_list)
  return _impl_.member_id_list_.Mutable(index);
}
inline void ChatSessionCreateReq::set_member_id_list(int index, const std::string& value) {
  _impl_.member_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SnowK.ChatSessionCreateReq.member_id_list)
}
inline void ChatSessionCreateReq::set_member_id_list(int index, std::string&& value) {
  _impl_.member_id_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SnowK.ChatSessionCreateReq.member_id_list)
}
inline void ChatSessionCreateReq::set_member_id_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.member_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SnowK.ChatSessionCreateReq.member_id_list)
}
inline void ChatSessionCreateReq::set_member_id_list(int index, const char* value, size_t size) {
  _impl_.member_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SnowK.ChatSessionCreateReq.member_id_list)
}
inline std::string* ChatSessionCreateReq::_internal_add_member_id_list() {
  return _impl_.member_id_list_.Add();
}
inline void ChatSessionCreateReq::add_member_id_list(const std::string& value) {
  _impl_.member_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SnowK.ChatSessionCreateReq.member_id_list)
}
inline void ChatSessionCreateReq::add_member_id_list(std::string&& value) {
  _impl_.member_id_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SnowK.ChatSessionCreateReq.member_id_list)
}
inline void ChatSessionCreateReq::add_member_id_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.member_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SnowK.ChatSessionCreateReq.member_id_list)
}
inline void ChatSessionCreateReq::add_member_id_list(const char* value, size_t size) {
  _impl_.member_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SnowK.ChatSessionCreateReq.member_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChatSessionCreateReq::member_id_list() const {
  // @@protoc_insertion_point(field_list:SnowK.ChatSessionCreateReq.member_id_list)
  return _impl_.member_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChatSessionCreateReq::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:SnowK.ChatSessionCreateReq.member_id_list)
  return &_impl_.member_id_list_;
}

// -------------------------------------------------------------------

// ChatSessionCreateRsp

// string request_id = 1;
inline void ChatSessionCreateRsp::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& ChatSessionCreateRsp::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.ChatSessionCreateRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatSessionCreateRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.ChatSessionCreateRsp.request_id)
}
inline std::string* ChatSessionCreateRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.ChatSessionCreateRsp.request_id)
  return _s;
}
inline const std::string& ChatSessionCreateRsp::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void ChatSessionCreateRsp::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatSessionCreateRsp::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatSessionCreateRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.ChatSessionCreateRsp.request_id)
  return _impl_.request_id_.Release();
}
inline void ChatSessionCreateRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.ChatSessionCreateRsp.request_id)
}

// bool success = 2;
inline void ChatSessionCreateRsp::clear_success() {
  _impl_.success_ = false;
}
inline bool ChatSessionCreateRsp::_internal_success() const {
  return _impl_.success_;
}
inline bool ChatSessionCreateRsp::success() const {
  // @@protoc_insertion_point(field_get:SnowK.ChatSessionCreateRsp.success)
  return _internal_success();
}
inline void ChatSessionCreateRsp::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void ChatSessionCreateRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:SnowK.ChatSessionCreateRsp.success)
}

// string errmsg = 3;
inline void ChatSessionCreateRsp::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& ChatSessionCreateRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:SnowK.ChatSessionCreateRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatSessionCreateRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.ChatSessionCreateRsp.errmsg)
}
inline std::string* ChatSessionCreateRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:SnowK.ChatSessionCreateRsp.errmsg)
  return _s;
}
inline const std::string& ChatSessionCreateRsp::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void ChatSessionCreateRsp::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatSessionCreateRsp::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatSessionCreateRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:SnowK.ChatSessionCreateRsp.errmsg)
  return _impl_.errmsg_.Release();
}
inline void ChatSessionCreateRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.ChatSessionCreateRsp.errmsg)
}

// optional .SnowK.ChatSessionInfo chat_session_info = 4;
inline bool ChatSessionCreateRsp::_internal_has_chat_session_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chat_session_info_ != nullptr);
  return value;
}
inline bool ChatSessionCreateRsp::has_chat_session_info() const {
  return _internal_has_chat_session_info();
}
inline const ::SnowK::ChatSessionInfo& ChatSessionCreateRsp::_internal_chat_session_info() const {
  const ::SnowK::ChatSessionInfo* p = _impl_.chat_session_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::SnowK::ChatSessionInfo&>(
      ::SnowK::_ChatSessionInfo_default_instance_);
}
inline const ::SnowK::ChatSessionInfo& ChatSessionCreateRsp::chat_session_info() const {
  // @@protoc_insertion_point(field_get:SnowK.ChatSessionCreateRsp.chat_session_info)
  return _internal_chat_session_info();
}
inline void ChatSessionCreateRsp::unsafe_arena_set_allocated_chat_session_info(
    ::SnowK::ChatSessionInfo* chat_session_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chat_session_info_);
  }
  _impl_.chat_session_info_ = chat_session_info;
  if (chat_session_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SnowK.ChatSessionCreateRsp.chat_session_info)
}
inline ::SnowK::ChatSessionInfo* ChatSessionCreateRsp::release_chat_session_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SnowK::ChatSessionInfo* temp = _impl_.chat_session_info_;
  _impl_.chat_session_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SnowK::ChatSessionInfo* ChatSessionCreateRsp::unsafe_arena_release_chat_session_info() {
  // @@protoc_insertion_point(field_release:SnowK.ChatSessionCreateRsp.chat_session_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SnowK::ChatSessionInfo* temp = _impl_.chat_session_info_;
  _impl_.chat_session_info_ = nullptr;
  return temp;
}
inline ::SnowK::ChatSessionInfo* ChatSessionCreateRsp::_internal_mutable_chat_session_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.chat_session_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::SnowK::ChatSessionInfo>(GetArenaForAllocation());
    _impl_.chat_session_info_ = p;
  }
  return _impl_.chat_session_info_;
}
inline ::SnowK::ChatSessionInfo* ChatSessionCreateRsp::mutable_chat_session_info() {
  ::SnowK::ChatSessionInfo* _msg = _internal_mutable_chat_session_info();
  // @@protoc_insertion_point(field_mutable:SnowK.ChatSessionCreateRsp.chat_session_info)
  return _msg;
}
inline void ChatSessionCreateRsp::set_allocated_chat_session_info(::SnowK::ChatSessionInfo* chat_session_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chat_session_info_);
  }
  if (chat_session_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat_session_info));
    if (message_arena != submessage_arena) {
      chat_session_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_session_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chat_session_info_ = chat_session_info;
  // @@protoc_insertion_point(field_set_allocated:SnowK.ChatSessionCreateRsp.chat_session_info)
}

// -------------------------------------------------------------------

// GetChatSessionMemberReq

// string request_id = 1;
inline void GetChatSessionMemberReq::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& GetChatSessionMemberReq::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.GetChatSessionMemberReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChatSessionMemberReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetChatSessionMemberReq.request_id)
}
inline std::string* GetChatSessionMemberReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.GetChatSessionMemberReq.request_id)
  return _s;
}
inline const std::string& GetChatSessionMemberReq::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void GetChatSessionMemberReq::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetChatSessionMemberReq::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetChatSessionMemberReq::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.GetChatSessionMemberReq.request_id)
  return _impl_.request_id_.Release();
}
inline void GetChatSessionMemberReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetChatSessionMemberReq.request_id)
}

// optional string session_id = 2;
inline bool GetChatSessionMemberReq::_internal_has_session_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetChatSessionMemberReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void GetChatSessionMemberReq::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetChatSessionMemberReq::session_id() const {
  // @@protoc_insertion_point(field_get:SnowK.GetChatSessionMemberReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChatSessionMemberReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetChatSessionMemberReq.session_id)
}
inline std::string* GetChatSessionMemberReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:SnowK.GetChatSessionMemberReq.session_id)
  return _s;
}
inline const std::string& GetChatSessionMemberReq::_internal_session_id() const {
  return _impl_.session_id_.Get();
}
inline void GetChatSessionMemberReq::_internal_set_session_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetChatSessionMemberReq::_internal_mutable_session_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetChatSessionMemberReq::release_session_id() {
  // @@protoc_insertion_point(field_release:SnowK.GetChatSessionMemberReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetChatSessionMemberReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetChatSessionMemberReq.session_id)
}

// optional string user_id = 3;
inline bool GetChatSessionMemberReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetChatSessionMemberReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetChatSessionMemberReq::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetChatSessionMemberReq::user_id() const {
  // @@protoc_insertion_point(field_get:SnowK.GetChatSessionMemberReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChatSessionMemberReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetChatSessionMemberReq.user_id)
}
inline std::string* GetChatSessionMemberReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:SnowK.GetChatSessionMemberReq.user_id)
  return _s;
}
inline const std::string& GetChatSessionMemberReq::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetChatSessionMemberReq::_internal_set_user_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetChatSessionMemberReq::_internal_mutable_user_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetChatSessionMemberReq::release_user_id() {
  // @@protoc_insertion_point(field_release:SnowK.GetChatSessionMemberReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetChatSessionMemberReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetChatSessionMemberReq.user_id)
}

// string chat_session_id = 4;
inline void GetChatSessionMemberReq::clear_chat_session_id() {
  _impl_.chat_session_id_.ClearToEmpty();
}
inline const std::string& GetChatSessionMemberReq::chat_session_id() const {
  // @@protoc_insertion_point(field_get:SnowK.GetChatSessionMemberReq.chat_session_id)
  return _internal_chat_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChatSessionMemberReq::set_chat_session_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.chat_session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetChatSessionMemberReq.chat_session_id)
}
inline std::string* GetChatSessionMemberReq::mutable_chat_session_id() {
  std::string* _s = _internal_mutable_chat_session_id();
  // @@protoc_insertion_point(field_mutable:SnowK.GetChatSessionMemberReq.chat_session_id)
  return _s;
}
inline const std::string& GetChatSessionMemberReq::_internal_chat_session_id() const {
  return _impl_.chat_session_id_.Get();
}
inline void GetChatSessionMemberReq::_internal_set_chat_session_id(const std::string& value) {
  
  _impl_.chat_session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetChatSessionMemberReq::_internal_mutable_chat_session_id() {
  
  return _impl_.chat_session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetChatSessionMemberReq::release_chat_session_id() {
  // @@protoc_insertion_point(field_release:SnowK.GetChatSessionMemberReq.chat_session_id)
  return _impl_.chat_session_id_.Release();
}
inline void GetChatSessionMemberReq::set_allocated_chat_session_id(std::string* chat_session_id) {
  if (chat_session_id != nullptr) {
    
  } else {
    
  }
  _impl_.chat_session_id_.SetAllocated(chat_session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chat_session_id_.IsDefault()) {
    _impl_.chat_session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetChatSessionMemberReq.chat_session_id)
}

// -------------------------------------------------------------------

// GetChatSessionMemberRsp

// string request_id = 1;
inline void GetChatSessionMemberRsp::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& GetChatSessionMemberRsp::request_id() const {
  // @@protoc_insertion_point(field_get:SnowK.GetChatSessionMemberRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChatSessionMemberRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetChatSessionMemberRsp.request_id)
}
inline std::string* GetChatSessionMemberRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:SnowK.GetChatSessionMemberRsp.request_id)
  return _s;
}
inline const std::string& GetChatSessionMemberRsp::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void GetChatSessionMemberRsp::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetChatSessionMemberRsp::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetChatSessionMemberRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:SnowK.GetChatSessionMemberRsp.request_id)
  return _impl_.request_id_.Release();
}
inline void GetChatSessionMemberRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetChatSessionMemberRsp.request_id)
}

// bool success = 2;
inline void GetChatSessionMemberRsp::clear_success() {
  _impl_.success_ = false;
}
inline bool GetChatSessionMemberRsp::_internal_success() const {
  return _impl_.success_;
}
inline bool GetChatSessionMemberRsp::success() const {
  // @@protoc_insertion_point(field_get:SnowK.GetChatSessionMemberRsp.success)
  return _internal_success();
}
inline void GetChatSessionMemberRsp::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GetChatSessionMemberRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:SnowK.GetChatSessionMemberRsp.success)
}

// string errmsg = 3;
inline void GetChatSessionMemberRsp::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& GetChatSessionMemberRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:SnowK.GetChatSessionMemberRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChatSessionMemberRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.GetChatSessionMemberRsp.errmsg)
}
inline std::string* GetChatSessionMemberRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:SnowK.GetChatSessionMemberRsp.errmsg)
  return _s;
}
inline const std::string& GetChatSessionMemberRsp::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void GetChatSessionMemberRsp::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetChatSessionMemberRsp::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* GetChatSessionMemberRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:SnowK.GetChatSessionMemberRsp.errmsg)
  return _impl_.errmsg_.Release();
}
inline void GetChatSessionMemberRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.GetChatSessionMemberRsp.errmsg)
}

// repeated .SnowK.UserInfo member_info_list = 4;
inline int GetChatSessionMemberRsp::_internal_member_info_list_size() const {
  return _impl_.member_info_list_.size();
}
inline int GetChatSessionMemberRsp::member_info_list_size() const {
  return _internal_member_info_list_size();
}
inline ::SnowK::UserInfo* GetChatSessionMemberRsp::mutable_member_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:SnowK.GetChatSessionMemberRsp.member_info_list)
  return _impl_.member_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::UserInfo >*
GetChatSessionMemberRsp::mutable_member_info_list() {
  // @@protoc_insertion_point(field_mutable_list:SnowK.GetChatSessionMemberRsp.member_info_list)
  return &_impl_.member_info_list_;
}
inline const ::SnowK::UserInfo& GetChatSessionMemberRsp::_internal_member_info_list(int index) const {
  return _impl_.member_info_list_.Get(index);
}
inline const ::SnowK::UserInfo& GetChatSessionMemberRsp::member_info_list(int index) const {
  // @@protoc_insertion_point(field_get:SnowK.GetChatSessionMemberRsp.member_info_list)
  return _internal_member_info_list(index);
}
inline ::SnowK::UserInfo* GetChatSessionMemberRsp::_internal_add_member_info_list() {
  return _impl_.member_info_list_.Add();
}
inline ::SnowK::UserInfo* GetChatSessionMemberRsp::add_member_info_list() {
  ::SnowK::UserInfo* _add = _internal_add_member_info_list();
  // @@protoc_insertion_point(field_add:SnowK.GetChatSessionMemberRsp.member_info_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SnowK::UserInfo >&
GetChatSessionMemberRsp::member_info_list() const {
  // @@protoc_insertion_point(field_list:SnowK.GetChatSessionMemberRsp.member_info_list)
  return _impl_.member_info_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SnowK

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_friend_2eproto
