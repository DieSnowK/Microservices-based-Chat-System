// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notify.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_notify_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_notify_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_notify_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_notify_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_notify_2eproto;
namespace SnowK {
class NotifyFriendAddApply;
struct NotifyFriendAddApplyDefaultTypeInternal;
extern NotifyFriendAddApplyDefaultTypeInternal _NotifyFriendAddApply_default_instance_;
class NotifyFriendAddProcess;
struct NotifyFriendAddProcessDefaultTypeInternal;
extern NotifyFriendAddProcessDefaultTypeInternal _NotifyFriendAddProcess_default_instance_;
class NotifyFriendRemove;
struct NotifyFriendRemoveDefaultTypeInternal;
extern NotifyFriendRemoveDefaultTypeInternal _NotifyFriendRemove_default_instance_;
class NotifyMessage;
struct NotifyMessageDefaultTypeInternal;
extern NotifyMessageDefaultTypeInternal _NotifyMessage_default_instance_;
class NotifyNewChatSession;
struct NotifyNewChatSessionDefaultTypeInternal;
extern NotifyNewChatSessionDefaultTypeInternal _NotifyNewChatSession_default_instance_;
class NotifyNewMessage;
struct NotifyNewMessageDefaultTypeInternal;
extern NotifyNewMessageDefaultTypeInternal _NotifyNewMessage_default_instance_;
}  // namespace SnowK
PROTOBUF_NAMESPACE_OPEN
template<> ::SnowK::NotifyFriendAddApply* Arena::CreateMaybeMessage<::SnowK::NotifyFriendAddApply>(Arena*);
template<> ::SnowK::NotifyFriendAddProcess* Arena::CreateMaybeMessage<::SnowK::NotifyFriendAddProcess>(Arena*);
template<> ::SnowK::NotifyFriendRemove* Arena::CreateMaybeMessage<::SnowK::NotifyFriendRemove>(Arena*);
template<> ::SnowK::NotifyMessage* Arena::CreateMaybeMessage<::SnowK::NotifyMessage>(Arena*);
template<> ::SnowK::NotifyNewChatSession* Arena::CreateMaybeMessage<::SnowK::NotifyNewChatSession>(Arena*);
template<> ::SnowK::NotifyNewMessage* Arena::CreateMaybeMessage<::SnowK::NotifyNewMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SnowK {

enum NotifyType : int {
  FRIEND_ADD_APPLY_NOTIFY = 0,
  FRIEND_ADD_PROCESS_NOTIFY = 1,
  CHAT_SESSION_CREATE_NOTIFY = 2,
  CHAT_MESSAGE_NOTIFY = 3,
  FRIEND_REMOVE_NOTIFY = 4,
  NotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NotifyType_IsValid(int value);
constexpr NotifyType NotifyType_MIN = FRIEND_ADD_APPLY_NOTIFY;
constexpr NotifyType NotifyType_MAX = FRIEND_REMOVE_NOTIFY;
constexpr int NotifyType_ARRAYSIZE = NotifyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NotifyType_descriptor();
template<typename T>
inline const std::string& NotifyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NotifyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NotifyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NotifyType_descriptor(), enum_t_value);
}
inline bool NotifyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NotifyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NotifyType>(
    NotifyType_descriptor(), name, value);
}
// ===================================================================

class NotifyFriendAddApply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.NotifyFriendAddApply) */ {
 public:
  inline NotifyFriendAddApply() : NotifyFriendAddApply(nullptr) {}
  ~NotifyFriendAddApply() override;
  explicit PROTOBUF_CONSTEXPR NotifyFriendAddApply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyFriendAddApply(const NotifyFriendAddApply& from);
  NotifyFriendAddApply(NotifyFriendAddApply&& from) noexcept
    : NotifyFriendAddApply() {
    *this = ::std::move(from);
  }

  inline NotifyFriendAddApply& operator=(const NotifyFriendAddApply& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyFriendAddApply& operator=(NotifyFriendAddApply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyFriendAddApply& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyFriendAddApply* internal_default_instance() {
    return reinterpret_cast<const NotifyFriendAddApply*>(
               &_NotifyFriendAddApply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NotifyFriendAddApply& a, NotifyFriendAddApply& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyFriendAddApply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyFriendAddApply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyFriendAddApply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyFriendAddApply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyFriendAddApply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotifyFriendAddApply& from) {
    NotifyFriendAddApply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyFriendAddApply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.NotifyFriendAddApply";
  }
  protected:
  explicit NotifyFriendAddApply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // .SnowK.UserInfo user_info = 1;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::SnowK::UserInfo& user_info() const;
  PROTOBUF_NODISCARD ::SnowK::UserInfo* release_user_info();
  ::SnowK::UserInfo* mutable_user_info();
  void set_allocated_user_info(::SnowK::UserInfo* user_info);
  private:
  const ::SnowK::UserInfo& _internal_user_info() const;
  ::SnowK::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::SnowK::UserInfo* user_info);
  ::SnowK::UserInfo* unsafe_arena_release_user_info();

  // @@protoc_insertion_point(class_scope:SnowK.NotifyFriendAddApply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::SnowK::UserInfo* user_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notify_2eproto;
};
// -------------------------------------------------------------------

class NotifyFriendAddProcess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.NotifyFriendAddProcess) */ {
 public:
  inline NotifyFriendAddProcess() : NotifyFriendAddProcess(nullptr) {}
  ~NotifyFriendAddProcess() override;
  explicit PROTOBUF_CONSTEXPR NotifyFriendAddProcess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyFriendAddProcess(const NotifyFriendAddProcess& from);
  NotifyFriendAddProcess(NotifyFriendAddProcess&& from) noexcept
    : NotifyFriendAddProcess() {
    *this = ::std::move(from);
  }

  inline NotifyFriendAddProcess& operator=(const NotifyFriendAddProcess& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyFriendAddProcess& operator=(NotifyFriendAddProcess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyFriendAddProcess& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyFriendAddProcess* internal_default_instance() {
    return reinterpret_cast<const NotifyFriendAddProcess*>(
               &_NotifyFriendAddProcess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NotifyFriendAddProcess& a, NotifyFriendAddProcess& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyFriendAddProcess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyFriendAddProcess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyFriendAddProcess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyFriendAddProcess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyFriendAddProcess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotifyFriendAddProcess& from) {
    NotifyFriendAddProcess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyFriendAddProcess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.NotifyFriendAddProcess";
  }
  protected:
  explicit NotifyFriendAddProcess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 2,
    kAgreeFieldNumber = 1,
  };
  // .SnowK.UserInfo user_info = 2;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::SnowK::UserInfo& user_info() const;
  PROTOBUF_NODISCARD ::SnowK::UserInfo* release_user_info();
  ::SnowK::UserInfo* mutable_user_info();
  void set_allocated_user_info(::SnowK::UserInfo* user_info);
  private:
  const ::SnowK::UserInfo& _internal_user_info() const;
  ::SnowK::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::SnowK::UserInfo* user_info);
  ::SnowK::UserInfo* unsafe_arena_release_user_info();

  // bool agree = 1;
  void clear_agree();
  bool agree() const;
  void set_agree(bool value);
  private:
  bool _internal_agree() const;
  void _internal_set_agree(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SnowK.NotifyFriendAddProcess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::SnowK::UserInfo* user_info_;
    bool agree_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notify_2eproto;
};
// -------------------------------------------------------------------

class NotifyFriendRemove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.NotifyFriendRemove) */ {
 public:
  inline NotifyFriendRemove() : NotifyFriendRemove(nullptr) {}
  ~NotifyFriendRemove() override;
  explicit PROTOBUF_CONSTEXPR NotifyFriendRemove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyFriendRemove(const NotifyFriendRemove& from);
  NotifyFriendRemove(NotifyFriendRemove&& from) noexcept
    : NotifyFriendRemove() {
    *this = ::std::move(from);
  }

  inline NotifyFriendRemove& operator=(const NotifyFriendRemove& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyFriendRemove& operator=(NotifyFriendRemove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyFriendRemove& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyFriendRemove* internal_default_instance() {
    return reinterpret_cast<const NotifyFriendRemove*>(
               &_NotifyFriendRemove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NotifyFriendRemove& a, NotifyFriendRemove& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyFriendRemove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyFriendRemove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyFriendRemove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyFriendRemove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyFriendRemove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotifyFriendRemove& from) {
    NotifyFriendRemove::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyFriendRemove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.NotifyFriendRemove";
  }
  protected:
  explicit NotifyFriendRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:SnowK.NotifyFriendRemove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notify_2eproto;
};
// -------------------------------------------------------------------

class NotifyNewChatSession final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.NotifyNewChatSession) */ {
 public:
  inline NotifyNewChatSession() : NotifyNewChatSession(nullptr) {}
  ~NotifyNewChatSession() override;
  explicit PROTOBUF_CONSTEXPR NotifyNewChatSession(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyNewChatSession(const NotifyNewChatSession& from);
  NotifyNewChatSession(NotifyNewChatSession&& from) noexcept
    : NotifyNewChatSession() {
    *this = ::std::move(from);
  }

  inline NotifyNewChatSession& operator=(const NotifyNewChatSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyNewChatSession& operator=(NotifyNewChatSession&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyNewChatSession& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyNewChatSession* internal_default_instance() {
    return reinterpret_cast<const NotifyNewChatSession*>(
               &_NotifyNewChatSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NotifyNewChatSession& a, NotifyNewChatSession& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyNewChatSession* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyNewChatSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyNewChatSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyNewChatSession>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyNewChatSession& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotifyNewChatSession& from) {
    NotifyNewChatSession::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyNewChatSession* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.NotifyNewChatSession";
  }
  protected:
  explicit NotifyNewChatSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatSessionInfoFieldNumber = 1,
  };
  // .SnowK.ChatSessionInfo chat_session_info = 1;
  bool has_chat_session_info() const;
  private:
  bool _internal_has_chat_session_info() const;
  public:
  void clear_chat_session_info();
  const ::SnowK::ChatSessionInfo& chat_session_info() const;
  PROTOBUF_NODISCARD ::SnowK::ChatSessionInfo* release_chat_session_info();
  ::SnowK::ChatSessionInfo* mutable_chat_session_info();
  void set_allocated_chat_session_info(::SnowK::ChatSessionInfo* chat_session_info);
  private:
  const ::SnowK::ChatSessionInfo& _internal_chat_session_info() const;
  ::SnowK::ChatSessionInfo* _internal_mutable_chat_session_info();
  public:
  void unsafe_arena_set_allocated_chat_session_info(
      ::SnowK::ChatSessionInfo* chat_session_info);
  ::SnowK::ChatSessionInfo* unsafe_arena_release_chat_session_info();

  // @@protoc_insertion_point(class_scope:SnowK.NotifyNewChatSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::SnowK::ChatSessionInfo* chat_session_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notify_2eproto;
};
// -------------------------------------------------------------------

class NotifyNewMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.NotifyNewMessage) */ {
 public:
  inline NotifyNewMessage() : NotifyNewMessage(nullptr) {}
  ~NotifyNewMessage() override;
  explicit PROTOBUF_CONSTEXPR NotifyNewMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyNewMessage(const NotifyNewMessage& from);
  NotifyNewMessage(NotifyNewMessage&& from) noexcept
    : NotifyNewMessage() {
    *this = ::std::move(from);
  }

  inline NotifyNewMessage& operator=(const NotifyNewMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyNewMessage& operator=(NotifyNewMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyNewMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyNewMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyNewMessage*>(
               &_NotifyNewMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NotifyNewMessage& a, NotifyNewMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyNewMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyNewMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyNewMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyNewMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyNewMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotifyNewMessage& from) {
    NotifyNewMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyNewMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.NotifyNewMessage";
  }
  protected:
  explicit NotifyNewMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageInfoFieldNumber = 1,
  };
  // .SnowK.MessageInfo message_info = 1;
  bool has_message_info() const;
  private:
  bool _internal_has_message_info() const;
  public:
  void clear_message_info();
  const ::SnowK::MessageInfo& message_info() const;
  PROTOBUF_NODISCARD ::SnowK::MessageInfo* release_message_info();
  ::SnowK::MessageInfo* mutable_message_info();
  void set_allocated_message_info(::SnowK::MessageInfo* message_info);
  private:
  const ::SnowK::MessageInfo& _internal_message_info() const;
  ::SnowK::MessageInfo* _internal_mutable_message_info();
  public:
  void unsafe_arena_set_allocated_message_info(
      ::SnowK::MessageInfo* message_info);
  ::SnowK::MessageInfo* unsafe_arena_release_message_info();

  // @@protoc_insertion_point(class_scope:SnowK.NotifyNewMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::SnowK::MessageInfo* message_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notify_2eproto;
};
// -------------------------------------------------------------------

class NotifyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnowK.NotifyMessage) */ {
 public:
  inline NotifyMessage() : NotifyMessage(nullptr) {}
  ~NotifyMessage() override;
  explicit PROTOBUF_CONSTEXPR NotifyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyMessage(const NotifyMessage& from);
  NotifyMessage(NotifyMessage&& from) noexcept
    : NotifyMessage() {
    *this = ::std::move(from);
  }

  inline NotifyMessage& operator=(const NotifyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyMessage& operator=(NotifyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyMessage& default_instance() {
    return *internal_default_instance();
  }
  enum NotifyRemarksCase {
    kFriendAddApply = 3,
    kFriendProcessResult = 4,
    kFriendRemove = 7,
    kNewChatSessionInfo = 5,
    kNewMessageInfo = 6,
    NOTIFY_REMARKS_NOT_SET = 0,
  };

  static inline const NotifyMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyMessage*>(
               &_NotifyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NotifyMessage& a, NotifyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotifyMessage& from) {
    NotifyMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnowK.NotifyMessage";
  }
  protected:
  explicit NotifyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotifyEventIdFieldNumber = 1,
    kNotifyTypeFieldNumber = 2,
    kFriendAddApplyFieldNumber = 3,
    kFriendProcessResultFieldNumber = 4,
    kFriendRemoveFieldNumber = 7,
    kNewChatSessionInfoFieldNumber = 5,
    kNewMessageInfoFieldNumber = 6,
  };
  // optional string notify_event_id = 1;
  bool has_notify_event_id() const;
  private:
  bool _internal_has_notify_event_id() const;
  public:
  void clear_notify_event_id();
  const std::string& notify_event_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notify_event_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notify_event_id();
  PROTOBUF_NODISCARD std::string* release_notify_event_id();
  void set_allocated_notify_event_id(std::string* notify_event_id);
  private:
  const std::string& _internal_notify_event_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notify_event_id(const std::string& value);
  std::string* _internal_mutable_notify_event_id();
  public:

  // .SnowK.NotifyType notify_type = 2;
  void clear_notify_type();
  ::SnowK::NotifyType notify_type() const;
  void set_notify_type(::SnowK::NotifyType value);
  private:
  ::SnowK::NotifyType _internal_notify_type() const;
  void _internal_set_notify_type(::SnowK::NotifyType value);
  public:

  // .SnowK.NotifyFriendAddApply friend_add_apply = 3;
  bool has_friend_add_apply() const;
  private:
  bool _internal_has_friend_add_apply() const;
  public:
  void clear_friend_add_apply();
  const ::SnowK::NotifyFriendAddApply& friend_add_apply() const;
  PROTOBUF_NODISCARD ::SnowK::NotifyFriendAddApply* release_friend_add_apply();
  ::SnowK::NotifyFriendAddApply* mutable_friend_add_apply();
  void set_allocated_friend_add_apply(::SnowK::NotifyFriendAddApply* friend_add_apply);
  private:
  const ::SnowK::NotifyFriendAddApply& _internal_friend_add_apply() const;
  ::SnowK::NotifyFriendAddApply* _internal_mutable_friend_add_apply();
  public:
  void unsafe_arena_set_allocated_friend_add_apply(
      ::SnowK::NotifyFriendAddApply* friend_add_apply);
  ::SnowK::NotifyFriendAddApply* unsafe_arena_release_friend_add_apply();

  // .SnowK.NotifyFriendAddProcess friend_process_result = 4;
  bool has_friend_process_result() const;
  private:
  bool _internal_has_friend_process_result() const;
  public:
  void clear_friend_process_result();
  const ::SnowK::NotifyFriendAddProcess& friend_process_result() const;
  PROTOBUF_NODISCARD ::SnowK::NotifyFriendAddProcess* release_friend_process_result();
  ::SnowK::NotifyFriendAddProcess* mutable_friend_process_result();
  void set_allocated_friend_process_result(::SnowK::NotifyFriendAddProcess* friend_process_result);
  private:
  const ::SnowK::NotifyFriendAddProcess& _internal_friend_process_result() const;
  ::SnowK::NotifyFriendAddProcess* _internal_mutable_friend_process_result();
  public:
  void unsafe_arena_set_allocated_friend_process_result(
      ::SnowK::NotifyFriendAddProcess* friend_process_result);
  ::SnowK::NotifyFriendAddProcess* unsafe_arena_release_friend_process_result();

  // .SnowK.NotifyFriendRemove friend_remove = 7;
  bool has_friend_remove() const;
  private:
  bool _internal_has_friend_remove() const;
  public:
  void clear_friend_remove();
  const ::SnowK::NotifyFriendRemove& friend_remove() const;
  PROTOBUF_NODISCARD ::SnowK::NotifyFriendRemove* release_friend_remove();
  ::SnowK::NotifyFriendRemove* mutable_friend_remove();
  void set_allocated_friend_remove(::SnowK::NotifyFriendRemove* friend_remove);
  private:
  const ::SnowK::NotifyFriendRemove& _internal_friend_remove() const;
  ::SnowK::NotifyFriendRemove* _internal_mutable_friend_remove();
  public:
  void unsafe_arena_set_allocated_friend_remove(
      ::SnowK::NotifyFriendRemove* friend_remove);
  ::SnowK::NotifyFriendRemove* unsafe_arena_release_friend_remove();

  // .SnowK.NotifyNewChatSession new_chat_session_info = 5;
  bool has_new_chat_session_info() const;
  private:
  bool _internal_has_new_chat_session_info() const;
  public:
  void clear_new_chat_session_info();
  const ::SnowK::NotifyNewChatSession& new_chat_session_info() const;
  PROTOBUF_NODISCARD ::SnowK::NotifyNewChatSession* release_new_chat_session_info();
  ::SnowK::NotifyNewChatSession* mutable_new_chat_session_info();
  void set_allocated_new_chat_session_info(::SnowK::NotifyNewChatSession* new_chat_session_info);
  private:
  const ::SnowK::NotifyNewChatSession& _internal_new_chat_session_info() const;
  ::SnowK::NotifyNewChatSession* _internal_mutable_new_chat_session_info();
  public:
  void unsafe_arena_set_allocated_new_chat_session_info(
      ::SnowK::NotifyNewChatSession* new_chat_session_info);
  ::SnowK::NotifyNewChatSession* unsafe_arena_release_new_chat_session_info();

  // .SnowK.NotifyNewMessage new_message_info = 6;
  bool has_new_message_info() const;
  private:
  bool _internal_has_new_message_info() const;
  public:
  void clear_new_message_info();
  const ::SnowK::NotifyNewMessage& new_message_info() const;
  PROTOBUF_NODISCARD ::SnowK::NotifyNewMessage* release_new_message_info();
  ::SnowK::NotifyNewMessage* mutable_new_message_info();
  void set_allocated_new_message_info(::SnowK::NotifyNewMessage* new_message_info);
  private:
  const ::SnowK::NotifyNewMessage& _internal_new_message_info() const;
  ::SnowK::NotifyNewMessage* _internal_mutable_new_message_info();
  public:
  void unsafe_arena_set_allocated_new_message_info(
      ::SnowK::NotifyNewMessage* new_message_info);
  ::SnowK::NotifyNewMessage* unsafe_arena_release_new_message_info();

  void clear_notify_remarks();
  NotifyRemarksCase notify_remarks_case() const;
  // @@protoc_insertion_point(class_scope:SnowK.NotifyMessage)
 private:
  class _Internal;
  void set_has_friend_add_apply();
  void set_has_friend_process_result();
  void set_has_friend_remove();
  void set_has_new_chat_session_info();
  void set_has_new_message_info();

  inline bool has_notify_remarks() const;
  inline void clear_has_notify_remarks();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notify_event_id_;
    int notify_type_;
    union NotifyRemarksUnion {
      constexpr NotifyRemarksUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::SnowK::NotifyFriendAddApply* friend_add_apply_;
      ::SnowK::NotifyFriendAddProcess* friend_process_result_;
      ::SnowK::NotifyFriendRemove* friend_remove_;
      ::SnowK::NotifyNewChatSession* new_chat_session_info_;
      ::SnowK::NotifyNewMessage* new_message_info_;
    } notify_remarks_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notify_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NotifyFriendAddApply

// .SnowK.UserInfo user_info = 1;
inline bool NotifyFriendAddApply::_internal_has_user_info() const {
  return this != internal_default_instance() && _impl_.user_info_ != nullptr;
}
inline bool NotifyFriendAddApply::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::SnowK::UserInfo& NotifyFriendAddApply::_internal_user_info() const {
  const ::SnowK::UserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::SnowK::UserInfo&>(
      ::SnowK::_UserInfo_default_instance_);
}
inline const ::SnowK::UserInfo& NotifyFriendAddApply::user_info() const {
  // @@protoc_insertion_point(field_get:SnowK.NotifyFriendAddApply.user_info)
  return _internal_user_info();
}
inline void NotifyFriendAddApply::unsafe_arena_set_allocated_user_info(
    ::SnowK::UserInfo* user_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SnowK.NotifyFriendAddApply.user_info)
}
inline ::SnowK::UserInfo* NotifyFriendAddApply::release_user_info() {
  
  ::SnowK::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SnowK::UserInfo* NotifyFriendAddApply::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:SnowK.NotifyFriendAddApply.user_info)
  
  ::SnowK::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::SnowK::UserInfo* NotifyFriendAddApply::_internal_mutable_user_info() {
  
  if (_impl_.user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::SnowK::UserInfo>(GetArenaForAllocation());
    _impl_.user_info_ = p;
  }
  return _impl_.user_info_;
}
inline ::SnowK::UserInfo* NotifyFriendAddApply::mutable_user_info() {
  ::SnowK::UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:SnowK.NotifyFriendAddApply.user_info)
  return _msg;
}
inline void NotifyFriendAddApply::set_allocated_user_info(::SnowK::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info));
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:SnowK.NotifyFriendAddApply.user_info)
}

// -------------------------------------------------------------------

// NotifyFriendAddProcess

// bool agree = 1;
inline void NotifyFriendAddProcess::clear_agree() {
  _impl_.agree_ = false;
}
inline bool NotifyFriendAddProcess::_internal_agree() const {
  return _impl_.agree_;
}
inline bool NotifyFriendAddProcess::agree() const {
  // @@protoc_insertion_point(field_get:SnowK.NotifyFriendAddProcess.agree)
  return _internal_agree();
}
inline void NotifyFriendAddProcess::_internal_set_agree(bool value) {
  
  _impl_.agree_ = value;
}
inline void NotifyFriendAddProcess::set_agree(bool value) {
  _internal_set_agree(value);
  // @@protoc_insertion_point(field_set:SnowK.NotifyFriendAddProcess.agree)
}

// .SnowK.UserInfo user_info = 2;
inline bool NotifyFriendAddProcess::_internal_has_user_info() const {
  return this != internal_default_instance() && _impl_.user_info_ != nullptr;
}
inline bool NotifyFriendAddProcess::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::SnowK::UserInfo& NotifyFriendAddProcess::_internal_user_info() const {
  const ::SnowK::UserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::SnowK::UserInfo&>(
      ::SnowK::_UserInfo_default_instance_);
}
inline const ::SnowK::UserInfo& NotifyFriendAddProcess::user_info() const {
  // @@protoc_insertion_point(field_get:SnowK.NotifyFriendAddProcess.user_info)
  return _internal_user_info();
}
inline void NotifyFriendAddProcess::unsafe_arena_set_allocated_user_info(
    ::SnowK::UserInfo* user_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SnowK.NotifyFriendAddProcess.user_info)
}
inline ::SnowK::UserInfo* NotifyFriendAddProcess::release_user_info() {
  
  ::SnowK::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SnowK::UserInfo* NotifyFriendAddProcess::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:SnowK.NotifyFriendAddProcess.user_info)
  
  ::SnowK::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::SnowK::UserInfo* NotifyFriendAddProcess::_internal_mutable_user_info() {
  
  if (_impl_.user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::SnowK::UserInfo>(GetArenaForAllocation());
    _impl_.user_info_ = p;
  }
  return _impl_.user_info_;
}
inline ::SnowK::UserInfo* NotifyFriendAddProcess::mutable_user_info() {
  ::SnowK::UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:SnowK.NotifyFriendAddProcess.user_info)
  return _msg;
}
inline void NotifyFriendAddProcess::set_allocated_user_info(::SnowK::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info));
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:SnowK.NotifyFriendAddProcess.user_info)
}

// -------------------------------------------------------------------

// NotifyFriendRemove

// string user_id = 1;
inline void NotifyFriendRemove::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& NotifyFriendRemove::user_id() const {
  // @@protoc_insertion_point(field_get:SnowK.NotifyFriendRemove.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotifyFriendRemove::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.NotifyFriendRemove.user_id)
}
inline std::string* NotifyFriendRemove::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:SnowK.NotifyFriendRemove.user_id)
  return _s;
}
inline const std::string& NotifyFriendRemove::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void NotifyFriendRemove::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* NotifyFriendRemove::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* NotifyFriendRemove::release_user_id() {
  // @@protoc_insertion_point(field_release:SnowK.NotifyFriendRemove.user_id)
  return _impl_.user_id_.Release();
}
inline void NotifyFriendRemove::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.NotifyFriendRemove.user_id)
}

// -------------------------------------------------------------------

// NotifyNewChatSession

// .SnowK.ChatSessionInfo chat_session_info = 1;
inline bool NotifyNewChatSession::_internal_has_chat_session_info() const {
  return this != internal_default_instance() && _impl_.chat_session_info_ != nullptr;
}
inline bool NotifyNewChatSession::has_chat_session_info() const {
  return _internal_has_chat_session_info();
}
inline const ::SnowK::ChatSessionInfo& NotifyNewChatSession::_internal_chat_session_info() const {
  const ::SnowK::ChatSessionInfo* p = _impl_.chat_session_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::SnowK::ChatSessionInfo&>(
      ::SnowK::_ChatSessionInfo_default_instance_);
}
inline const ::SnowK::ChatSessionInfo& NotifyNewChatSession::chat_session_info() const {
  // @@protoc_insertion_point(field_get:SnowK.NotifyNewChatSession.chat_session_info)
  return _internal_chat_session_info();
}
inline void NotifyNewChatSession::unsafe_arena_set_allocated_chat_session_info(
    ::SnowK::ChatSessionInfo* chat_session_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chat_session_info_);
  }
  _impl_.chat_session_info_ = chat_session_info;
  if (chat_session_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SnowK.NotifyNewChatSession.chat_session_info)
}
inline ::SnowK::ChatSessionInfo* NotifyNewChatSession::release_chat_session_info() {
  
  ::SnowK::ChatSessionInfo* temp = _impl_.chat_session_info_;
  _impl_.chat_session_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SnowK::ChatSessionInfo* NotifyNewChatSession::unsafe_arena_release_chat_session_info() {
  // @@protoc_insertion_point(field_release:SnowK.NotifyNewChatSession.chat_session_info)
  
  ::SnowK::ChatSessionInfo* temp = _impl_.chat_session_info_;
  _impl_.chat_session_info_ = nullptr;
  return temp;
}
inline ::SnowK::ChatSessionInfo* NotifyNewChatSession::_internal_mutable_chat_session_info() {
  
  if (_impl_.chat_session_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::SnowK::ChatSessionInfo>(GetArenaForAllocation());
    _impl_.chat_session_info_ = p;
  }
  return _impl_.chat_session_info_;
}
inline ::SnowK::ChatSessionInfo* NotifyNewChatSession::mutable_chat_session_info() {
  ::SnowK::ChatSessionInfo* _msg = _internal_mutable_chat_session_info();
  // @@protoc_insertion_point(field_mutable:SnowK.NotifyNewChatSession.chat_session_info)
  return _msg;
}
inline void NotifyNewChatSession::set_allocated_chat_session_info(::SnowK::ChatSessionInfo* chat_session_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chat_session_info_);
  }
  if (chat_session_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat_session_info));
    if (message_arena != submessage_arena) {
      chat_session_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_session_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chat_session_info_ = chat_session_info;
  // @@protoc_insertion_point(field_set_allocated:SnowK.NotifyNewChatSession.chat_session_info)
}

// -------------------------------------------------------------------

// NotifyNewMessage

// .SnowK.MessageInfo message_info = 1;
inline bool NotifyNewMessage::_internal_has_message_info() const {
  return this != internal_default_instance() && _impl_.message_info_ != nullptr;
}
inline bool NotifyNewMessage::has_message_info() const {
  return _internal_has_message_info();
}
inline const ::SnowK::MessageInfo& NotifyNewMessage::_internal_message_info() const {
  const ::SnowK::MessageInfo* p = _impl_.message_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::SnowK::MessageInfo&>(
      ::SnowK::_MessageInfo_default_instance_);
}
inline const ::SnowK::MessageInfo& NotifyNewMessage::message_info() const {
  // @@protoc_insertion_point(field_get:SnowK.NotifyNewMessage.message_info)
  return _internal_message_info();
}
inline void NotifyNewMessage::unsafe_arena_set_allocated_message_info(
    ::SnowK::MessageInfo* message_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_info_);
  }
  _impl_.message_info_ = message_info;
  if (message_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SnowK.NotifyNewMessage.message_info)
}
inline ::SnowK::MessageInfo* NotifyNewMessage::release_message_info() {
  
  ::SnowK::MessageInfo* temp = _impl_.message_info_;
  _impl_.message_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SnowK::MessageInfo* NotifyNewMessage::unsafe_arena_release_message_info() {
  // @@protoc_insertion_point(field_release:SnowK.NotifyNewMessage.message_info)
  
  ::SnowK::MessageInfo* temp = _impl_.message_info_;
  _impl_.message_info_ = nullptr;
  return temp;
}
inline ::SnowK::MessageInfo* NotifyNewMessage::_internal_mutable_message_info() {
  
  if (_impl_.message_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::SnowK::MessageInfo>(GetArenaForAllocation());
    _impl_.message_info_ = p;
  }
  return _impl_.message_info_;
}
inline ::SnowK::MessageInfo* NotifyNewMessage::mutable_message_info() {
  ::SnowK::MessageInfo* _msg = _internal_mutable_message_info();
  // @@protoc_insertion_point(field_mutable:SnowK.NotifyNewMessage.message_info)
  return _msg;
}
inline void NotifyNewMessage::set_allocated_message_info(::SnowK::MessageInfo* message_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_info_);
  }
  if (message_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_info));
    if (message_arena != submessage_arena) {
      message_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.message_info_ = message_info;
  // @@protoc_insertion_point(field_set_allocated:SnowK.NotifyNewMessage.message_info)
}

// -------------------------------------------------------------------

// NotifyMessage

// optional string notify_event_id = 1;
inline bool NotifyMessage::_internal_has_notify_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NotifyMessage::has_notify_event_id() const {
  return _internal_has_notify_event_id();
}
inline void NotifyMessage::clear_notify_event_id() {
  _impl_.notify_event_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotifyMessage::notify_event_id() const {
  // @@protoc_insertion_point(field_get:SnowK.NotifyMessage.notify_event_id)
  return _internal_notify_event_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotifyMessage::set_notify_event_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.notify_event_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnowK.NotifyMessage.notify_event_id)
}
inline std::string* NotifyMessage::mutable_notify_event_id() {
  std::string* _s = _internal_mutable_notify_event_id();
  // @@protoc_insertion_point(field_mutable:SnowK.NotifyMessage.notify_event_id)
  return _s;
}
inline const std::string& NotifyMessage::_internal_notify_event_id() const {
  return _impl_.notify_event_id_.Get();
}
inline void NotifyMessage::_internal_set_notify_event_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.notify_event_id_.Set(value, GetArenaForAllocation());
}
inline std::string* NotifyMessage::_internal_mutable_notify_event_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.notify_event_id_.Mutable(GetArenaForAllocation());
}
inline std::string* NotifyMessage::release_notify_event_id() {
  // @@protoc_insertion_point(field_release:SnowK.NotifyMessage.notify_event_id)
  if (!_internal_has_notify_event_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.notify_event_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.notify_event_id_.IsDefault()) {
    _impl_.notify_event_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NotifyMessage::set_allocated_notify_event_id(std::string* notify_event_id) {
  if (notify_event_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.notify_event_id_.SetAllocated(notify_event_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.notify_event_id_.IsDefault()) {
    _impl_.notify_event_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnowK.NotifyMessage.notify_event_id)
}

// .SnowK.NotifyType notify_type = 2;
inline void NotifyMessage::clear_notify_type() {
  _impl_.notify_type_ = 0;
}
inline ::SnowK::NotifyType NotifyMessage::_internal_notify_type() const {
  return static_cast< ::SnowK::NotifyType >(_impl_.notify_type_);
}
inline ::SnowK::NotifyType NotifyMessage::notify_type() const {
  // @@protoc_insertion_point(field_get:SnowK.NotifyMessage.notify_type)
  return _internal_notify_type();
}
inline void NotifyMessage::_internal_set_notify_type(::SnowK::NotifyType value) {
  
  _impl_.notify_type_ = value;
}
inline void NotifyMessage::set_notify_type(::SnowK::NotifyType value) {
  _internal_set_notify_type(value);
  // @@protoc_insertion_point(field_set:SnowK.NotifyMessage.notify_type)
}

// .SnowK.NotifyFriendAddApply friend_add_apply = 3;
inline bool NotifyMessage::_internal_has_friend_add_apply() const {
  return notify_remarks_case() == kFriendAddApply;
}
inline bool NotifyMessage::has_friend_add_apply() const {
  return _internal_has_friend_add_apply();
}
inline void NotifyMessage::set_has_friend_add_apply() {
  _impl_._oneof_case_[0] = kFriendAddApply;
}
inline void NotifyMessage::clear_friend_add_apply() {
  if (_internal_has_friend_add_apply()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.notify_remarks_.friend_add_apply_;
    }
    clear_has_notify_remarks();
  }
}
inline ::SnowK::NotifyFriendAddApply* NotifyMessage::release_friend_add_apply() {
  // @@protoc_insertion_point(field_release:SnowK.NotifyMessage.friend_add_apply)
  if (_internal_has_friend_add_apply()) {
    clear_has_notify_remarks();
    ::SnowK::NotifyFriendAddApply* temp = _impl_.notify_remarks_.friend_add_apply_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.notify_remarks_.friend_add_apply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SnowK::NotifyFriendAddApply& NotifyMessage::_internal_friend_add_apply() const {
  return _internal_has_friend_add_apply()
      ? *_impl_.notify_remarks_.friend_add_apply_
      : reinterpret_cast< ::SnowK::NotifyFriendAddApply&>(::SnowK::_NotifyFriendAddApply_default_instance_);
}
inline const ::SnowK::NotifyFriendAddApply& NotifyMessage::friend_add_apply() const {
  // @@protoc_insertion_point(field_get:SnowK.NotifyMessage.friend_add_apply)
  return _internal_friend_add_apply();
}
inline ::SnowK::NotifyFriendAddApply* NotifyMessage::unsafe_arena_release_friend_add_apply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SnowK.NotifyMessage.friend_add_apply)
  if (_internal_has_friend_add_apply()) {
    clear_has_notify_remarks();
    ::SnowK::NotifyFriendAddApply* temp = _impl_.notify_remarks_.friend_add_apply_;
    _impl_.notify_remarks_.friend_add_apply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NotifyMessage::unsafe_arena_set_allocated_friend_add_apply(::SnowK::NotifyFriendAddApply* friend_add_apply) {
  clear_notify_remarks();
  if (friend_add_apply) {
    set_has_friend_add_apply();
    _impl_.notify_remarks_.friend_add_apply_ = friend_add_apply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SnowK.NotifyMessage.friend_add_apply)
}
inline ::SnowK::NotifyFriendAddApply* NotifyMessage::_internal_mutable_friend_add_apply() {
  if (!_internal_has_friend_add_apply()) {
    clear_notify_remarks();
    set_has_friend_add_apply();
    _impl_.notify_remarks_.friend_add_apply_ = CreateMaybeMessage< ::SnowK::NotifyFriendAddApply >(GetArenaForAllocation());
  }
  return _impl_.notify_remarks_.friend_add_apply_;
}
inline ::SnowK::NotifyFriendAddApply* NotifyMessage::mutable_friend_add_apply() {
  ::SnowK::NotifyFriendAddApply* _msg = _internal_mutable_friend_add_apply();
  // @@protoc_insertion_point(field_mutable:SnowK.NotifyMessage.friend_add_apply)
  return _msg;
}

// .SnowK.NotifyFriendAddProcess friend_process_result = 4;
inline bool NotifyMessage::_internal_has_friend_process_result() const {
  return notify_remarks_case() == kFriendProcessResult;
}
inline bool NotifyMessage::has_friend_process_result() const {
  return _internal_has_friend_process_result();
}
inline void NotifyMessage::set_has_friend_process_result() {
  _impl_._oneof_case_[0] = kFriendProcessResult;
}
inline void NotifyMessage::clear_friend_process_result() {
  if (_internal_has_friend_process_result()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.notify_remarks_.friend_process_result_;
    }
    clear_has_notify_remarks();
  }
}
inline ::SnowK::NotifyFriendAddProcess* NotifyMessage::release_friend_process_result() {
  // @@protoc_insertion_point(field_release:SnowK.NotifyMessage.friend_process_result)
  if (_internal_has_friend_process_result()) {
    clear_has_notify_remarks();
    ::SnowK::NotifyFriendAddProcess* temp = _impl_.notify_remarks_.friend_process_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.notify_remarks_.friend_process_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SnowK::NotifyFriendAddProcess& NotifyMessage::_internal_friend_process_result() const {
  return _internal_has_friend_process_result()
      ? *_impl_.notify_remarks_.friend_process_result_
      : reinterpret_cast< ::SnowK::NotifyFriendAddProcess&>(::SnowK::_NotifyFriendAddProcess_default_instance_);
}
inline const ::SnowK::NotifyFriendAddProcess& NotifyMessage::friend_process_result() const {
  // @@protoc_insertion_point(field_get:SnowK.NotifyMessage.friend_process_result)
  return _internal_friend_process_result();
}
inline ::SnowK::NotifyFriendAddProcess* NotifyMessage::unsafe_arena_release_friend_process_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SnowK.NotifyMessage.friend_process_result)
  if (_internal_has_friend_process_result()) {
    clear_has_notify_remarks();
    ::SnowK::NotifyFriendAddProcess* temp = _impl_.notify_remarks_.friend_process_result_;
    _impl_.notify_remarks_.friend_process_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NotifyMessage::unsafe_arena_set_allocated_friend_process_result(::SnowK::NotifyFriendAddProcess* friend_process_result) {
  clear_notify_remarks();
  if (friend_process_result) {
    set_has_friend_process_result();
    _impl_.notify_remarks_.friend_process_result_ = friend_process_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SnowK.NotifyMessage.friend_process_result)
}
inline ::SnowK::NotifyFriendAddProcess* NotifyMessage::_internal_mutable_friend_process_result() {
  if (!_internal_has_friend_process_result()) {
    clear_notify_remarks();
    set_has_friend_process_result();
    _impl_.notify_remarks_.friend_process_result_ = CreateMaybeMessage< ::SnowK::NotifyFriendAddProcess >(GetArenaForAllocation());
  }
  return _impl_.notify_remarks_.friend_process_result_;
}
inline ::SnowK::NotifyFriendAddProcess* NotifyMessage::mutable_friend_process_result() {
  ::SnowK::NotifyFriendAddProcess* _msg = _internal_mutable_friend_process_result();
  // @@protoc_insertion_point(field_mutable:SnowK.NotifyMessage.friend_process_result)
  return _msg;
}

// .SnowK.NotifyFriendRemove friend_remove = 7;
inline bool NotifyMessage::_internal_has_friend_remove() const {
  return notify_remarks_case() == kFriendRemove;
}
inline bool NotifyMessage::has_friend_remove() const {
  return _internal_has_friend_remove();
}
inline void NotifyMessage::set_has_friend_remove() {
  _impl_._oneof_case_[0] = kFriendRemove;
}
inline void NotifyMessage::clear_friend_remove() {
  if (_internal_has_friend_remove()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.notify_remarks_.friend_remove_;
    }
    clear_has_notify_remarks();
  }
}
inline ::SnowK::NotifyFriendRemove* NotifyMessage::release_friend_remove() {
  // @@protoc_insertion_point(field_release:SnowK.NotifyMessage.friend_remove)
  if (_internal_has_friend_remove()) {
    clear_has_notify_remarks();
    ::SnowK::NotifyFriendRemove* temp = _impl_.notify_remarks_.friend_remove_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.notify_remarks_.friend_remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SnowK::NotifyFriendRemove& NotifyMessage::_internal_friend_remove() const {
  return _internal_has_friend_remove()
      ? *_impl_.notify_remarks_.friend_remove_
      : reinterpret_cast< ::SnowK::NotifyFriendRemove&>(::SnowK::_NotifyFriendRemove_default_instance_);
}
inline const ::SnowK::NotifyFriendRemove& NotifyMessage::friend_remove() const {
  // @@protoc_insertion_point(field_get:SnowK.NotifyMessage.friend_remove)
  return _internal_friend_remove();
}
inline ::SnowK::NotifyFriendRemove* NotifyMessage::unsafe_arena_release_friend_remove() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SnowK.NotifyMessage.friend_remove)
  if (_internal_has_friend_remove()) {
    clear_has_notify_remarks();
    ::SnowK::NotifyFriendRemove* temp = _impl_.notify_remarks_.friend_remove_;
    _impl_.notify_remarks_.friend_remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NotifyMessage::unsafe_arena_set_allocated_friend_remove(::SnowK::NotifyFriendRemove* friend_remove) {
  clear_notify_remarks();
  if (friend_remove) {
    set_has_friend_remove();
    _impl_.notify_remarks_.friend_remove_ = friend_remove;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SnowK.NotifyMessage.friend_remove)
}
inline ::SnowK::NotifyFriendRemove* NotifyMessage::_internal_mutable_friend_remove() {
  if (!_internal_has_friend_remove()) {
    clear_notify_remarks();
    set_has_friend_remove();
    _impl_.notify_remarks_.friend_remove_ = CreateMaybeMessage< ::SnowK::NotifyFriendRemove >(GetArenaForAllocation());
  }
  return _impl_.notify_remarks_.friend_remove_;
}
inline ::SnowK::NotifyFriendRemove* NotifyMessage::mutable_friend_remove() {
  ::SnowK::NotifyFriendRemove* _msg = _internal_mutable_friend_remove();
  // @@protoc_insertion_point(field_mutable:SnowK.NotifyMessage.friend_remove)
  return _msg;
}

// .SnowK.NotifyNewChatSession new_chat_session_info = 5;
inline bool NotifyMessage::_internal_has_new_chat_session_info() const {
  return notify_remarks_case() == kNewChatSessionInfo;
}
inline bool NotifyMessage::has_new_chat_session_info() const {
  return _internal_has_new_chat_session_info();
}
inline void NotifyMessage::set_has_new_chat_session_info() {
  _impl_._oneof_case_[0] = kNewChatSessionInfo;
}
inline void NotifyMessage::clear_new_chat_session_info() {
  if (_internal_has_new_chat_session_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.notify_remarks_.new_chat_session_info_;
    }
    clear_has_notify_remarks();
  }
}
inline ::SnowK::NotifyNewChatSession* NotifyMessage::release_new_chat_session_info() {
  // @@protoc_insertion_point(field_release:SnowK.NotifyMessage.new_chat_session_info)
  if (_internal_has_new_chat_session_info()) {
    clear_has_notify_remarks();
    ::SnowK::NotifyNewChatSession* temp = _impl_.notify_remarks_.new_chat_session_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.notify_remarks_.new_chat_session_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SnowK::NotifyNewChatSession& NotifyMessage::_internal_new_chat_session_info() const {
  return _internal_has_new_chat_session_info()
      ? *_impl_.notify_remarks_.new_chat_session_info_
      : reinterpret_cast< ::SnowK::NotifyNewChatSession&>(::SnowK::_NotifyNewChatSession_default_instance_);
}
inline const ::SnowK::NotifyNewChatSession& NotifyMessage::new_chat_session_info() const {
  // @@protoc_insertion_point(field_get:SnowK.NotifyMessage.new_chat_session_info)
  return _internal_new_chat_session_info();
}
inline ::SnowK::NotifyNewChatSession* NotifyMessage::unsafe_arena_release_new_chat_session_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SnowK.NotifyMessage.new_chat_session_info)
  if (_internal_has_new_chat_session_info()) {
    clear_has_notify_remarks();
    ::SnowK::NotifyNewChatSession* temp = _impl_.notify_remarks_.new_chat_session_info_;
    _impl_.notify_remarks_.new_chat_session_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NotifyMessage::unsafe_arena_set_allocated_new_chat_session_info(::SnowK::NotifyNewChatSession* new_chat_session_info) {
  clear_notify_remarks();
  if (new_chat_session_info) {
    set_has_new_chat_session_info();
    _impl_.notify_remarks_.new_chat_session_info_ = new_chat_session_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SnowK.NotifyMessage.new_chat_session_info)
}
inline ::SnowK::NotifyNewChatSession* NotifyMessage::_internal_mutable_new_chat_session_info() {
  if (!_internal_has_new_chat_session_info()) {
    clear_notify_remarks();
    set_has_new_chat_session_info();
    _impl_.notify_remarks_.new_chat_session_info_ = CreateMaybeMessage< ::SnowK::NotifyNewChatSession >(GetArenaForAllocation());
  }
  return _impl_.notify_remarks_.new_chat_session_info_;
}
inline ::SnowK::NotifyNewChatSession* NotifyMessage::mutable_new_chat_session_info() {
  ::SnowK::NotifyNewChatSession* _msg = _internal_mutable_new_chat_session_info();
  // @@protoc_insertion_point(field_mutable:SnowK.NotifyMessage.new_chat_session_info)
  return _msg;
}

// .SnowK.NotifyNewMessage new_message_info = 6;
inline bool NotifyMessage::_internal_has_new_message_info() const {
  return notify_remarks_case() == kNewMessageInfo;
}
inline bool NotifyMessage::has_new_message_info() const {
  return _internal_has_new_message_info();
}
inline void NotifyMessage::set_has_new_message_info() {
  _impl_._oneof_case_[0] = kNewMessageInfo;
}
inline void NotifyMessage::clear_new_message_info() {
  if (_internal_has_new_message_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.notify_remarks_.new_message_info_;
    }
    clear_has_notify_remarks();
  }
}
inline ::SnowK::NotifyNewMessage* NotifyMessage::release_new_message_info() {
  // @@protoc_insertion_point(field_release:SnowK.NotifyMessage.new_message_info)
  if (_internal_has_new_message_info()) {
    clear_has_notify_remarks();
    ::SnowK::NotifyNewMessage* temp = _impl_.notify_remarks_.new_message_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.notify_remarks_.new_message_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SnowK::NotifyNewMessage& NotifyMessage::_internal_new_message_info() const {
  return _internal_has_new_message_info()
      ? *_impl_.notify_remarks_.new_message_info_
      : reinterpret_cast< ::SnowK::NotifyNewMessage&>(::SnowK::_NotifyNewMessage_default_instance_);
}
inline const ::SnowK::NotifyNewMessage& NotifyMessage::new_message_info() const {
  // @@protoc_insertion_point(field_get:SnowK.NotifyMessage.new_message_info)
  return _internal_new_message_info();
}
inline ::SnowK::NotifyNewMessage* NotifyMessage::unsafe_arena_release_new_message_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SnowK.NotifyMessage.new_message_info)
  if (_internal_has_new_message_info()) {
    clear_has_notify_remarks();
    ::SnowK::NotifyNewMessage* temp = _impl_.notify_remarks_.new_message_info_;
    _impl_.notify_remarks_.new_message_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NotifyMessage::unsafe_arena_set_allocated_new_message_info(::SnowK::NotifyNewMessage* new_message_info) {
  clear_notify_remarks();
  if (new_message_info) {
    set_has_new_message_info();
    _impl_.notify_remarks_.new_message_info_ = new_message_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SnowK.NotifyMessage.new_message_info)
}
inline ::SnowK::NotifyNewMessage* NotifyMessage::_internal_mutable_new_message_info() {
  if (!_internal_has_new_message_info()) {
    clear_notify_remarks();
    set_has_new_message_info();
    _impl_.notify_remarks_.new_message_info_ = CreateMaybeMessage< ::SnowK::NotifyNewMessage >(GetArenaForAllocation());
  }
  return _impl_.notify_remarks_.new_message_info_;
}
inline ::SnowK::NotifyNewMessage* NotifyMessage::mutable_new_message_info() {
  ::SnowK::NotifyNewMessage* _msg = _internal_mutable_new_message_info();
  // @@protoc_insertion_point(field_mutable:SnowK.NotifyMessage.new_message_info)
  return _msg;
}

inline bool NotifyMessage::has_notify_remarks() const {
  return notify_remarks_case() != NOTIFY_REMARKS_NOT_SET;
}
inline void NotifyMessage::clear_has_notify_remarks() {
  _impl_._oneof_case_[0] = NOTIFY_REMARKS_NOT_SET;
}
inline NotifyMessage::NotifyRemarksCase NotifyMessage::notify_remarks_case() const {
  return NotifyMessage::NotifyRemarksCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SnowK

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SnowK::NotifyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SnowK::NotifyType>() {
  return ::SnowK::NotifyType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_notify_2eproto
