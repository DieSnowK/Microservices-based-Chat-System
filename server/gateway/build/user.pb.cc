// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#include "user.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SnowK {
PROTOBUF_CONSTEXPR UserRegisterReq::UserRegisterReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_code_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct UserRegisterReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserRegisterReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserRegisterReqDefaultTypeInternal() {}
  union {
    UserRegisterReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserRegisterReqDefaultTypeInternal _UserRegisterReq_default_instance_;
PROTOBUF_CONSTEXPR UserRegisterRsp::UserRegisterRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserRegisterRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserRegisterRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserRegisterRspDefaultTypeInternal() {}
  union {
    UserRegisterRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserRegisterRspDefaultTypeInternal _UserRegisterRsp_default_instance_;
PROTOBUF_CONSTEXPR UserLoginReq::UserLoginReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_code_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct UserLoginReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLoginReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLoginReqDefaultTypeInternal() {}
  union {
    UserLoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLoginReqDefaultTypeInternal _UserLoginReq_default_instance_;
PROTOBUF_CONSTEXPR UserLoginRsp::UserLoginRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.login_session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserLoginRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLoginRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLoginRspDefaultTypeInternal() {}
  union {
    UserLoginRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLoginRspDefaultTypeInternal _UserLoginRsp_default_instance_;
PROTOBUF_CONSTEXPR PhoneVerifyCodeReq::PhoneVerifyCodeReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phone_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PhoneVerifyCodeReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhoneVerifyCodeReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhoneVerifyCodeReqDefaultTypeInternal() {}
  union {
    PhoneVerifyCodeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhoneVerifyCodeReqDefaultTypeInternal _PhoneVerifyCodeReq_default_instance_;
PROTOBUF_CONSTEXPR PhoneVerifyCodeRsp::PhoneVerifyCodeRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_code_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PhoneVerifyCodeRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhoneVerifyCodeRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhoneVerifyCodeRspDefaultTypeInternal() {}
  union {
    PhoneVerifyCodeRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhoneVerifyCodeRspDefaultTypeInternal _PhoneVerifyCodeRsp_default_instance_;
PROTOBUF_CONSTEXPR PhoneRegisterReq::PhoneRegisterReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phone_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_code_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PhoneRegisterReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhoneRegisterReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhoneRegisterReqDefaultTypeInternal() {}
  union {
    PhoneRegisterReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhoneRegisterReqDefaultTypeInternal _PhoneRegisterReq_default_instance_;
PROTOBUF_CONSTEXPR PhoneRegisterRsp::PhoneRegisterRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PhoneRegisterRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhoneRegisterRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhoneRegisterRspDefaultTypeInternal() {}
  union {
    PhoneRegisterRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhoneRegisterRspDefaultTypeInternal _PhoneRegisterRsp_default_instance_;
PROTOBUF_CONSTEXPR PhoneLoginReq::PhoneLoginReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phone_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_code_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PhoneLoginReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhoneLoginReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhoneLoginReqDefaultTypeInternal() {}
  union {
    PhoneLoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhoneLoginReqDefaultTypeInternal _PhoneLoginReq_default_instance_;
PROTOBUF_CONSTEXPR PhoneLoginRsp::PhoneLoginRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.login_session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PhoneLoginRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhoneLoginRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhoneLoginRspDefaultTypeInternal() {}
  union {
    PhoneLoginRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhoneLoginRspDefaultTypeInternal _PhoneLoginRsp_default_instance_;
PROTOBUF_CONSTEXPR GetUserInfoReq::GetUserInfoReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GetUserInfoReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserInfoReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserInfoReqDefaultTypeInternal() {}
  union {
    GetUserInfoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserInfoReqDefaultTypeInternal _GetUserInfoReq_default_instance_;
PROTOBUF_CONSTEXPR GetUserInfoRsp::GetUserInfoRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_info_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUserInfoRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserInfoRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserInfoRspDefaultTypeInternal() {}
  union {
    GetUserInfoRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserInfoRspDefaultTypeInternal _GetUserInfoRsp_default_instance_;
PROTOBUF_CONSTEXPR GetMultiUserInfoReq::GetMultiUserInfoReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.users_id_)*/{}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMultiUserInfoReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMultiUserInfoReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMultiUserInfoReqDefaultTypeInternal() {}
  union {
    GetMultiUserInfoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMultiUserInfoReqDefaultTypeInternal _GetMultiUserInfoReq_default_instance_;
PROTOBUF_CONSTEXPR GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse::GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GetMultiUserInfoRsp_UsersInfoEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMultiUserInfoRsp_UsersInfoEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMultiUserInfoRsp_UsersInfoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMultiUserInfoRsp_UsersInfoEntry_DoNotUseDefaultTypeInternal _GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GetMultiUserInfoRsp::GetMultiUserInfoRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.users_info_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMultiUserInfoRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMultiUserInfoRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMultiUserInfoRspDefaultTypeInternal() {}
  union {
    GetMultiUserInfoRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMultiUserInfoRspDefaultTypeInternal _GetMultiUserInfoRsp_default_instance_;
PROTOBUF_CONSTEXPR SetUserAvatarReq::SetUserAvatarReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SetUserAvatarReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetUserAvatarReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetUserAvatarReqDefaultTypeInternal() {}
  union {
    SetUserAvatarReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetUserAvatarReqDefaultTypeInternal _SetUserAvatarReq_default_instance_;
PROTOBUF_CONSTEXPR SetUserAvatarRsp::SetUserAvatarRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetUserAvatarRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetUserAvatarRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetUserAvatarRspDefaultTypeInternal() {}
  union {
    SetUserAvatarRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetUserAvatarRspDefaultTypeInternal _SetUserAvatarRsp_default_instance_;
PROTOBUF_CONSTEXPR SetUserNicknameReq::SetUserNicknameReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SetUserNicknameReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetUserNicknameReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetUserNicknameReqDefaultTypeInternal() {}
  union {
    SetUserNicknameReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetUserNicknameReqDefaultTypeInternal _SetUserNicknameReq_default_instance_;
PROTOBUF_CONSTEXPR SetUserNicknameRsp::SetUserNicknameRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetUserNicknameRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetUserNicknameRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetUserNicknameRspDefaultTypeInternal() {}
  union {
    SetUserNicknameRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetUserNicknameRspDefaultTypeInternal _SetUserNicknameRsp_default_instance_;
PROTOBUF_CONSTEXPR SetUserDescriptionReq::SetUserDescriptionReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SetUserDescriptionReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetUserDescriptionReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetUserDescriptionReqDefaultTypeInternal() {}
  union {
    SetUserDescriptionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetUserDescriptionReqDefaultTypeInternal _SetUserDescriptionReq_default_instance_;
PROTOBUF_CONSTEXPR SetUserDescriptionRsp::SetUserDescriptionRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetUserDescriptionRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetUserDescriptionRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetUserDescriptionRspDefaultTypeInternal() {}
  union {
    SetUserDescriptionRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetUserDescriptionRspDefaultTypeInternal _SetUserDescriptionRsp_default_instance_;
PROTOBUF_CONSTEXPR SetUserPhoneNumberReq::SetUserPhoneNumberReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phone_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phone_verify_code_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phone_verify_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SetUserPhoneNumberReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetUserPhoneNumberReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetUserPhoneNumberReqDefaultTypeInternal() {}
  union {
    SetUserPhoneNumberReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetUserPhoneNumberReqDefaultTypeInternal _SetUserPhoneNumberReq_default_instance_;
PROTOBUF_CONSTEXPR SetUserPhoneNumberRsp::SetUserPhoneNumberRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetUserPhoneNumberRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetUserPhoneNumberRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetUserPhoneNumberRspDefaultTypeInternal() {}
  union {
    SetUserPhoneNumberRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetUserPhoneNumberRspDefaultTypeInternal _SetUserPhoneNumberRsp_default_instance_;
}  // namespace SnowK
static ::_pb::Metadata file_level_metadata_user_2eproto[23];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_user_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_user_2eproto[1];

const uint32_t TableStruct_user_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SnowK::UserRegisterReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SnowK::UserRegisterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::UserRegisterReq, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::UserRegisterReq, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::SnowK::UserRegisterReq, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::SnowK::UserRegisterReq, _impl_.verify_code_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::UserRegisterReq, _impl_.verify_code_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::UserRegisterRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::UserRegisterRsp, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::UserRegisterRsp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::SnowK::UserRegisterRsp, _impl_.errmsg_),
  PROTOBUF_FIELD_OFFSET(::SnowK::UserLoginReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SnowK::UserLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::UserLoginReq, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::UserLoginReq, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::SnowK::UserLoginReq, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::SnowK::UserLoginReq, _impl_.verify_code_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::UserLoginReq, _impl_.verify_code_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::UserLoginRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::UserLoginRsp, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::UserLoginRsp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::SnowK::UserLoginRsp, _impl_.errmsg_),
  PROTOBUF_FIELD_OFFSET(::SnowK::UserLoginRsp, _impl_.login_session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneVerifyCodeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneVerifyCodeReq, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneVerifyCodeReq, _impl_.phone_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneVerifyCodeRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneVerifyCodeRsp, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneVerifyCodeRsp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneVerifyCodeRsp, _impl_.errmsg_),
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneVerifyCodeRsp, _impl_.verify_code_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneRegisterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneRegisterReq, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneRegisterReq, _impl_.phone_number_),
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneRegisterReq, _impl_.verify_code_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneRegisterReq, _impl_.verify_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneRegisterRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneRegisterRsp, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneRegisterRsp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneRegisterRsp, _impl_.errmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneLoginReq, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneLoginReq, _impl_.phone_number_),
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneLoginReq, _impl_.verify_code_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneLoginReq, _impl_.verify_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneLoginRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneLoginRsp, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneLoginRsp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneLoginRsp, _impl_.errmsg_),
  PROTOBUF_FIELD_OFFSET(::SnowK::PhoneLoginRsp, _impl_.login_session_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::GetUserInfoReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SnowK::GetUserInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::GetUserInfoReq, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::GetUserInfoReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::GetUserInfoReq, _impl_.session_id_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::GetUserInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::GetUserInfoRsp, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::GetUserInfoRsp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::SnowK::GetUserInfoRsp, _impl_.errmsg_),
  PROTOBUF_FIELD_OFFSET(::SnowK::GetUserInfoRsp, _impl_.user_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::GetMultiUserInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::GetMultiUserInfoReq, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::GetMultiUserInfoReq, _impl_.users_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SnowK::GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::SnowK::GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::GetMultiUserInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::GetMultiUserInfoRsp, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::GetMultiUserInfoRsp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::SnowK::GetMultiUserInfoRsp, _impl_.errmsg_),
  PROTOBUF_FIELD_OFFSET(::SnowK::GetMultiUserInfoRsp, _impl_.users_info_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserAvatarReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserAvatarReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserAvatarReq, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserAvatarReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserAvatarReq, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserAvatarReq, _impl_.avatar_),
  ~0u,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserAvatarRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserAvatarRsp, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserAvatarRsp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserAvatarRsp, _impl_.errmsg_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserNicknameReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserNicknameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserNicknameReq, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserNicknameReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserNicknameReq, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserNicknameReq, _impl_.nickname_),
  ~0u,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserNicknameRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserNicknameRsp, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserNicknameRsp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserNicknameRsp, _impl_.errmsg_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserDescriptionReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserDescriptionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserDescriptionReq, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserDescriptionReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserDescriptionReq, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserDescriptionReq, _impl_.description_),
  ~0u,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserDescriptionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserDescriptionRsp, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserDescriptionRsp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserDescriptionRsp, _impl_.errmsg_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserPhoneNumberReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserPhoneNumberReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserPhoneNumberReq, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserPhoneNumberReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserPhoneNumberReq, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserPhoneNumberReq, _impl_.phone_number_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserPhoneNumberReq, _impl_.phone_verify_code_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserPhoneNumberReq, _impl_.phone_verify_code_),
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserPhoneNumberRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserPhoneNumberRsp, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserPhoneNumberRsp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::SnowK::SetUserPhoneNumberRsp, _impl_.errmsg_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::SnowK::UserRegisterReq)},
  { 16, -1, -1, sizeof(::SnowK::UserRegisterRsp)},
  { 25, 36, -1, sizeof(::SnowK::UserLoginReq)},
  { 41, -1, -1, sizeof(::SnowK::UserLoginRsp)},
  { 51, -1, -1, sizeof(::SnowK::PhoneVerifyCodeReq)},
  { 59, -1, -1, sizeof(::SnowK::PhoneVerifyCodeRsp)},
  { 69, -1, -1, sizeof(::SnowK::PhoneRegisterReq)},
  { 79, -1, -1, sizeof(::SnowK::PhoneRegisterRsp)},
  { 88, -1, -1, sizeof(::SnowK::PhoneLoginReq)},
  { 98, -1, -1, sizeof(::SnowK::PhoneLoginRsp)},
  { 108, 117, -1, sizeof(::SnowK::GetUserInfoReq)},
  { 120, -1, -1, sizeof(::SnowK::GetUserInfoRsp)},
  { 130, -1, -1, sizeof(::SnowK::GetMultiUserInfoReq)},
  { 138, 146, -1, sizeof(::SnowK::GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse)},
  { 148, -1, -1, sizeof(::SnowK::GetMultiUserInfoRsp)},
  { 158, 168, -1, sizeof(::SnowK::SetUserAvatarReq)},
  { 172, -1, -1, sizeof(::SnowK::SetUserAvatarRsp)},
  { 181, 191, -1, sizeof(::SnowK::SetUserNicknameReq)},
  { 195, -1, -1, sizeof(::SnowK::SetUserNicknameRsp)},
  { 204, 214, -1, sizeof(::SnowK::SetUserDescriptionReq)},
  { 218, -1, -1, sizeof(::SnowK::SetUserDescriptionRsp)},
  { 227, 239, -1, sizeof(::SnowK::SetUserPhoneNumberReq)},
  { 245, -1, -1, sizeof(::SnowK::SetUserPhoneNumberRsp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SnowK::_UserRegisterReq_default_instance_._instance,
  &::SnowK::_UserRegisterRsp_default_instance_._instance,
  &::SnowK::_UserLoginReq_default_instance_._instance,
  &::SnowK::_UserLoginRsp_default_instance_._instance,
  &::SnowK::_PhoneVerifyCodeReq_default_instance_._instance,
  &::SnowK::_PhoneVerifyCodeRsp_default_instance_._instance,
  &::SnowK::_PhoneRegisterReq_default_instance_._instance,
  &::SnowK::_PhoneRegisterRsp_default_instance_._instance,
  &::SnowK::_PhoneLoginReq_default_instance_._instance,
  &::SnowK::_PhoneLoginRsp_default_instance_._instance,
  &::SnowK::_GetUserInfoReq_default_instance_._instance,
  &::SnowK::_GetUserInfoRsp_default_instance_._instance,
  &::SnowK::_GetMultiUserInfoReq_default_instance_._instance,
  &::SnowK::_GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse_default_instance_._instance,
  &::SnowK::_GetMultiUserInfoRsp_default_instance_._instance,
  &::SnowK::_SetUserAvatarReq_default_instance_._instance,
  &::SnowK::_SetUserAvatarRsp_default_instance_._instance,
  &::SnowK::_SetUserNicknameReq_default_instance_._instance,
  &::SnowK::_SetUserNicknameRsp_default_instance_._instance,
  &::SnowK::_SetUserDescriptionReq_default_instance_._instance,
  &::SnowK::_SetUserDescriptionRsp_default_instance_._instance,
  &::SnowK::_SetUserPhoneNumberReq_default_instance_._instance,
  &::SnowK::_SetUserPhoneNumberRsp_default_instance_._instance,
};

const char descriptor_table_protodef_user_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nuser.proto\022\005SnowK\032\nbase.proto\"\243\001\n\017User"
  "RegisterReq\022\022\n\nrequest_id\030\001 \001(\t\022\020\n\010nickn"
  "ame\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\033\n\016verify_co"
  "de_id\030\004 \001(\tH\000\210\001\001\022\030\n\013verify_code\030\005 \001(\tH\001\210"
  "\001\001B\021\n\017_verify_code_idB\016\n\014_verify_code\"F\n"
  "\017UserRegisterRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007"
  "success\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\"\240\001\n\014UserLo"
  "ginReq\022\022\n\nrequest_id\030\001 \001(\t\022\020\n\010nickname\030\002"
  " \001(\t\022\020\n\010password\030\003 \001(\t\022\033\n\016verify_code_id"
  "\030\004 \001(\tH\000\210\001\001\022\030\n\013verify_code\030\005 \001(\tH\001\210\001\001B\021\n"
  "\017_verify_code_idB\016\n\014_verify_code\"]\n\014User"
  "LoginRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007success\030"
  "\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\022\030\n\020login_session_i"
  "d\030\004 \001(\t\">\n\022PhoneVerifyCodeReq\022\022\n\nrequest"
  "_id\030\001 \001(\t\022\024\n\014phone_number\030\002 \001(\t\"a\n\022Phone"
  "VerifyCodeRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007suc"
  "cess\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\022\026\n\016verify_cod"
  "e_id\030\004 \001(\t\"i\n\020PhoneRegisterReq\022\022\n\nreques"
  "t_id\030\001 \001(\t\022\024\n\014phone_number\030\002 \001(\t\022\026\n\016veri"
  "fy_code_id\030\003 \001(\t\022\023\n\013verify_code\030\004 \001(\t\"G\n"
  "\020PhoneRegisterRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n"
  "\007success\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\"f\n\rPhoneL"
  "oginReq\022\022\n\nrequest_id\030\001 \001(\t\022\024\n\014phone_num"
  "ber\030\002 \001(\t\022\026\n\016verify_code_id\030\003 \001(\t\022\023\n\013ver"
  "ify_code\030\004 \001(\t\"^\n\rPhoneLoginRsp\022\022\n\nreque"
  "st_id\030\001 \001(\t\022\017\n\007success\030\002 \001(\010\022\016\n\006errmsg\030\003"
  " \001(\t\022\030\n\020login_session_id\030\004 \001(\t\"n\n\016GetUse"
  "rInfoReq\022\022\n\nrequest_id\030\001 \001(\t\022\024\n\007user_id\030"
  "\002 \001(\tH\000\210\001\001\022\027\n\nsession_id\030\003 \001(\tH\001\210\001\001B\n\n\010_"
  "user_idB\r\n\013_session_id\"i\n\016GetUserInfoRsp"
  "\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007success\030\002 \001(\010\022\016\n"
  "\006errmsg\030\003 \001(\t\022\"\n\tuser_info\030\004 \001(\0132\017.SnowK"
  ".UserInfo\";\n\023GetMultiUserInfoReq\022\022\n\nrequ"
  "est_id\030\001 \001(\t\022\020\n\010users_id\030\002 \003(\t\"\314\001\n\023GetMu"
  "ltiUserInfoRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007su"
  "ccess\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\022=\n\nusers_inf"
  "o\030\004 \003(\0132).SnowK.GetMultiUserInfoRsp.User"
  "sInfoEntry\032A\n\016UsersInfoEntry\022\013\n\003key\030\001 \001("
  "\t\022\036\n\005value\030\002 \001(\0132\017.SnowK.UserInfo:\0028\001\"\200\001"
  "\n\020SetUserAvatarReq\022\022\n\nrequest_id\030\001 \001(\t\022\024"
  "\n\007user_id\030\002 \001(\tH\000\210\001\001\022\027\n\nsession_id\030\003 \001(\t"
  "H\001\210\001\001\022\016\n\006avatar\030\004 \001(\014B\n\n\010_user_idB\r\n\013_se"
  "ssion_id\"G\n\020SetUserAvatarRsp\022\022\n\nrequest_"
  "id\030\001 \001(\t\022\017\n\007success\030\002 \001(\010\022\016\n\006errmsg\030\003 \001("
  "\t\"\204\001\n\022SetUserNicknameReq\022\022\n\nrequest_id\030\001"
  " \001(\t\022\024\n\007user_id\030\002 \001(\tH\000\210\001\001\022\027\n\nsession_id"
  "\030\003 \001(\tH\001\210\001\001\022\020\n\010nickname\030\004 \001(\tB\n\n\010_user_i"
  "dB\r\n\013_session_id\"I\n\022SetUserNicknameRsp\022\022"
  "\n\nrequest_id\030\001 \001(\t\022\017\n\007success\030\002 \001(\010\022\016\n\006e"
  "rrmsg\030\003 \001(\t\"\212\001\n\025SetUserDescriptionReq\022\022\n"
  "\nrequest_id\030\001 \001(\t\022\024\n\007user_id\030\002 \001(\tH\000\210\001\001\022"
  "\027\n\nsession_id\030\003 \001(\tH\001\210\001\001\022\023\n\013description\030"
  "\004 \001(\tB\n\n\010_user_idB\r\n\013_session_id\"L\n\025SetU"
  "serDescriptionRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n"
  "\007success\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\"\304\001\n\025SetUs"
  "erPhoneNumberReq\022\022\n\nrequest_id\030\001 \001(\t\022\024\n\007"
  "user_id\030\002 \001(\tH\000\210\001\001\022\027\n\nsession_id\030\003 \001(\tH\001"
  "\210\001\001\022\024\n\014phone_number\030\004 \001(\t\022\034\n\024phone_verif"
  "y_code_id\030\005 \001(\t\022\031\n\021phone_verify_code\030\006 \001"
  "(\tB\n\n\010_user_idB\r\n\013_session_id\"L\n\025SetUser"
  "PhoneNumberRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007su"
  "ccess\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t2\206\006\n\013UserServ"
  "ice\022>\n\014UserRegister\022\026.SnowK.UserRegister"
  "Req\032\026.SnowK.UserRegisterRsp\0225\n\tUserLogin"
  "\022\023.SnowK.UserLoginReq\032\023.SnowK.UserLoginR"
  "sp\022J\n\022GetPhoneVerifyCode\022\031.SnowK.PhoneVe"
  "rifyCodeReq\032\031.SnowK.PhoneVerifyCodeRsp\022A"
  "\n\rPhoneRegister\022\027.SnowK.PhoneRegisterReq"
  "\032\027.SnowK.PhoneRegisterRsp\0228\n\nPhoneLogin\022"
  "\024.SnowK.PhoneLoginReq\032\024.SnowK.PhoneLogin"
  "Rsp\022;\n\013GetUserInfo\022\025.SnowK.GetUserInfoRe"
  "q\032\025.SnowK.GetUserInfoRsp\022J\n\020GetMultiUser"
  "Info\022\032.SnowK.GetMultiUserInfoReq\032\032.SnowK"
  ".GetMultiUserInfoRsp\022A\n\rSetUserAvatar\022\027."
  "SnowK.SetUserAvatarReq\032\027.SnowK.SetUserAv"
  "atarRsp\022G\n\017SetUserNickname\022\031.SnowK.SetUs"
  "erNicknameReq\032\031.SnowK.SetUserNicknameRsp"
  "\022P\n\022SetUserDescription\022\034.SnowK.SetUserDe"
  "scriptionReq\032\034.SnowK.SetUserDescriptionR"
  "sp\022P\n\022SetUserPhoneNumber\022\034.SnowK.SetUser"
  "PhoneNumberReq\032\034.SnowK.SetUserPhoneNumbe"
  "rRspB\003\200\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_user_2eproto_deps[1] = {
  &::descriptor_table_base_2eproto,
};
static ::_pbi::once_flag descriptor_table_user_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_user_2eproto = {
    false, false, 3257, descriptor_table_protodef_user_2eproto,
    "user.proto",
    &descriptor_table_user_2eproto_once, descriptor_table_user_2eproto_deps, 1, 23,
    schemas, file_default_instances, TableStruct_user_2eproto::offsets,
    file_level_metadata_user_2eproto, file_level_enum_descriptors_user_2eproto,
    file_level_service_descriptors_user_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_user_2eproto_getter() {
  return &descriptor_table_user_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_user_2eproto(&descriptor_table_user_2eproto);
namespace SnowK {

// ===================================================================

class UserRegisterReq::_Internal {
 public:
  using HasBits = decltype(std::declval<UserRegisterReq>()._impl_._has_bits_);
  static void set_has_verify_code_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_verify_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserRegisterReq::UserRegisterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.UserRegisterReq)
}
UserRegisterReq::UserRegisterReq(const UserRegisterReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserRegisterReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.verify_code_id_){}
    , decltype(_impl_.verify_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verify_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_verify_code_id()) {
    _this->_impl_.verify_code_id_.Set(from._internal_verify_code_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verify_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_verify_code()) {
    _this->_impl_.verify_code_.Set(from._internal_verify_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SnowK.UserRegisterReq)
}

inline void UserRegisterReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.verify_code_id_){}
    , decltype(_impl_.verify_code_){}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verify_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verify_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserRegisterReq::~UserRegisterReq() {
  // @@protoc_insertion_point(destructor:SnowK.UserRegisterReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserRegisterReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.password_.Destroy();
  _impl_.verify_code_id_.Destroy();
  _impl_.verify_code_.Destroy();
}

void UserRegisterReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserRegisterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.UserRegisterReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.verify_code_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.verify_code_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRegisterReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.UserRegisterReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.UserRegisterReq.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.UserRegisterReq.password"));
        } else
          goto handle_unusual;
        continue;
      // optional string verify_code_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_verify_code_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.UserRegisterReq.verify_code_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string verify_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_verify_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.UserRegisterReq.verify_code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserRegisterReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.UserRegisterReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.UserRegisterReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.UserRegisterReq.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.UserRegisterReq.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // optional string verify_code_id = 4;
  if (_internal_has_verify_code_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verify_code_id().data(), static_cast<int>(this->_internal_verify_code_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.UserRegisterReq.verify_code_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_verify_code_id(), target);
  }

  // optional string verify_code = 5;
  if (_internal_has_verify_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verify_code().data(), static_cast<int>(this->_internal_verify_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.UserRegisterReq.verify_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_verify_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.UserRegisterReq)
  return target;
}

size_t UserRegisterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.UserRegisterReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string verify_code_id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verify_code_id());
    }

    // optional string verify_code = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verify_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserRegisterReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserRegisterReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserRegisterReq::GetClassData() const { return &_class_data_; }


void UserRegisterReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserRegisterReq*>(&to_msg);
  auto& from = static_cast<const UserRegisterReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.UserRegisterReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_verify_code_id(from._internal_verify_code_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_verify_code(from._internal_verify_code());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserRegisterReq::CopyFrom(const UserRegisterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.UserRegisterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRegisterReq::IsInitialized() const {
  return true;
}

void UserRegisterReq::InternalSwap(UserRegisterReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verify_code_id_, lhs_arena,
      &other->_impl_.verify_code_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verify_code_, lhs_arena,
      &other->_impl_.verify_code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRegisterReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[0]);
}

// ===================================================================

class UserRegisterRsp::_Internal {
 public:
};

UserRegisterRsp::UserRegisterRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.UserRegisterRsp)
}
UserRegisterRsp::UserRegisterRsp(const UserRegisterRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserRegisterRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:SnowK.UserRegisterRsp)
}

inline void UserRegisterRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserRegisterRsp::~UserRegisterRsp() {
  // @@protoc_insertion_point(destructor:SnowK.UserRegisterRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserRegisterRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.errmsg_.Destroy();
}

void UserRegisterRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserRegisterRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.UserRegisterRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRegisterRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.UserRegisterRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.UserRegisterRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserRegisterRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.UserRegisterRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.UserRegisterRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.UserRegisterRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.UserRegisterRsp)
  return target;
}

size_t UserRegisterRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.UserRegisterRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserRegisterRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserRegisterRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserRegisterRsp::GetClassData() const { return &_class_data_; }


void UserRegisterRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserRegisterRsp*>(&to_msg);
  auto& from = static_cast<const UserRegisterRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.UserRegisterRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserRegisterRsp::CopyFrom(const UserRegisterRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.UserRegisterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRegisterRsp::IsInitialized() const {
  return true;
}

void UserRegisterRsp::InternalSwap(UserRegisterRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRegisterRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[1]);
}

// ===================================================================

class UserLoginReq::_Internal {
 public:
  using HasBits = decltype(std::declval<UserLoginReq>()._impl_._has_bits_);
  static void set_has_verify_code_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_verify_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserLoginReq::UserLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.UserLoginReq)
}
UserLoginReq::UserLoginReq(const UserLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLoginReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.verify_code_id_){}
    , decltype(_impl_.verify_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verify_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_verify_code_id()) {
    _this->_impl_.verify_code_id_.Set(from._internal_verify_code_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verify_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_verify_code()) {
    _this->_impl_.verify_code_.Set(from._internal_verify_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SnowK.UserLoginReq)
}

inline void UserLoginReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.verify_code_id_){}
    , decltype(_impl_.verify_code_){}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verify_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verify_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserLoginReq::~UserLoginReq() {
  // @@protoc_insertion_point(destructor:SnowK.UserLoginReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.password_.Destroy();
  _impl_.verify_code_id_.Destroy();
  _impl_.verify_code_.Destroy();
}

void UserLoginReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.UserLoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.verify_code_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.verify_code_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLoginReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.UserLoginReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.UserLoginReq.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.UserLoginReq.password"));
        } else
          goto handle_unusual;
        continue;
      // optional string verify_code_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_verify_code_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.UserLoginReq.verify_code_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string verify_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_verify_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.UserLoginReq.verify_code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.UserLoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.UserLoginReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.UserLoginReq.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.UserLoginReq.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // optional string verify_code_id = 4;
  if (_internal_has_verify_code_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verify_code_id().data(), static_cast<int>(this->_internal_verify_code_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.UserLoginReq.verify_code_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_verify_code_id(), target);
  }

  // optional string verify_code = 5;
  if (_internal_has_verify_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verify_code().data(), static_cast<int>(this->_internal_verify_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.UserLoginReq.verify_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_verify_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.UserLoginReq)
  return target;
}

size_t UserLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.UserLoginReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string verify_code_id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verify_code_id());
    }

    // optional string verify_code = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verify_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLoginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLoginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLoginReq::GetClassData() const { return &_class_data_; }


void UserLoginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLoginReq*>(&to_msg);
  auto& from = static_cast<const UserLoginReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.UserLoginReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_verify_code_id(from._internal_verify_code_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_verify_code(from._internal_verify_code());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLoginReq::CopyFrom(const UserLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.UserLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginReq::IsInitialized() const {
  return true;
}

void UserLoginReq::InternalSwap(UserLoginReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verify_code_id_, lhs_arena,
      &other->_impl_.verify_code_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verify_code_, lhs_arena,
      &other->_impl_.verify_code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLoginReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[2]);
}

// ===================================================================

class UserLoginRsp::_Internal {
 public:
};

UserLoginRsp::UserLoginRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.UserLoginRsp)
}
UserLoginRsp::UserLoginRsp(const UserLoginRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLoginRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.login_session_id_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.login_session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login_session_id().empty()) {
    _this->_impl_.login_session_id_.Set(from._internal_login_session_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:SnowK.UserLoginRsp)
}

inline void UserLoginRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.login_session_id_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.login_session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserLoginRsp::~UserLoginRsp() {
  // @@protoc_insertion_point(destructor:SnowK.UserLoginRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLoginRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.errmsg_.Destroy();
  _impl_.login_session_id_.Destroy();
}

void UserLoginRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLoginRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.UserLoginRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  _impl_.login_session_id_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLoginRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.UserLoginRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.UserLoginRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // string login_session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_login_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.UserLoginRsp.login_session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLoginRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.UserLoginRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.UserLoginRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.UserLoginRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // string login_session_id = 4;
  if (!this->_internal_login_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_session_id().data(), static_cast<int>(this->_internal_login_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.UserLoginRsp.login_session_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_login_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.UserLoginRsp)
  return target;
}

size_t UserLoginRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.UserLoginRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // string login_session_id = 4;
  if (!this->_internal_login_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login_session_id());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLoginRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLoginRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLoginRsp::GetClassData() const { return &_class_data_; }


void UserLoginRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLoginRsp*>(&to_msg);
  auto& from = static_cast<const UserLoginRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.UserLoginRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (!from._internal_login_session_id().empty()) {
    _this->_internal_set_login_session_id(from._internal_login_session_id());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLoginRsp::CopyFrom(const UserLoginRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.UserLoginRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginRsp::IsInitialized() const {
  return true;
}

void UserLoginRsp::InternalSwap(UserLoginRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_session_id_, lhs_arena,
      &other->_impl_.login_session_id_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLoginRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[3]);
}

// ===================================================================

class PhoneVerifyCodeReq::_Internal {
 public:
};

PhoneVerifyCodeReq::PhoneVerifyCodeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.PhoneVerifyCodeReq)
}
PhoneVerifyCodeReq::PhoneVerifyCodeReq(const PhoneVerifyCodeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PhoneVerifyCodeReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.phone_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.phone_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_phone_number().empty()) {
    _this->_impl_.phone_number_.Set(from._internal_phone_number(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SnowK.PhoneVerifyCodeReq)
}

inline void PhoneVerifyCodeReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.phone_number_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phone_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PhoneVerifyCodeReq::~PhoneVerifyCodeReq() {
  // @@protoc_insertion_point(destructor:SnowK.PhoneVerifyCodeReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PhoneVerifyCodeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.phone_number_.Destroy();
}

void PhoneVerifyCodeReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PhoneVerifyCodeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.PhoneVerifyCodeReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.phone_number_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhoneVerifyCodeReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneVerifyCodeReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // string phone_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_phone_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneVerifyCodeReq.phone_number"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PhoneVerifyCodeReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.PhoneVerifyCodeReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneVerifyCodeReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string phone_number = 2;
  if (!this->_internal_phone_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_number().data(), static_cast<int>(this->_internal_phone_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneVerifyCodeReq.phone_number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_phone_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.PhoneVerifyCodeReq)
  return target;
}

size_t PhoneVerifyCodeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.PhoneVerifyCodeReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string phone_number = 2;
  if (!this->_internal_phone_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PhoneVerifyCodeReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PhoneVerifyCodeReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PhoneVerifyCodeReq::GetClassData() const { return &_class_data_; }


void PhoneVerifyCodeReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PhoneVerifyCodeReq*>(&to_msg);
  auto& from = static_cast<const PhoneVerifyCodeReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.PhoneVerifyCodeReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_phone_number().empty()) {
    _this->_internal_set_phone_number(from._internal_phone_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PhoneVerifyCodeReq::CopyFrom(const PhoneVerifyCodeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.PhoneVerifyCodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneVerifyCodeReq::IsInitialized() const {
  return true;
}

void PhoneVerifyCodeReq::InternalSwap(PhoneVerifyCodeReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phone_number_, lhs_arena,
      &other->_impl_.phone_number_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PhoneVerifyCodeReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[4]);
}

// ===================================================================

class PhoneVerifyCodeRsp::_Internal {
 public:
};

PhoneVerifyCodeRsp::PhoneVerifyCodeRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.PhoneVerifyCodeRsp)
}
PhoneVerifyCodeRsp::PhoneVerifyCodeRsp(const PhoneVerifyCodeRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PhoneVerifyCodeRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.verify_code_id_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verify_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verify_code_id().empty()) {
    _this->_impl_.verify_code_id_.Set(from._internal_verify_code_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:SnowK.PhoneVerifyCodeRsp)
}

inline void PhoneVerifyCodeRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.verify_code_id_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verify_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PhoneVerifyCodeRsp::~PhoneVerifyCodeRsp() {
  // @@protoc_insertion_point(destructor:SnowK.PhoneVerifyCodeRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PhoneVerifyCodeRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.errmsg_.Destroy();
  _impl_.verify_code_id_.Destroy();
}

void PhoneVerifyCodeRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PhoneVerifyCodeRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.PhoneVerifyCodeRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  _impl_.verify_code_id_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhoneVerifyCodeRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneVerifyCodeRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneVerifyCodeRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // string verify_code_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_verify_code_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneVerifyCodeRsp.verify_code_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PhoneVerifyCodeRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.PhoneVerifyCodeRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneVerifyCodeRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneVerifyCodeRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // string verify_code_id = 4;
  if (!this->_internal_verify_code_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verify_code_id().data(), static_cast<int>(this->_internal_verify_code_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneVerifyCodeRsp.verify_code_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_verify_code_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.PhoneVerifyCodeRsp)
  return target;
}

size_t PhoneVerifyCodeRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.PhoneVerifyCodeRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // string verify_code_id = 4;
  if (!this->_internal_verify_code_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verify_code_id());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PhoneVerifyCodeRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PhoneVerifyCodeRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PhoneVerifyCodeRsp::GetClassData() const { return &_class_data_; }


void PhoneVerifyCodeRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PhoneVerifyCodeRsp*>(&to_msg);
  auto& from = static_cast<const PhoneVerifyCodeRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.PhoneVerifyCodeRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (!from._internal_verify_code_id().empty()) {
    _this->_internal_set_verify_code_id(from._internal_verify_code_id());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PhoneVerifyCodeRsp::CopyFrom(const PhoneVerifyCodeRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.PhoneVerifyCodeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneVerifyCodeRsp::IsInitialized() const {
  return true;
}

void PhoneVerifyCodeRsp::InternalSwap(PhoneVerifyCodeRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verify_code_id_, lhs_arena,
      &other->_impl_.verify_code_id_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhoneVerifyCodeRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[5]);
}

// ===================================================================

class PhoneRegisterReq::_Internal {
 public:
};

PhoneRegisterReq::PhoneRegisterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.PhoneRegisterReq)
}
PhoneRegisterReq::PhoneRegisterReq(const PhoneRegisterReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PhoneRegisterReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.phone_number_){}
    , decltype(_impl_.verify_code_id_){}
    , decltype(_impl_.verify_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.phone_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_phone_number().empty()) {
    _this->_impl_.phone_number_.Set(from._internal_phone_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verify_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verify_code_id().empty()) {
    _this->_impl_.verify_code_id_.Set(from._internal_verify_code_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verify_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verify_code().empty()) {
    _this->_impl_.verify_code_.Set(from._internal_verify_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SnowK.PhoneRegisterReq)
}

inline void PhoneRegisterReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.phone_number_){}
    , decltype(_impl_.verify_code_id_){}
    , decltype(_impl_.verify_code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phone_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verify_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verify_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PhoneRegisterReq::~PhoneRegisterReq() {
  // @@protoc_insertion_point(destructor:SnowK.PhoneRegisterReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PhoneRegisterReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.phone_number_.Destroy();
  _impl_.verify_code_id_.Destroy();
  _impl_.verify_code_.Destroy();
}

void PhoneRegisterReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PhoneRegisterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.PhoneRegisterReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.phone_number_.ClearToEmpty();
  _impl_.verify_code_id_.ClearToEmpty();
  _impl_.verify_code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhoneRegisterReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneRegisterReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // string phone_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_phone_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneRegisterReq.phone_number"));
        } else
          goto handle_unusual;
        continue;
      // string verify_code_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_verify_code_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneRegisterReq.verify_code_id"));
        } else
          goto handle_unusual;
        continue;
      // string verify_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_verify_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneRegisterReq.verify_code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PhoneRegisterReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.PhoneRegisterReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneRegisterReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string phone_number = 2;
  if (!this->_internal_phone_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_number().data(), static_cast<int>(this->_internal_phone_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneRegisterReq.phone_number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_phone_number(), target);
  }

  // string verify_code_id = 3;
  if (!this->_internal_verify_code_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verify_code_id().data(), static_cast<int>(this->_internal_verify_code_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneRegisterReq.verify_code_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_verify_code_id(), target);
  }

  // string verify_code = 4;
  if (!this->_internal_verify_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verify_code().data(), static_cast<int>(this->_internal_verify_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneRegisterReq.verify_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_verify_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.PhoneRegisterReq)
  return target;
}

size_t PhoneRegisterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.PhoneRegisterReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string phone_number = 2;
  if (!this->_internal_phone_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_number());
  }

  // string verify_code_id = 3;
  if (!this->_internal_verify_code_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verify_code_id());
  }

  // string verify_code = 4;
  if (!this->_internal_verify_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verify_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PhoneRegisterReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PhoneRegisterReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PhoneRegisterReq::GetClassData() const { return &_class_data_; }


void PhoneRegisterReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PhoneRegisterReq*>(&to_msg);
  auto& from = static_cast<const PhoneRegisterReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.PhoneRegisterReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_phone_number().empty()) {
    _this->_internal_set_phone_number(from._internal_phone_number());
  }
  if (!from._internal_verify_code_id().empty()) {
    _this->_internal_set_verify_code_id(from._internal_verify_code_id());
  }
  if (!from._internal_verify_code().empty()) {
    _this->_internal_set_verify_code(from._internal_verify_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PhoneRegisterReq::CopyFrom(const PhoneRegisterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.PhoneRegisterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneRegisterReq::IsInitialized() const {
  return true;
}

void PhoneRegisterReq::InternalSwap(PhoneRegisterReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phone_number_, lhs_arena,
      &other->_impl_.phone_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verify_code_id_, lhs_arena,
      &other->_impl_.verify_code_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verify_code_, lhs_arena,
      &other->_impl_.verify_code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PhoneRegisterReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[6]);
}

// ===================================================================

class PhoneRegisterRsp::_Internal {
 public:
};

PhoneRegisterRsp::PhoneRegisterRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.PhoneRegisterRsp)
}
PhoneRegisterRsp::PhoneRegisterRsp(const PhoneRegisterRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PhoneRegisterRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:SnowK.PhoneRegisterRsp)
}

inline void PhoneRegisterRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PhoneRegisterRsp::~PhoneRegisterRsp() {
  // @@protoc_insertion_point(destructor:SnowK.PhoneRegisterRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PhoneRegisterRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.errmsg_.Destroy();
}

void PhoneRegisterRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PhoneRegisterRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.PhoneRegisterRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhoneRegisterRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneRegisterRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneRegisterRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PhoneRegisterRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.PhoneRegisterRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneRegisterRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneRegisterRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.PhoneRegisterRsp)
  return target;
}

size_t PhoneRegisterRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.PhoneRegisterRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PhoneRegisterRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PhoneRegisterRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PhoneRegisterRsp::GetClassData() const { return &_class_data_; }


void PhoneRegisterRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PhoneRegisterRsp*>(&to_msg);
  auto& from = static_cast<const PhoneRegisterRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.PhoneRegisterRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PhoneRegisterRsp::CopyFrom(const PhoneRegisterRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.PhoneRegisterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneRegisterRsp::IsInitialized() const {
  return true;
}

void PhoneRegisterRsp::InternalSwap(PhoneRegisterRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhoneRegisterRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[7]);
}

// ===================================================================

class PhoneLoginReq::_Internal {
 public:
};

PhoneLoginReq::PhoneLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.PhoneLoginReq)
}
PhoneLoginReq::PhoneLoginReq(const PhoneLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PhoneLoginReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.phone_number_){}
    , decltype(_impl_.verify_code_id_){}
    , decltype(_impl_.verify_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.phone_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_phone_number().empty()) {
    _this->_impl_.phone_number_.Set(from._internal_phone_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verify_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verify_code_id().empty()) {
    _this->_impl_.verify_code_id_.Set(from._internal_verify_code_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verify_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verify_code().empty()) {
    _this->_impl_.verify_code_.Set(from._internal_verify_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SnowK.PhoneLoginReq)
}

inline void PhoneLoginReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.phone_number_){}
    , decltype(_impl_.verify_code_id_){}
    , decltype(_impl_.verify_code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phone_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verify_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verify_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PhoneLoginReq::~PhoneLoginReq() {
  // @@protoc_insertion_point(destructor:SnowK.PhoneLoginReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PhoneLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.phone_number_.Destroy();
  _impl_.verify_code_id_.Destroy();
  _impl_.verify_code_.Destroy();
}

void PhoneLoginReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PhoneLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.PhoneLoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.phone_number_.ClearToEmpty();
  _impl_.verify_code_id_.ClearToEmpty();
  _impl_.verify_code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhoneLoginReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneLoginReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // string phone_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_phone_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneLoginReq.phone_number"));
        } else
          goto handle_unusual;
        continue;
      // string verify_code_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_verify_code_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneLoginReq.verify_code_id"));
        } else
          goto handle_unusual;
        continue;
      // string verify_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_verify_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneLoginReq.verify_code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PhoneLoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.PhoneLoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneLoginReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string phone_number = 2;
  if (!this->_internal_phone_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_number().data(), static_cast<int>(this->_internal_phone_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneLoginReq.phone_number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_phone_number(), target);
  }

  // string verify_code_id = 3;
  if (!this->_internal_verify_code_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verify_code_id().data(), static_cast<int>(this->_internal_verify_code_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneLoginReq.verify_code_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_verify_code_id(), target);
  }

  // string verify_code = 4;
  if (!this->_internal_verify_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verify_code().data(), static_cast<int>(this->_internal_verify_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneLoginReq.verify_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_verify_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.PhoneLoginReq)
  return target;
}

size_t PhoneLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.PhoneLoginReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string phone_number = 2;
  if (!this->_internal_phone_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_number());
  }

  // string verify_code_id = 3;
  if (!this->_internal_verify_code_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verify_code_id());
  }

  // string verify_code = 4;
  if (!this->_internal_verify_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verify_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PhoneLoginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PhoneLoginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PhoneLoginReq::GetClassData() const { return &_class_data_; }


void PhoneLoginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PhoneLoginReq*>(&to_msg);
  auto& from = static_cast<const PhoneLoginReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.PhoneLoginReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_phone_number().empty()) {
    _this->_internal_set_phone_number(from._internal_phone_number());
  }
  if (!from._internal_verify_code_id().empty()) {
    _this->_internal_set_verify_code_id(from._internal_verify_code_id());
  }
  if (!from._internal_verify_code().empty()) {
    _this->_internal_set_verify_code(from._internal_verify_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PhoneLoginReq::CopyFrom(const PhoneLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.PhoneLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneLoginReq::IsInitialized() const {
  return true;
}

void PhoneLoginReq::InternalSwap(PhoneLoginReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phone_number_, lhs_arena,
      &other->_impl_.phone_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verify_code_id_, lhs_arena,
      &other->_impl_.verify_code_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verify_code_, lhs_arena,
      &other->_impl_.verify_code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PhoneLoginReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[8]);
}

// ===================================================================

class PhoneLoginRsp::_Internal {
 public:
};

PhoneLoginRsp::PhoneLoginRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.PhoneLoginRsp)
}
PhoneLoginRsp::PhoneLoginRsp(const PhoneLoginRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PhoneLoginRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.login_session_id_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.login_session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login_session_id().empty()) {
    _this->_impl_.login_session_id_.Set(from._internal_login_session_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:SnowK.PhoneLoginRsp)
}

inline void PhoneLoginRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.login_session_id_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.login_session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PhoneLoginRsp::~PhoneLoginRsp() {
  // @@protoc_insertion_point(destructor:SnowK.PhoneLoginRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PhoneLoginRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.errmsg_.Destroy();
  _impl_.login_session_id_.Destroy();
}

void PhoneLoginRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PhoneLoginRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.PhoneLoginRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  _impl_.login_session_id_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhoneLoginRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneLoginRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneLoginRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // string login_session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_login_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.PhoneLoginRsp.login_session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PhoneLoginRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.PhoneLoginRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneLoginRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneLoginRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // string login_session_id = 4;
  if (!this->_internal_login_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_session_id().data(), static_cast<int>(this->_internal_login_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.PhoneLoginRsp.login_session_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_login_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.PhoneLoginRsp)
  return target;
}

size_t PhoneLoginRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.PhoneLoginRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // string login_session_id = 4;
  if (!this->_internal_login_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login_session_id());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PhoneLoginRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PhoneLoginRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PhoneLoginRsp::GetClassData() const { return &_class_data_; }


void PhoneLoginRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PhoneLoginRsp*>(&to_msg);
  auto& from = static_cast<const PhoneLoginRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.PhoneLoginRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (!from._internal_login_session_id().empty()) {
    _this->_internal_set_login_session_id(from._internal_login_session_id());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PhoneLoginRsp::CopyFrom(const PhoneLoginRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.PhoneLoginRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneLoginRsp::IsInitialized() const {
  return true;
}

void PhoneLoginRsp::InternalSwap(PhoneLoginRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_session_id_, lhs_arena,
      &other->_impl_.login_session_id_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhoneLoginRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[9]);
}

// ===================================================================

class GetUserInfoReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetUserInfoReq>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetUserInfoReq::GetUserInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.GetUserInfoReq)
}
GetUserInfoReq::GetUserInfoReq(const GetUserInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserInfoReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SnowK.GetUserInfoReq)
}

inline void GetUserInfoReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetUserInfoReq::~GetUserInfoReq() {
  // @@protoc_insertion_point(destructor:SnowK.GetUserInfoReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.session_id_.Destroy();
}

void GetUserInfoReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.GetUserInfoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.session_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserInfoReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.GetUserInfoReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.GetUserInfoReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.GetUserInfoReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserInfoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.GetUserInfoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.GetUserInfoReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // optional string user_id = 2;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.GetUserInfoReq.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // optional string session_id = 3;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.GetUserInfoReq.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.GetUserInfoReq)
  return target;
}

size_t GetUserInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.GetUserInfoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string session_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserInfoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserInfoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserInfoReq::GetClassData() const { return &_class_data_; }


void GetUserInfoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserInfoReq*>(&to_msg);
  auto& from = static_cast<const GetUserInfoReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.GetUserInfoReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_session_id(from._internal_session_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserInfoReq::CopyFrom(const GetUserInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.GetUserInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserInfoReq::IsInitialized() const {
  return true;
}

void GetUserInfoReq::InternalSwap(GetUserInfoReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserInfoReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[10]);
}

// ===================================================================

class GetUserInfoRsp::_Internal {
 public:
  static const ::SnowK::UserInfo& user_info(const GetUserInfoRsp* msg);
};

const ::SnowK::UserInfo&
GetUserInfoRsp::_Internal::user_info(const GetUserInfoRsp* msg) {
  return *msg->_impl_.user_info_;
}
void GetUserInfoRsp::clear_user_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_info_ != nullptr) {
    delete _impl_.user_info_;
  }
  _impl_.user_info_ = nullptr;
}
GetUserInfoRsp::GetUserInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.GetUserInfoRsp)
}
GetUserInfoRsp::GetUserInfoRsp(const GetUserInfoRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserInfoRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.user_info_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_info()) {
    _this->_impl_.user_info_ = new ::SnowK::UserInfo(*from._impl_.user_info_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:SnowK.GetUserInfoRsp)
}

inline void GetUserInfoRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.user_info_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetUserInfoRsp::~GetUserInfoRsp() {
  // @@protoc_insertion_point(destructor:SnowK.GetUserInfoRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserInfoRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.errmsg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_info_;
}

void GetUserInfoRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.GetUserInfoRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_info_ != nullptr) {
    delete _impl_.user_info_;
  }
  _impl_.user_info_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserInfoRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.GetUserInfoRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.GetUserInfoRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // .SnowK.UserInfo user_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserInfoRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.GetUserInfoRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.GetUserInfoRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.GetUserInfoRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // .SnowK.UserInfo user_info = 4;
  if (this->_internal_has_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_info(this),
        _Internal::user_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.GetUserInfoRsp)
  return target;
}

size_t GetUserInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.GetUserInfoRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // .SnowK.UserInfo user_info = 4;
  if (this->_internal_has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_info_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserInfoRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserInfoRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserInfoRsp::GetClassData() const { return &_class_data_; }


void GetUserInfoRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserInfoRsp*>(&to_msg);
  auto& from = static_cast<const GetUserInfoRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.GetUserInfoRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_has_user_info()) {
    _this->_internal_mutable_user_info()->::SnowK::UserInfo::MergeFrom(
        from._internal_user_info());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserInfoRsp::CopyFrom(const GetUserInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.GetUserInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserInfoRsp::IsInitialized() const {
  return true;
}

void GetUserInfoRsp::InternalSwap(GetUserInfoRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUserInfoRsp, _impl_.success_)
      + sizeof(GetUserInfoRsp::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GetUserInfoRsp, _impl_.user_info_)>(
          reinterpret_cast<char*>(&_impl_.user_info_),
          reinterpret_cast<char*>(&other->_impl_.user_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserInfoRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[11]);
}

// ===================================================================

class GetMultiUserInfoReq::_Internal {
 public:
};

GetMultiUserInfoReq::GetMultiUserInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.GetMultiUserInfoReq)
}
GetMultiUserInfoReq::GetMultiUserInfoReq(const GetMultiUserInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMultiUserInfoReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.users_id_){from._impl_.users_id_}
    , decltype(_impl_.request_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SnowK.GetMultiUserInfoReq)
}

inline void GetMultiUserInfoReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.users_id_){arena}
    , decltype(_impl_.request_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetMultiUserInfoReq::~GetMultiUserInfoReq() {
  // @@protoc_insertion_point(destructor:SnowK.GetMultiUserInfoReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMultiUserInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.users_id_.~RepeatedPtrField();
  _impl_.request_id_.Destroy();
}

void GetMultiUserInfoReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMultiUserInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.GetMultiUserInfoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.users_id_.Clear();
  _impl_.request_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMultiUserInfoReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.GetMultiUserInfoReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string users_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_users_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "SnowK.GetMultiUserInfoReq.users_id"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMultiUserInfoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.GetMultiUserInfoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.GetMultiUserInfoReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // repeated string users_id = 2;
  for (int i = 0, n = this->_internal_users_id_size(); i < n; i++) {
    const auto& s = this->_internal_users_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.GetMultiUserInfoReq.users_id");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.GetMultiUserInfoReq)
  return target;
}

size_t GetMultiUserInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.GetMultiUserInfoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string users_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.users_id_.size());
  for (int i = 0, n = _impl_.users_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.users_id_.Get(i));
  }

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMultiUserInfoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMultiUserInfoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMultiUserInfoReq::GetClassData() const { return &_class_data_; }


void GetMultiUserInfoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMultiUserInfoReq*>(&to_msg);
  auto& from = static_cast<const GetMultiUserInfoReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.GetMultiUserInfoReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.users_id_.MergeFrom(from._impl_.users_id_);
  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMultiUserInfoReq::CopyFrom(const GetMultiUserInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.GetMultiUserInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMultiUserInfoReq::IsInitialized() const {
  return true;
}

void GetMultiUserInfoReq::InternalSwap(GetMultiUserInfoReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.users_id_.InternalSwap(&other->_impl_.users_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMultiUserInfoReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[12]);
}

// ===================================================================

GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse::GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse() {}
GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse::GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse::MergeFrom(const GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[13]);
}

// ===================================================================

class GetMultiUserInfoRsp::_Internal {
 public:
};

void GetMultiUserInfoRsp::clear_users_info() {
  _impl_.users_info_.Clear();
}
GetMultiUserInfoRsp::GetMultiUserInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &GetMultiUserInfoRsp::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:SnowK.GetMultiUserInfoRsp)
}
GetMultiUserInfoRsp::GetMultiUserInfoRsp(const GetMultiUserInfoRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMultiUserInfoRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.users_info_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.users_info_.MergeFrom(from._impl_.users_info_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:SnowK.GetMultiUserInfoRsp)
}

inline void GetMultiUserInfoRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.users_info_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetMultiUserInfoRsp::~GetMultiUserInfoRsp() {
  // @@protoc_insertion_point(destructor:SnowK.GetMultiUserInfoRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void GetMultiUserInfoRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.users_info_.Destruct();
  _impl_.users_info_.~MapField();
  _impl_.request_id_.Destroy();
  _impl_.errmsg_.Destroy();
}

void GetMultiUserInfoRsp::ArenaDtor(void* object) {
  GetMultiUserInfoRsp* _this = reinterpret_cast< GetMultiUserInfoRsp* >(object);
  _this->_impl_.users_info_.Destruct();
}
void GetMultiUserInfoRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMultiUserInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.GetMultiUserInfoRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.users_info_.Clear();
  _impl_.request_id_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMultiUserInfoRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.GetMultiUserInfoRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.GetMultiUserInfoRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .SnowK.UserInfo> users_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.users_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMultiUserInfoRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.GetMultiUserInfoRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.GetMultiUserInfoRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.GetMultiUserInfoRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // map<string, .SnowK.UserInfo> users_info = 4;
  if (!this->_internal_users_info().empty()) {
    using MapType = ::_pb::Map<std::string, ::SnowK::UserInfo>;
    using WireHelper = GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_users_info();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "SnowK.GetMultiUserInfoRsp.UsersInfoEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.GetMultiUserInfoRsp)
  return target;
}

size_t GetMultiUserInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.GetMultiUserInfoRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .SnowK.UserInfo> users_info = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_users_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::SnowK::UserInfo >::const_iterator
      it = this->_internal_users_info().begin();
      it != this->_internal_users_info().end(); ++it) {
    total_size += GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMultiUserInfoRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMultiUserInfoRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMultiUserInfoRsp::GetClassData() const { return &_class_data_; }


void GetMultiUserInfoRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMultiUserInfoRsp*>(&to_msg);
  auto& from = static_cast<const GetMultiUserInfoRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.GetMultiUserInfoRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.users_info_.MergeFrom(from._impl_.users_info_);
  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMultiUserInfoRsp::CopyFrom(const GetMultiUserInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.GetMultiUserInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMultiUserInfoRsp::IsInitialized() const {
  return true;
}

void GetMultiUserInfoRsp::InternalSwap(GetMultiUserInfoRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.users_info_.InternalSwap(&other->_impl_.users_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMultiUserInfoRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[14]);
}

// ===================================================================

class SetUserAvatarReq::_Internal {
 public:
  using HasBits = decltype(std::declval<SetUserAvatarReq>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SetUserAvatarReq::SetUserAvatarReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.SetUserAvatarReq)
}
SetUserAvatarReq::SetUserAvatarReq(const SetUserAvatarReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetUserAvatarReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.avatar_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_avatar().empty()) {
    _this->_impl_.avatar_.Set(from._internal_avatar(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SnowK.SetUserAvatarReq)
}

inline void SetUserAvatarReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.avatar_){}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetUserAvatarReq::~SetUserAvatarReq() {
  // @@protoc_insertion_point(destructor:SnowK.SetUserAvatarReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetUserAvatarReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.avatar_.Destroy();
}

void SetUserAvatarReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetUserAvatarReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.SetUserAvatarReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.session_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.avatar_.ClearToEmpty();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetUserAvatarReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserAvatarReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserAvatarReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserAvatarReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      // bytes avatar = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_avatar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetUserAvatarReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.SetUserAvatarReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserAvatarReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // optional string user_id = 2;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserAvatarReq.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // optional string session_id = 3;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserAvatarReq.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // bytes avatar = 4;
  if (!this->_internal_avatar().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_avatar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.SetUserAvatarReq)
  return target;
}

size_t SetUserAvatarReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.SetUserAvatarReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string session_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

  }
  // bytes avatar = 4;
  if (!this->_internal_avatar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetUserAvatarReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetUserAvatarReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetUserAvatarReq::GetClassData() const { return &_class_data_; }


void SetUserAvatarReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetUserAvatarReq*>(&to_msg);
  auto& from = static_cast<const SetUserAvatarReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.SetUserAvatarReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_session_id(from._internal_session_id());
    }
  }
  if (!from._internal_avatar().empty()) {
    _this->_internal_set_avatar(from._internal_avatar());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetUserAvatarReq::CopyFrom(const SetUserAvatarReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.SetUserAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserAvatarReq::IsInitialized() const {
  return true;
}

void SetUserAvatarReq::InternalSwap(SetUserAvatarReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatar_, lhs_arena,
      &other->_impl_.avatar_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetUserAvatarReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[15]);
}

// ===================================================================

class SetUserAvatarRsp::_Internal {
 public:
};

SetUserAvatarRsp::SetUserAvatarRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.SetUserAvatarRsp)
}
SetUserAvatarRsp::SetUserAvatarRsp(const SetUserAvatarRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetUserAvatarRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:SnowK.SetUserAvatarRsp)
}

inline void SetUserAvatarRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetUserAvatarRsp::~SetUserAvatarRsp() {
  // @@protoc_insertion_point(destructor:SnowK.SetUserAvatarRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetUserAvatarRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.errmsg_.Destroy();
}

void SetUserAvatarRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetUserAvatarRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.SetUserAvatarRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetUserAvatarRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserAvatarRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserAvatarRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetUserAvatarRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.SetUserAvatarRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserAvatarRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserAvatarRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.SetUserAvatarRsp)
  return target;
}

size_t SetUserAvatarRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.SetUserAvatarRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetUserAvatarRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetUserAvatarRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetUserAvatarRsp::GetClassData() const { return &_class_data_; }


void SetUserAvatarRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetUserAvatarRsp*>(&to_msg);
  auto& from = static_cast<const SetUserAvatarRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.SetUserAvatarRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetUserAvatarRsp::CopyFrom(const SetUserAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.SetUserAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserAvatarRsp::IsInitialized() const {
  return true;
}

void SetUserAvatarRsp::InternalSwap(SetUserAvatarRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetUserAvatarRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[16]);
}

// ===================================================================

class SetUserNicknameReq::_Internal {
 public:
  using HasBits = decltype(std::declval<SetUserNicknameReq>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SetUserNicknameReq::SetUserNicknameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.SetUserNicknameReq)
}
SetUserNicknameReq::SetUserNicknameReq(const SetUserNicknameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetUserNicknameReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.nickname_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SnowK.SetUserNicknameReq)
}

inline void SetUserNicknameReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.nickname_){}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetUserNicknameReq::~SetUserNicknameReq() {
  // @@protoc_insertion_point(destructor:SnowK.SetUserNicknameReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetUserNicknameReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.nickname_.Destroy();
}

void SetUserNicknameReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetUserNicknameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.SetUserNicknameReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.session_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.nickname_.ClearToEmpty();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetUserNicknameReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserNicknameReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserNicknameReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserNicknameReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserNicknameReq.nickname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetUserNicknameReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.SetUserNicknameReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserNicknameReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // optional string user_id = 2;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserNicknameReq.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // optional string session_id = 3;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserNicknameReq.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // string nickname = 4;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserNicknameReq.nickname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.SetUserNicknameReq)
  return target;
}

size_t SetUserNicknameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.SetUserNicknameReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string session_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

  }
  // string nickname = 4;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetUserNicknameReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetUserNicknameReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetUserNicknameReq::GetClassData() const { return &_class_data_; }


void SetUserNicknameReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetUserNicknameReq*>(&to_msg);
  auto& from = static_cast<const SetUserNicknameReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.SetUserNicknameReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_session_id(from._internal_session_id());
    }
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetUserNicknameReq::CopyFrom(const SetUserNicknameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.SetUserNicknameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserNicknameReq::IsInitialized() const {
  return true;
}

void SetUserNicknameReq::InternalSwap(SetUserNicknameReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetUserNicknameReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[17]);
}

// ===================================================================

class SetUserNicknameRsp::_Internal {
 public:
};

SetUserNicknameRsp::SetUserNicknameRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.SetUserNicknameRsp)
}
SetUserNicknameRsp::SetUserNicknameRsp(const SetUserNicknameRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetUserNicknameRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:SnowK.SetUserNicknameRsp)
}

inline void SetUserNicknameRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetUserNicknameRsp::~SetUserNicknameRsp() {
  // @@protoc_insertion_point(destructor:SnowK.SetUserNicknameRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetUserNicknameRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.errmsg_.Destroy();
}

void SetUserNicknameRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetUserNicknameRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.SetUserNicknameRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetUserNicknameRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserNicknameRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserNicknameRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetUserNicknameRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.SetUserNicknameRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserNicknameRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserNicknameRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.SetUserNicknameRsp)
  return target;
}

size_t SetUserNicknameRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.SetUserNicknameRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetUserNicknameRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetUserNicknameRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetUserNicknameRsp::GetClassData() const { return &_class_data_; }


void SetUserNicknameRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetUserNicknameRsp*>(&to_msg);
  auto& from = static_cast<const SetUserNicknameRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.SetUserNicknameRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetUserNicknameRsp::CopyFrom(const SetUserNicknameRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.SetUserNicknameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserNicknameRsp::IsInitialized() const {
  return true;
}

void SetUserNicknameRsp::InternalSwap(SetUserNicknameRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetUserNicknameRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[18]);
}

// ===================================================================

class SetUserDescriptionReq::_Internal {
 public:
  using HasBits = decltype(std::declval<SetUserDescriptionReq>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SetUserDescriptionReq::SetUserDescriptionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.SetUserDescriptionReq)
}
SetUserDescriptionReq::SetUserDescriptionReq(const SetUserDescriptionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetUserDescriptionReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.description_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SnowK.SetUserDescriptionReq)
}

inline void SetUserDescriptionReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.description_){}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetUserDescriptionReq::~SetUserDescriptionReq() {
  // @@protoc_insertion_point(destructor:SnowK.SetUserDescriptionReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetUserDescriptionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.description_.Destroy();
}

void SetUserDescriptionReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetUserDescriptionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.SetUserDescriptionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.session_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetUserDescriptionReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserDescriptionReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserDescriptionReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserDescriptionReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserDescriptionReq.description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetUserDescriptionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.SetUserDescriptionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserDescriptionReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // optional string user_id = 2;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserDescriptionReq.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // optional string session_id = 3;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserDescriptionReq.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserDescriptionReq.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.SetUserDescriptionReq)
  return target;
}

size_t SetUserDescriptionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.SetUserDescriptionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string session_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

  }
  // string description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetUserDescriptionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetUserDescriptionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetUserDescriptionReq::GetClassData() const { return &_class_data_; }


void SetUserDescriptionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetUserDescriptionReq*>(&to_msg);
  auto& from = static_cast<const SetUserDescriptionReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.SetUserDescriptionReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_session_id(from._internal_session_id());
    }
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetUserDescriptionReq::CopyFrom(const SetUserDescriptionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.SetUserDescriptionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserDescriptionReq::IsInitialized() const {
  return true;
}

void SetUserDescriptionReq::InternalSwap(SetUserDescriptionReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetUserDescriptionReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[19]);
}

// ===================================================================

class SetUserDescriptionRsp::_Internal {
 public:
};

SetUserDescriptionRsp::SetUserDescriptionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.SetUserDescriptionRsp)
}
SetUserDescriptionRsp::SetUserDescriptionRsp(const SetUserDescriptionRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetUserDescriptionRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:SnowK.SetUserDescriptionRsp)
}

inline void SetUserDescriptionRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetUserDescriptionRsp::~SetUserDescriptionRsp() {
  // @@protoc_insertion_point(destructor:SnowK.SetUserDescriptionRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetUserDescriptionRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.errmsg_.Destroy();
}

void SetUserDescriptionRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetUserDescriptionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.SetUserDescriptionRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetUserDescriptionRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserDescriptionRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserDescriptionRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetUserDescriptionRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.SetUserDescriptionRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserDescriptionRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserDescriptionRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.SetUserDescriptionRsp)
  return target;
}

size_t SetUserDescriptionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.SetUserDescriptionRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetUserDescriptionRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetUserDescriptionRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetUserDescriptionRsp::GetClassData() const { return &_class_data_; }


void SetUserDescriptionRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetUserDescriptionRsp*>(&to_msg);
  auto& from = static_cast<const SetUserDescriptionRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.SetUserDescriptionRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetUserDescriptionRsp::CopyFrom(const SetUserDescriptionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.SetUserDescriptionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserDescriptionRsp::IsInitialized() const {
  return true;
}

void SetUserDescriptionRsp::InternalSwap(SetUserDescriptionRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetUserDescriptionRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[20]);
}

// ===================================================================

class SetUserPhoneNumberReq::_Internal {
 public:
  using HasBits = decltype(std::declval<SetUserPhoneNumberReq>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SetUserPhoneNumberReq::SetUserPhoneNumberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.SetUserPhoneNumberReq)
}
SetUserPhoneNumberReq::SetUserPhoneNumberReq(const SetUserPhoneNumberReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetUserPhoneNumberReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.phone_number_){}
    , decltype(_impl_.phone_verify_code_id_){}
    , decltype(_impl_.phone_verify_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.phone_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_phone_number().empty()) {
    _this->_impl_.phone_number_.Set(from._internal_phone_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.phone_verify_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_verify_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_phone_verify_code_id().empty()) {
    _this->_impl_.phone_verify_code_id_.Set(from._internal_phone_verify_code_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.phone_verify_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_verify_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_phone_verify_code().empty()) {
    _this->_impl_.phone_verify_code_.Set(from._internal_phone_verify_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SnowK.SetUserPhoneNumberReq)
}

inline void SetUserPhoneNumberReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.phone_number_){}
    , decltype(_impl_.phone_verify_code_id_){}
    , decltype(_impl_.phone_verify_code_){}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phone_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phone_verify_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_verify_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phone_verify_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_verify_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetUserPhoneNumberReq::~SetUserPhoneNumberReq() {
  // @@protoc_insertion_point(destructor:SnowK.SetUserPhoneNumberReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetUserPhoneNumberReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.phone_number_.Destroy();
  _impl_.phone_verify_code_id_.Destroy();
  _impl_.phone_verify_code_.Destroy();
}

void SetUserPhoneNumberReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetUserPhoneNumberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.SetUserPhoneNumberReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.session_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.phone_number_.ClearToEmpty();
  _impl_.phone_verify_code_id_.ClearToEmpty();
  _impl_.phone_verify_code_.ClearToEmpty();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetUserPhoneNumberReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserPhoneNumberReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserPhoneNumberReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserPhoneNumberReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      // string phone_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_phone_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserPhoneNumberReq.phone_number"));
        } else
          goto handle_unusual;
        continue;
      // string phone_verify_code_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_phone_verify_code_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserPhoneNumberReq.phone_verify_code_id"));
        } else
          goto handle_unusual;
        continue;
      // string phone_verify_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_phone_verify_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserPhoneNumberReq.phone_verify_code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetUserPhoneNumberReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.SetUserPhoneNumberReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserPhoneNumberReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // optional string user_id = 2;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserPhoneNumberReq.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // optional string session_id = 3;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserPhoneNumberReq.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // string phone_number = 4;
  if (!this->_internal_phone_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_number().data(), static_cast<int>(this->_internal_phone_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserPhoneNumberReq.phone_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_phone_number(), target);
  }

  // string phone_verify_code_id = 5;
  if (!this->_internal_phone_verify_code_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_verify_code_id().data(), static_cast<int>(this->_internal_phone_verify_code_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserPhoneNumberReq.phone_verify_code_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_phone_verify_code_id(), target);
  }

  // string phone_verify_code = 6;
  if (!this->_internal_phone_verify_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_verify_code().data(), static_cast<int>(this->_internal_phone_verify_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserPhoneNumberReq.phone_verify_code");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_phone_verify_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.SetUserPhoneNumberReq)
  return target;
}

size_t SetUserPhoneNumberReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.SetUserPhoneNumberReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string session_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

  }
  // string phone_number = 4;
  if (!this->_internal_phone_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_number());
  }

  // string phone_verify_code_id = 5;
  if (!this->_internal_phone_verify_code_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_verify_code_id());
  }

  // string phone_verify_code = 6;
  if (!this->_internal_phone_verify_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_verify_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetUserPhoneNumberReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetUserPhoneNumberReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetUserPhoneNumberReq::GetClassData() const { return &_class_data_; }


void SetUserPhoneNumberReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetUserPhoneNumberReq*>(&to_msg);
  auto& from = static_cast<const SetUserPhoneNumberReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.SetUserPhoneNumberReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_session_id(from._internal_session_id());
    }
  }
  if (!from._internal_phone_number().empty()) {
    _this->_internal_set_phone_number(from._internal_phone_number());
  }
  if (!from._internal_phone_verify_code_id().empty()) {
    _this->_internal_set_phone_verify_code_id(from._internal_phone_verify_code_id());
  }
  if (!from._internal_phone_verify_code().empty()) {
    _this->_internal_set_phone_verify_code(from._internal_phone_verify_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetUserPhoneNumberReq::CopyFrom(const SetUserPhoneNumberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.SetUserPhoneNumberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserPhoneNumberReq::IsInitialized() const {
  return true;
}

void SetUserPhoneNumberReq::InternalSwap(SetUserPhoneNumberReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phone_number_, lhs_arena,
      &other->_impl_.phone_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phone_verify_code_id_, lhs_arena,
      &other->_impl_.phone_verify_code_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phone_verify_code_, lhs_arena,
      &other->_impl_.phone_verify_code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetUserPhoneNumberReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[21]);
}

// ===================================================================

class SetUserPhoneNumberRsp::_Internal {
 public:
};

SetUserPhoneNumberRsp::SetUserPhoneNumberRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.SetUserPhoneNumberRsp)
}
SetUserPhoneNumberRsp::SetUserPhoneNumberRsp(const SetUserPhoneNumberRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetUserPhoneNumberRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:SnowK.SetUserPhoneNumberRsp)
}

inline void SetUserPhoneNumberRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetUserPhoneNumberRsp::~SetUserPhoneNumberRsp() {
  // @@protoc_insertion_point(destructor:SnowK.SetUserPhoneNumberRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetUserPhoneNumberRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.errmsg_.Destroy();
}

void SetUserPhoneNumberRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetUserPhoneNumberRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.SetUserPhoneNumberRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetUserPhoneNumberRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserPhoneNumberRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.SetUserPhoneNumberRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetUserPhoneNumberRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.SetUserPhoneNumberRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserPhoneNumberRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.SetUserPhoneNumberRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.SetUserPhoneNumberRsp)
  return target;
}

size_t SetUserPhoneNumberRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.SetUserPhoneNumberRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetUserPhoneNumberRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetUserPhoneNumberRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetUserPhoneNumberRsp::GetClassData() const { return &_class_data_; }


void SetUserPhoneNumberRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetUserPhoneNumberRsp*>(&to_msg);
  auto& from = static_cast<const SetUserPhoneNumberRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.SetUserPhoneNumberRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetUserPhoneNumberRsp::CopyFrom(const SetUserPhoneNumberRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.SetUserPhoneNumberRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserPhoneNumberRsp::IsInitialized() const {
  return true;
}

void SetUserPhoneNumberRsp::InternalSwap(SetUserPhoneNumberRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetUserPhoneNumberRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[22]);
}

// ===================================================================

UserService::~UserService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UserService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_user_2eproto);
  return file_level_service_descriptors_user_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UserService::GetDescriptor() {
  return descriptor();
}

void UserService::UserRegister(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SnowK::UserRegisterReq*,
                         ::SnowK::UserRegisterRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UserRegister() not implemented.");
  done->Run();
}

void UserService::UserLogin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SnowK::UserLoginReq*,
                         ::SnowK::UserLoginRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UserLogin() not implemented.");
  done->Run();
}

void UserService::GetPhoneVerifyCode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SnowK::PhoneVerifyCodeReq*,
                         ::SnowK::PhoneVerifyCodeRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPhoneVerifyCode() not implemented.");
  done->Run();
}

void UserService::PhoneRegister(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SnowK::PhoneRegisterReq*,
                         ::SnowK::PhoneRegisterRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PhoneRegister() not implemented.");
  done->Run();
}

void UserService::PhoneLogin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SnowK::PhoneLoginReq*,
                         ::SnowK::PhoneLoginRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PhoneLogin() not implemented.");
  done->Run();
}

void UserService::GetUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SnowK::GetUserInfoReq*,
                         ::SnowK::GetUserInfoRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserInfo() not implemented.");
  done->Run();
}

void UserService::GetMultiUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SnowK::GetMultiUserInfoReq*,
                         ::SnowK::GetMultiUserInfoRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMultiUserInfo() not implemented.");
  done->Run();
}

void UserService::SetUserAvatar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SnowK::SetUserAvatarReq*,
                         ::SnowK::SetUserAvatarRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetUserAvatar() not implemented.");
  done->Run();
}

void UserService::SetUserNickname(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SnowK::SetUserNicknameReq*,
                         ::SnowK::SetUserNicknameRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetUserNickname() not implemented.");
  done->Run();
}

void UserService::SetUserDescription(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SnowK::SetUserDescriptionReq*,
                         ::SnowK::SetUserDescriptionRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetUserDescription() not implemented.");
  done->Run();
}

void UserService::SetUserPhoneNumber(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::SnowK::SetUserPhoneNumberReq*,
                         ::SnowK::SetUserPhoneNumberRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetUserPhoneNumber() not implemented.");
  done->Run();
}

void UserService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_user_2eproto[0]);
  switch(method->index()) {
    case 0:
      UserRegister(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SnowK::UserRegisterReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SnowK::UserRegisterRsp*>(
                 response),
             done);
      break;
    case 1:
      UserLogin(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SnowK::UserLoginReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SnowK::UserLoginRsp*>(
                 response),
             done);
      break;
    case 2:
      GetPhoneVerifyCode(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SnowK::PhoneVerifyCodeReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SnowK::PhoneVerifyCodeRsp*>(
                 response),
             done);
      break;
    case 3:
      PhoneRegister(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SnowK::PhoneRegisterReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SnowK::PhoneRegisterRsp*>(
                 response),
             done);
      break;
    case 4:
      PhoneLogin(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SnowK::PhoneLoginReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SnowK::PhoneLoginRsp*>(
                 response),
             done);
      break;
    case 5:
      GetUserInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SnowK::GetUserInfoReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SnowK::GetUserInfoRsp*>(
                 response),
             done);
      break;
    case 6:
      GetMultiUserInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SnowK::GetMultiUserInfoReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SnowK::GetMultiUserInfoRsp*>(
                 response),
             done);
      break;
    case 7:
      SetUserAvatar(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SnowK::SetUserAvatarReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SnowK::SetUserAvatarRsp*>(
                 response),
             done);
      break;
    case 8:
      SetUserNickname(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SnowK::SetUserNicknameReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SnowK::SetUserNicknameRsp*>(
                 response),
             done);
      break;
    case 9:
      SetUserDescription(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SnowK::SetUserDescriptionReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SnowK::SetUserDescriptionRsp*>(
                 response),
             done);
      break;
    case 10:
      SetUserPhoneNumber(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::SnowK::SetUserPhoneNumberReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::SnowK::SetUserPhoneNumberRsp*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UserService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SnowK::UserRegisterReq::default_instance();
    case 1:
      return ::SnowK::UserLoginReq::default_instance();
    case 2:
      return ::SnowK::PhoneVerifyCodeReq::default_instance();
    case 3:
      return ::SnowK::PhoneRegisterReq::default_instance();
    case 4:
      return ::SnowK::PhoneLoginReq::default_instance();
    case 5:
      return ::SnowK::GetUserInfoReq::default_instance();
    case 6:
      return ::SnowK::GetMultiUserInfoReq::default_instance();
    case 7:
      return ::SnowK::SetUserAvatarReq::default_instance();
    case 8:
      return ::SnowK::SetUserNicknameReq::default_instance();
    case 9:
      return ::SnowK::SetUserDescriptionReq::default_instance();
    case 10:
      return ::SnowK::SetUserPhoneNumberReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UserService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SnowK::UserRegisterRsp::default_instance();
    case 1:
      return ::SnowK::UserLoginRsp::default_instance();
    case 2:
      return ::SnowK::PhoneVerifyCodeRsp::default_instance();
    case 3:
      return ::SnowK::PhoneRegisterRsp::default_instance();
    case 4:
      return ::SnowK::PhoneLoginRsp::default_instance();
    case 5:
      return ::SnowK::GetUserInfoRsp::default_instance();
    case 6:
      return ::SnowK::GetMultiUserInfoRsp::default_instance();
    case 7:
      return ::SnowK::SetUserAvatarRsp::default_instance();
    case 8:
      return ::SnowK::SetUserNicknameRsp::default_instance();
    case 9:
      return ::SnowK::SetUserDescriptionRsp::default_instance();
    case 10:
      return ::SnowK::SetUserPhoneNumberRsp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

UserService_Stub::UserService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UserService_Stub::UserService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
UserService_Stub::~UserService_Stub() {
  if (owns_channel_) delete channel_;
}

void UserService_Stub::UserRegister(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SnowK::UserRegisterReq* request,
                              ::SnowK::UserRegisterRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void UserService_Stub::UserLogin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SnowK::UserLoginReq* request,
                              ::SnowK::UserLoginRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void UserService_Stub::GetPhoneVerifyCode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SnowK::PhoneVerifyCodeReq* request,
                              ::SnowK::PhoneVerifyCodeRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void UserService_Stub::PhoneRegister(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SnowK::PhoneRegisterReq* request,
                              ::SnowK::PhoneRegisterRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void UserService_Stub::PhoneLogin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SnowK::PhoneLoginReq* request,
                              ::SnowK::PhoneLoginRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void UserService_Stub::GetUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SnowK::GetUserInfoReq* request,
                              ::SnowK::GetUserInfoRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void UserService_Stub::GetMultiUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SnowK::GetMultiUserInfoReq* request,
                              ::SnowK::GetMultiUserInfoRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void UserService_Stub::SetUserAvatar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SnowK::SetUserAvatarReq* request,
                              ::SnowK::SetUserAvatarRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void UserService_Stub::SetUserNickname(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SnowK::SetUserNicknameReq* request,
                              ::SnowK::SetUserNicknameRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void UserService_Stub::SetUserDescription(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SnowK::SetUserDescriptionReq* request,
                              ::SnowK::SetUserDescriptionRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void UserService_Stub::SetUserPhoneNumber(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::SnowK::SetUserPhoneNumberReq* request,
                              ::SnowK::SetUserPhoneNumberRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SnowK
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SnowK::UserRegisterReq*
Arena::CreateMaybeMessage< ::SnowK::UserRegisterReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::UserRegisterReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::UserRegisterRsp*
Arena::CreateMaybeMessage< ::SnowK::UserRegisterRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::UserRegisterRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::UserLoginReq*
Arena::CreateMaybeMessage< ::SnowK::UserLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::UserLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::UserLoginRsp*
Arena::CreateMaybeMessage< ::SnowK::UserLoginRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::UserLoginRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::PhoneVerifyCodeReq*
Arena::CreateMaybeMessage< ::SnowK::PhoneVerifyCodeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::PhoneVerifyCodeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::PhoneVerifyCodeRsp*
Arena::CreateMaybeMessage< ::SnowK::PhoneVerifyCodeRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::PhoneVerifyCodeRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::PhoneRegisterReq*
Arena::CreateMaybeMessage< ::SnowK::PhoneRegisterReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::PhoneRegisterReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::PhoneRegisterRsp*
Arena::CreateMaybeMessage< ::SnowK::PhoneRegisterRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::PhoneRegisterRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::PhoneLoginReq*
Arena::CreateMaybeMessage< ::SnowK::PhoneLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::PhoneLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::PhoneLoginRsp*
Arena::CreateMaybeMessage< ::SnowK::PhoneLoginRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::PhoneLoginRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::GetUserInfoReq*
Arena::CreateMaybeMessage< ::SnowK::GetUserInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::GetUserInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::GetUserInfoRsp*
Arena::CreateMaybeMessage< ::SnowK::GetUserInfoRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::GetUserInfoRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::GetMultiUserInfoReq*
Arena::CreateMaybeMessage< ::SnowK::GetMultiUserInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::GetMultiUserInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse*
Arena::CreateMaybeMessage< ::SnowK::GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::GetMultiUserInfoRsp_UsersInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::GetMultiUserInfoRsp*
Arena::CreateMaybeMessage< ::SnowK::GetMultiUserInfoRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::GetMultiUserInfoRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::SetUserAvatarReq*
Arena::CreateMaybeMessage< ::SnowK::SetUserAvatarReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::SetUserAvatarReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::SetUserAvatarRsp*
Arena::CreateMaybeMessage< ::SnowK::SetUserAvatarRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::SetUserAvatarRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::SetUserNicknameReq*
Arena::CreateMaybeMessage< ::SnowK::SetUserNicknameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::SetUserNicknameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::SetUserNicknameRsp*
Arena::CreateMaybeMessage< ::SnowK::SetUserNicknameRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::SetUserNicknameRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::SetUserDescriptionReq*
Arena::CreateMaybeMessage< ::SnowK::SetUserDescriptionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::SetUserDescriptionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::SetUserDescriptionRsp*
Arena::CreateMaybeMessage< ::SnowK::SetUserDescriptionRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::SetUserDescriptionRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::SetUserPhoneNumberReq*
Arena::CreateMaybeMessage< ::SnowK::SetUserPhoneNumberReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::SetUserPhoneNumberReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::SetUserPhoneNumberRsp*
Arena::CreateMaybeMessage< ::SnowK::SetUserPhoneNumberRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::SetUserPhoneNumberRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
