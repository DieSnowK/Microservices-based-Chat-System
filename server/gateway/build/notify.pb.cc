// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notify.proto

#include "notify.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SnowK {
PROTOBUF_CONSTEXPR NotifyFriendAddApply::NotifyFriendAddApply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotifyFriendAddApplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyFriendAddApplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyFriendAddApplyDefaultTypeInternal() {}
  union {
    NotifyFriendAddApply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyFriendAddApplyDefaultTypeInternal _NotifyFriendAddApply_default_instance_;
PROTOBUF_CONSTEXPR NotifyFriendAddProcess::NotifyFriendAddProcess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_info_)*/nullptr
  , /*decltype(_impl_.agree_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotifyFriendAddProcessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyFriendAddProcessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyFriendAddProcessDefaultTypeInternal() {}
  union {
    NotifyFriendAddProcess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyFriendAddProcessDefaultTypeInternal _NotifyFriendAddProcess_default_instance_;
PROTOBUF_CONSTEXPR NotifyFriendRemove::NotifyFriendRemove(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotifyFriendRemoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyFriendRemoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyFriendRemoveDefaultTypeInternal() {}
  union {
    NotifyFriendRemove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyFriendRemoveDefaultTypeInternal _NotifyFriendRemove_default_instance_;
PROTOBUF_CONSTEXPR NotifyNewChatSession::NotifyNewChatSession(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chat_session_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotifyNewChatSessionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyNewChatSessionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyNewChatSessionDefaultTypeInternal() {}
  union {
    NotifyNewChatSession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyNewChatSessionDefaultTypeInternal _NotifyNewChatSession_default_instance_;
PROTOBUF_CONSTEXPR NotifyNewMessage::NotifyNewMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotifyNewMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyNewMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyNewMessageDefaultTypeInternal() {}
  union {
    NotifyNewMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyNewMessageDefaultTypeInternal _NotifyNewMessage_default_instance_;
PROTOBUF_CONSTEXPR NotifyMessage::NotifyMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.notify_event_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notify_type_)*/0
  , /*decltype(_impl_.notify_remarks_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct NotifyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyMessageDefaultTypeInternal() {}
  union {
    NotifyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyMessageDefaultTypeInternal _NotifyMessage_default_instance_;
}  // namespace SnowK
static ::_pb::Metadata file_level_metadata_notify_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_notify_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_notify_2eproto = nullptr;

const uint32_t TableStruct_notify_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::NotifyFriendAddApply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::NotifyFriendAddApply, _impl_.user_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::NotifyFriendAddProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::NotifyFriendAddProcess, _impl_.agree_),
  PROTOBUF_FIELD_OFFSET(::SnowK::NotifyFriendAddProcess, _impl_.user_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::NotifyFriendRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::NotifyFriendRemove, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::NotifyNewChatSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::NotifyNewChatSession, _impl_.chat_session_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SnowK::NotifyNewMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::NotifyNewMessage, _impl_.message_info_),
  PROTOBUF_FIELD_OFFSET(::SnowK::NotifyMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SnowK::NotifyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SnowK::NotifyMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SnowK::NotifyMessage, _impl_.notify_event_id_),
  PROTOBUF_FIELD_OFFSET(::SnowK::NotifyMessage, _impl_.notify_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SnowK::NotifyMessage, _impl_.notify_remarks_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SnowK::NotifyFriendAddApply)},
  { 7, -1, -1, sizeof(::SnowK::NotifyFriendAddProcess)},
  { 15, -1, -1, sizeof(::SnowK::NotifyFriendRemove)},
  { 22, -1, -1, sizeof(::SnowK::NotifyNewChatSession)},
  { 29, -1, -1, sizeof(::SnowK::NotifyNewMessage)},
  { 36, 50, -1, sizeof(::SnowK::NotifyMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SnowK::_NotifyFriendAddApply_default_instance_._instance,
  &::SnowK::_NotifyFriendAddProcess_default_instance_._instance,
  &::SnowK::_NotifyFriendRemove_default_instance_._instance,
  &::SnowK::_NotifyNewChatSession_default_instance_._instance,
  &::SnowK::_NotifyNewMessage_default_instance_._instance,
  &::SnowK::_NotifyMessage_default_instance_._instance,
};

const char descriptor_table_protodef_notify_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014notify.proto\022\005SnowK\032\nbase.proto\":\n\024Not"
  "ifyFriendAddApply\022\"\n\tuser_info\030\001 \001(\0132\017.S"
  "nowK.UserInfo\"K\n\026NotifyFriendAddProcess\022"
  "\r\n\005agree\030\001 \001(\010\022\"\n\tuser_info\030\002 \001(\0132\017.Snow"
  "K.UserInfo\"%\n\022NotifyFriendRemove\022\017\n\007user"
  "_id\030\001 \001(\t\"I\n\024NotifyNewChatSession\0221\n\021cha"
  "t_session_info\030\001 \001(\0132\026.SnowK.ChatSession"
  "Info\"<\n\020NotifyNewMessage\022(\n\014message_info"
  "\030\001 \001(\0132\022.SnowK.MessageInfo\"\233\003\n\rNotifyMes"
  "sage\022\034\n\017notify_event_id\030\001 \001(\tH\001\210\001\001\022&\n\013no"
  "tify_type\030\002 \001(\0162\021.SnowK.NotifyType\0227\n\020fr"
  "iend_add_apply\030\003 \001(\0132\033.SnowK.NotifyFrien"
  "dAddApplyH\000\022>\n\025friend_process_result\030\004 \001"
  "(\0132\035.SnowK.NotifyFriendAddProcessH\000\0222\n\rf"
  "riend_remove\030\007 \001(\0132\031.SnowK.NotifyFriendR"
  "emoveH\000\022<\n\025new_chat_session_info\030\005 \001(\0132\033"
  ".SnowK.NotifyNewChatSessionH\000\0223\n\020new_mes"
  "sage_info\030\006 \001(\0132\027.SnowK.NotifyNewMessage"
  "H\000B\020\n\016notify_remarksB\022\n\020_notify_event_id"
  "*\233\001\n\nNotifyType\022\033\n\027FRIEND_ADD_APPLY_NOTI"
  "FY\020\000\022\035\n\031FRIEND_ADD_PROCESS_NOTIFY\020\001\022\036\n\032C"
  "HAT_SESSION_CREATE_NOTIFY\020\002\022\027\n\023CHAT_MESS"
  "AGE_NOTIFY\020\003\022\030\n\024FRIEND_REMOVE_NOTIFY\020\004B\003"
  "\200\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_notify_2eproto_deps[1] = {
  &::descriptor_table_base_2eproto,
};
static ::_pbi::once_flag descriptor_table_notify_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_notify_2eproto = {
    false, false, 931, descriptor_table_protodef_notify_2eproto,
    "notify.proto",
    &descriptor_table_notify_2eproto_once, descriptor_table_notify_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_notify_2eproto::offsets,
    file_level_metadata_notify_2eproto, file_level_enum_descriptors_notify_2eproto,
    file_level_service_descriptors_notify_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_notify_2eproto_getter() {
  return &descriptor_table_notify_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_notify_2eproto(&descriptor_table_notify_2eproto);
namespace SnowK {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NotifyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_notify_2eproto);
  return file_level_enum_descriptors_notify_2eproto[0];
}
bool NotifyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NotifyFriendAddApply::_Internal {
 public:
  static const ::SnowK::UserInfo& user_info(const NotifyFriendAddApply* msg);
};

const ::SnowK::UserInfo&
NotifyFriendAddApply::_Internal::user_info(const NotifyFriendAddApply* msg) {
  return *msg->_impl_.user_info_;
}
void NotifyFriendAddApply::clear_user_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_info_ != nullptr) {
    delete _impl_.user_info_;
  }
  _impl_.user_info_ = nullptr;
}
NotifyFriendAddApply::NotifyFriendAddApply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.NotifyFriendAddApply)
}
NotifyFriendAddApply::NotifyFriendAddApply(const NotifyFriendAddApply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotifyFriendAddApply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_info()) {
    _this->_impl_.user_info_ = new ::SnowK::UserInfo(*from._impl_.user_info_);
  }
  // @@protoc_insertion_point(copy_constructor:SnowK.NotifyFriendAddApply)
}

inline void NotifyFriendAddApply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NotifyFriendAddApply::~NotifyFriendAddApply() {
  // @@protoc_insertion_point(destructor:SnowK.NotifyFriendAddApply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyFriendAddApply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_info_;
}

void NotifyFriendAddApply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotifyFriendAddApply::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.NotifyFriendAddApply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_info_ != nullptr) {
    delete _impl_.user_info_;
  }
  _impl_.user_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyFriendAddApply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SnowK.UserInfo user_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyFriendAddApply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.NotifyFriendAddApply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .SnowK.UserInfo user_info = 1;
  if (this->_internal_has_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_info(this),
        _Internal::user_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.NotifyFriendAddApply)
  return target;
}

size_t NotifyFriendAddApply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.NotifyFriendAddApply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SnowK.UserInfo user_info = 1;
  if (this->_internal_has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyFriendAddApply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotifyFriendAddApply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyFriendAddApply::GetClassData() const { return &_class_data_; }


void NotifyFriendAddApply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotifyFriendAddApply*>(&to_msg);
  auto& from = static_cast<const NotifyFriendAddApply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.NotifyFriendAddApply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_info()) {
    _this->_internal_mutable_user_info()->::SnowK::UserInfo::MergeFrom(
        from._internal_user_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyFriendAddApply::CopyFrom(const NotifyFriendAddApply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.NotifyFriendAddApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFriendAddApply::IsInitialized() const {
  return true;
}

void NotifyFriendAddApply::InternalSwap(NotifyFriendAddApply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.user_info_, other->_impl_.user_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyFriendAddApply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notify_2eproto_getter, &descriptor_table_notify_2eproto_once,
      file_level_metadata_notify_2eproto[0]);
}

// ===================================================================

class NotifyFriendAddProcess::_Internal {
 public:
  static const ::SnowK::UserInfo& user_info(const NotifyFriendAddProcess* msg);
};

const ::SnowK::UserInfo&
NotifyFriendAddProcess::_Internal::user_info(const NotifyFriendAddProcess* msg) {
  return *msg->_impl_.user_info_;
}
void NotifyFriendAddProcess::clear_user_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_info_ != nullptr) {
    delete _impl_.user_info_;
  }
  _impl_.user_info_ = nullptr;
}
NotifyFriendAddProcess::NotifyFriendAddProcess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.NotifyFriendAddProcess)
}
NotifyFriendAddProcess::NotifyFriendAddProcess(const NotifyFriendAddProcess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotifyFriendAddProcess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_info_){nullptr}
    , decltype(_impl_.agree_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_info()) {
    _this->_impl_.user_info_ = new ::SnowK::UserInfo(*from._impl_.user_info_);
  }
  _this->_impl_.agree_ = from._impl_.agree_;
  // @@protoc_insertion_point(copy_constructor:SnowK.NotifyFriendAddProcess)
}

inline void NotifyFriendAddProcess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_info_){nullptr}
    , decltype(_impl_.agree_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NotifyFriendAddProcess::~NotifyFriendAddProcess() {
  // @@protoc_insertion_point(destructor:SnowK.NotifyFriendAddProcess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyFriendAddProcess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_info_;
}

void NotifyFriendAddProcess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotifyFriendAddProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.NotifyFriendAddProcess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_info_ != nullptr) {
    delete _impl_.user_info_;
  }
  _impl_.user_info_ = nullptr;
  _impl_.agree_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyFriendAddProcess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool agree = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.agree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SnowK.UserInfo user_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyFriendAddProcess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.NotifyFriendAddProcess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool agree = 1;
  if (this->_internal_agree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_agree(), target);
  }

  // .SnowK.UserInfo user_info = 2;
  if (this->_internal_has_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user_info(this),
        _Internal::user_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.NotifyFriendAddProcess)
  return target;
}

size_t NotifyFriendAddProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.NotifyFriendAddProcess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SnowK.UserInfo user_info = 2;
  if (this->_internal_has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_info_);
  }

  // bool agree = 1;
  if (this->_internal_agree() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyFriendAddProcess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotifyFriendAddProcess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyFriendAddProcess::GetClassData() const { return &_class_data_; }


void NotifyFriendAddProcess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotifyFriendAddProcess*>(&to_msg);
  auto& from = static_cast<const NotifyFriendAddProcess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.NotifyFriendAddProcess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_info()) {
    _this->_internal_mutable_user_info()->::SnowK::UserInfo::MergeFrom(
        from._internal_user_info());
  }
  if (from._internal_agree() != 0) {
    _this->_internal_set_agree(from._internal_agree());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyFriendAddProcess::CopyFrom(const NotifyFriendAddProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.NotifyFriendAddProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFriendAddProcess::IsInitialized() const {
  return true;
}

void NotifyFriendAddProcess::InternalSwap(NotifyFriendAddProcess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotifyFriendAddProcess, _impl_.agree_)
      + sizeof(NotifyFriendAddProcess::_impl_.agree_)
      - PROTOBUF_FIELD_OFFSET(NotifyFriendAddProcess, _impl_.user_info_)>(
          reinterpret_cast<char*>(&_impl_.user_info_),
          reinterpret_cast<char*>(&other->_impl_.user_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyFriendAddProcess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notify_2eproto_getter, &descriptor_table_notify_2eproto_once,
      file_level_metadata_notify_2eproto[1]);
}

// ===================================================================

class NotifyFriendRemove::_Internal {
 public:
};

NotifyFriendRemove::NotifyFriendRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.NotifyFriendRemove)
}
NotifyFriendRemove::NotifyFriendRemove(const NotifyFriendRemove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotifyFriendRemove* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SnowK.NotifyFriendRemove)
}

inline void NotifyFriendRemove::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NotifyFriendRemove::~NotifyFriendRemove() {
  // @@protoc_insertion_point(destructor:SnowK.NotifyFriendRemove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyFriendRemove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
}

void NotifyFriendRemove::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotifyFriendRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.NotifyFriendRemove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyFriendRemove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.NotifyFriendRemove.user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyFriendRemove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.NotifyFriendRemove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.NotifyFriendRemove.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.NotifyFriendRemove)
  return target;
}

size_t NotifyFriendRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.NotifyFriendRemove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyFriendRemove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotifyFriendRemove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyFriendRemove::GetClassData() const { return &_class_data_; }


void NotifyFriendRemove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotifyFriendRemove*>(&to_msg);
  auto& from = static_cast<const NotifyFriendRemove&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.NotifyFriendRemove)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyFriendRemove::CopyFrom(const NotifyFriendRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.NotifyFriendRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFriendRemove::IsInitialized() const {
  return true;
}

void NotifyFriendRemove::InternalSwap(NotifyFriendRemove* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyFriendRemove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notify_2eproto_getter, &descriptor_table_notify_2eproto_once,
      file_level_metadata_notify_2eproto[2]);
}

// ===================================================================

class NotifyNewChatSession::_Internal {
 public:
  static const ::SnowK::ChatSessionInfo& chat_session_info(const NotifyNewChatSession* msg);
};

const ::SnowK::ChatSessionInfo&
NotifyNewChatSession::_Internal::chat_session_info(const NotifyNewChatSession* msg) {
  return *msg->_impl_.chat_session_info_;
}
void NotifyNewChatSession::clear_chat_session_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.chat_session_info_ != nullptr) {
    delete _impl_.chat_session_info_;
  }
  _impl_.chat_session_info_ = nullptr;
}
NotifyNewChatSession::NotifyNewChatSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.NotifyNewChatSession)
}
NotifyNewChatSession::NotifyNewChatSession(const NotifyNewChatSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotifyNewChatSession* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_session_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chat_session_info()) {
    _this->_impl_.chat_session_info_ = new ::SnowK::ChatSessionInfo(*from._impl_.chat_session_info_);
  }
  // @@protoc_insertion_point(copy_constructor:SnowK.NotifyNewChatSession)
}

inline void NotifyNewChatSession::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_session_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NotifyNewChatSession::~NotifyNewChatSession() {
  // @@protoc_insertion_point(destructor:SnowK.NotifyNewChatSession)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyNewChatSession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.chat_session_info_;
}

void NotifyNewChatSession::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotifyNewChatSession::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.NotifyNewChatSession)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.chat_session_info_ != nullptr) {
    delete _impl_.chat_session_info_;
  }
  _impl_.chat_session_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyNewChatSession::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SnowK.ChatSessionInfo chat_session_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_session_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyNewChatSession::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.NotifyNewChatSession)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .SnowK.ChatSessionInfo chat_session_info = 1;
  if (this->_internal_has_chat_session_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chat_session_info(this),
        _Internal::chat_session_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.NotifyNewChatSession)
  return target;
}

size_t NotifyNewChatSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.NotifyNewChatSession)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SnowK.ChatSessionInfo chat_session_info = 1;
  if (this->_internal_has_chat_session_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chat_session_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyNewChatSession::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotifyNewChatSession::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyNewChatSession::GetClassData() const { return &_class_data_; }


void NotifyNewChatSession::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotifyNewChatSession*>(&to_msg);
  auto& from = static_cast<const NotifyNewChatSession&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.NotifyNewChatSession)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chat_session_info()) {
    _this->_internal_mutable_chat_session_info()->::SnowK::ChatSessionInfo::MergeFrom(
        from._internal_chat_session_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyNewChatSession::CopyFrom(const NotifyNewChatSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.NotifyNewChatSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyNewChatSession::IsInitialized() const {
  return true;
}

void NotifyNewChatSession::InternalSwap(NotifyNewChatSession* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.chat_session_info_, other->_impl_.chat_session_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyNewChatSession::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notify_2eproto_getter, &descriptor_table_notify_2eproto_once,
      file_level_metadata_notify_2eproto[3]);
}

// ===================================================================

class NotifyNewMessage::_Internal {
 public:
  static const ::SnowK::MessageInfo& message_info(const NotifyNewMessage* msg);
};

const ::SnowK::MessageInfo&
NotifyNewMessage::_Internal::message_info(const NotifyNewMessage* msg) {
  return *msg->_impl_.message_info_;
}
void NotifyNewMessage::clear_message_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.message_info_ != nullptr) {
    delete _impl_.message_info_;
  }
  _impl_.message_info_ = nullptr;
}
NotifyNewMessage::NotifyNewMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.NotifyNewMessage)
}
NotifyNewMessage::NotifyNewMessage(const NotifyNewMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotifyNewMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message_info()) {
    _this->_impl_.message_info_ = new ::SnowK::MessageInfo(*from._impl_.message_info_);
  }
  // @@protoc_insertion_point(copy_constructor:SnowK.NotifyNewMessage)
}

inline void NotifyNewMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NotifyNewMessage::~NotifyNewMessage() {
  // @@protoc_insertion_point(destructor:SnowK.NotifyNewMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyNewMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.message_info_;
}

void NotifyNewMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotifyNewMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.NotifyNewMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.message_info_ != nullptr) {
    delete _impl_.message_info_;
  }
  _impl_.message_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyNewMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SnowK.MessageInfo message_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyNewMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.NotifyNewMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .SnowK.MessageInfo message_info = 1;
  if (this->_internal_has_message_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::message_info(this),
        _Internal::message_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.NotifyNewMessage)
  return target;
}

size_t NotifyNewMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.NotifyNewMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SnowK.MessageInfo message_info = 1;
  if (this->_internal_has_message_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.message_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyNewMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotifyNewMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyNewMessage::GetClassData() const { return &_class_data_; }


void NotifyNewMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotifyNewMessage*>(&to_msg);
  auto& from = static_cast<const NotifyNewMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.NotifyNewMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message_info()) {
    _this->_internal_mutable_message_info()->::SnowK::MessageInfo::MergeFrom(
        from._internal_message_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyNewMessage::CopyFrom(const NotifyNewMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.NotifyNewMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyNewMessage::IsInitialized() const {
  return true;
}

void NotifyNewMessage::InternalSwap(NotifyNewMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_info_, other->_impl_.message_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyNewMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notify_2eproto_getter, &descriptor_table_notify_2eproto_once,
      file_level_metadata_notify_2eproto[4]);
}

// ===================================================================

class NotifyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<NotifyMessage>()._impl_._has_bits_);
  static void set_has_notify_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SnowK::NotifyFriendAddApply& friend_add_apply(const NotifyMessage* msg);
  static const ::SnowK::NotifyFriendAddProcess& friend_process_result(const NotifyMessage* msg);
  static const ::SnowK::NotifyFriendRemove& friend_remove(const NotifyMessage* msg);
  static const ::SnowK::NotifyNewChatSession& new_chat_session_info(const NotifyMessage* msg);
  static const ::SnowK::NotifyNewMessage& new_message_info(const NotifyMessage* msg);
};

const ::SnowK::NotifyFriendAddApply&
NotifyMessage::_Internal::friend_add_apply(const NotifyMessage* msg) {
  return *msg->_impl_.notify_remarks_.friend_add_apply_;
}
const ::SnowK::NotifyFriendAddProcess&
NotifyMessage::_Internal::friend_process_result(const NotifyMessage* msg) {
  return *msg->_impl_.notify_remarks_.friend_process_result_;
}
const ::SnowK::NotifyFriendRemove&
NotifyMessage::_Internal::friend_remove(const NotifyMessage* msg) {
  return *msg->_impl_.notify_remarks_.friend_remove_;
}
const ::SnowK::NotifyNewChatSession&
NotifyMessage::_Internal::new_chat_session_info(const NotifyMessage* msg) {
  return *msg->_impl_.notify_remarks_.new_chat_session_info_;
}
const ::SnowK::NotifyNewMessage&
NotifyMessage::_Internal::new_message_info(const NotifyMessage* msg) {
  return *msg->_impl_.notify_remarks_.new_message_info_;
}
void NotifyMessage::set_allocated_friend_add_apply(::SnowK::NotifyFriendAddApply* friend_add_apply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_notify_remarks();
  if (friend_add_apply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friend_add_apply);
    if (message_arena != submessage_arena) {
      friend_add_apply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friend_add_apply, submessage_arena);
    }
    set_has_friend_add_apply();
    _impl_.notify_remarks_.friend_add_apply_ = friend_add_apply;
  }
  // @@protoc_insertion_point(field_set_allocated:SnowK.NotifyMessage.friend_add_apply)
}
void NotifyMessage::set_allocated_friend_process_result(::SnowK::NotifyFriendAddProcess* friend_process_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_notify_remarks();
  if (friend_process_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friend_process_result);
    if (message_arena != submessage_arena) {
      friend_process_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friend_process_result, submessage_arena);
    }
    set_has_friend_process_result();
    _impl_.notify_remarks_.friend_process_result_ = friend_process_result;
  }
  // @@protoc_insertion_point(field_set_allocated:SnowK.NotifyMessage.friend_process_result)
}
void NotifyMessage::set_allocated_friend_remove(::SnowK::NotifyFriendRemove* friend_remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_notify_remarks();
  if (friend_remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friend_remove);
    if (message_arena != submessage_arena) {
      friend_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friend_remove, submessage_arena);
    }
    set_has_friend_remove();
    _impl_.notify_remarks_.friend_remove_ = friend_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:SnowK.NotifyMessage.friend_remove)
}
void NotifyMessage::set_allocated_new_chat_session_info(::SnowK::NotifyNewChatSession* new_chat_session_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_notify_remarks();
  if (new_chat_session_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_chat_session_info);
    if (message_arena != submessage_arena) {
      new_chat_session_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_chat_session_info, submessage_arena);
    }
    set_has_new_chat_session_info();
    _impl_.notify_remarks_.new_chat_session_info_ = new_chat_session_info;
  }
  // @@protoc_insertion_point(field_set_allocated:SnowK.NotifyMessage.new_chat_session_info)
}
void NotifyMessage::set_allocated_new_message_info(::SnowK::NotifyNewMessage* new_message_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_notify_remarks();
  if (new_message_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_message_info);
    if (message_arena != submessage_arena) {
      new_message_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_message_info, submessage_arena);
    }
    set_has_new_message_info();
    _impl_.notify_remarks_.new_message_info_ = new_message_info;
  }
  // @@protoc_insertion_point(field_set_allocated:SnowK.NotifyMessage.new_message_info)
}
NotifyMessage::NotifyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnowK.NotifyMessage)
}
NotifyMessage::NotifyMessage(const NotifyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotifyMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notify_event_id_){}
    , decltype(_impl_.notify_type_){}
    , decltype(_impl_.notify_remarks_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.notify_event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notify_event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_notify_event_id()) {
    _this->_impl_.notify_event_id_.Set(from._internal_notify_event_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.notify_type_ = from._impl_.notify_type_;
  clear_has_notify_remarks();
  switch (from.notify_remarks_case()) {
    case kFriendAddApply: {
      _this->_internal_mutable_friend_add_apply()->::SnowK::NotifyFriendAddApply::MergeFrom(
          from._internal_friend_add_apply());
      break;
    }
    case kFriendProcessResult: {
      _this->_internal_mutable_friend_process_result()->::SnowK::NotifyFriendAddProcess::MergeFrom(
          from._internal_friend_process_result());
      break;
    }
    case kFriendRemove: {
      _this->_internal_mutable_friend_remove()->::SnowK::NotifyFriendRemove::MergeFrom(
          from._internal_friend_remove());
      break;
    }
    case kNewChatSessionInfo: {
      _this->_internal_mutable_new_chat_session_info()->::SnowK::NotifyNewChatSession::MergeFrom(
          from._internal_new_chat_session_info());
      break;
    }
    case kNewMessageInfo: {
      _this->_internal_mutable_new_message_info()->::SnowK::NotifyNewMessage::MergeFrom(
          from._internal_new_message_info());
      break;
    }
    case NOTIFY_REMARKS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SnowK.NotifyMessage)
}

inline void NotifyMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notify_event_id_){}
    , decltype(_impl_.notify_type_){0}
    , decltype(_impl_.notify_remarks_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.notify_event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notify_event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_notify_remarks();
}

NotifyMessage::~NotifyMessage() {
  // @@protoc_insertion_point(destructor:SnowK.NotifyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.notify_event_id_.Destroy();
  if (has_notify_remarks()) {
    clear_notify_remarks();
  }
}

void NotifyMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotifyMessage::clear_notify_remarks() {
// @@protoc_insertion_point(one_of_clear_start:SnowK.NotifyMessage)
  switch (notify_remarks_case()) {
    case kFriendAddApply: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.notify_remarks_.friend_add_apply_;
      }
      break;
    }
    case kFriendProcessResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.notify_remarks_.friend_process_result_;
      }
      break;
    }
    case kFriendRemove: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.notify_remarks_.friend_remove_;
      }
      break;
    }
    case kNewChatSessionInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.notify_remarks_.new_chat_session_info_;
      }
      break;
    }
    case kNewMessageInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.notify_remarks_.new_message_info_;
      }
      break;
    }
    case NOTIFY_REMARKS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NOTIFY_REMARKS_NOT_SET;
}


void NotifyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SnowK.NotifyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.notify_event_id_.ClearNonDefaultToEmpty();
  }
  _impl_.notify_type_ = 0;
  clear_notify_remarks();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string notify_event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_notify_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SnowK.NotifyMessage.notify_event_id"));
        } else
          goto handle_unusual;
        continue;
      // .SnowK.NotifyType notify_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notify_type(static_cast<::SnowK::NotifyType>(val));
        } else
          goto handle_unusual;
        continue;
      // .SnowK.NotifyFriendAddApply friend_add_apply = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_friend_add_apply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SnowK.NotifyFriendAddProcess friend_process_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_friend_process_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SnowK.NotifyNewChatSession new_chat_session_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_chat_session_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SnowK.NotifyNewMessage new_message_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_message_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SnowK.NotifyFriendRemove friend_remove = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_friend_remove(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnowK.NotifyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string notify_event_id = 1;
  if (_internal_has_notify_event_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notify_event_id().data(), static_cast<int>(this->_internal_notify_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SnowK.NotifyMessage.notify_event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_notify_event_id(), target);
  }

  // .SnowK.NotifyType notify_type = 2;
  if (this->_internal_notify_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_notify_type(), target);
  }

  // .SnowK.NotifyFriendAddApply friend_add_apply = 3;
  if (_internal_has_friend_add_apply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::friend_add_apply(this),
        _Internal::friend_add_apply(this).GetCachedSize(), target, stream);
  }

  // .SnowK.NotifyFriendAddProcess friend_process_result = 4;
  if (_internal_has_friend_process_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::friend_process_result(this),
        _Internal::friend_process_result(this).GetCachedSize(), target, stream);
  }

  // .SnowK.NotifyNewChatSession new_chat_session_info = 5;
  if (_internal_has_new_chat_session_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::new_chat_session_info(this),
        _Internal::new_chat_session_info(this).GetCachedSize(), target, stream);
  }

  // .SnowK.NotifyNewMessage new_message_info = 6;
  if (_internal_has_new_message_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::new_message_info(this),
        _Internal::new_message_info(this).GetCachedSize(), target, stream);
  }

  // .SnowK.NotifyFriendRemove friend_remove = 7;
  if (_internal_has_friend_remove()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::friend_remove(this),
        _Internal::friend_remove(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnowK.NotifyMessage)
  return target;
}

size_t NotifyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnowK.NotifyMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string notify_event_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notify_event_id());
  }

  // .SnowK.NotifyType notify_type = 2;
  if (this->_internal_notify_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notify_type());
  }

  switch (notify_remarks_case()) {
    // .SnowK.NotifyFriendAddApply friend_add_apply = 3;
    case kFriendAddApply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.notify_remarks_.friend_add_apply_);
      break;
    }
    // .SnowK.NotifyFriendAddProcess friend_process_result = 4;
    case kFriendProcessResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.notify_remarks_.friend_process_result_);
      break;
    }
    // .SnowK.NotifyFriendRemove friend_remove = 7;
    case kFriendRemove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.notify_remarks_.friend_remove_);
      break;
    }
    // .SnowK.NotifyNewChatSession new_chat_session_info = 5;
    case kNewChatSessionInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.notify_remarks_.new_chat_session_info_);
      break;
    }
    // .SnowK.NotifyNewMessage new_message_info = 6;
    case kNewMessageInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.notify_remarks_.new_message_info_);
      break;
    }
    case NOTIFY_REMARKS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotifyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyMessage::GetClassData() const { return &_class_data_; }


void NotifyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotifyMessage*>(&to_msg);
  auto& from = static_cast<const NotifyMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SnowK.NotifyMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_notify_event_id()) {
    _this->_internal_set_notify_event_id(from._internal_notify_event_id());
  }
  if (from._internal_notify_type() != 0) {
    _this->_internal_set_notify_type(from._internal_notify_type());
  }
  switch (from.notify_remarks_case()) {
    case kFriendAddApply: {
      _this->_internal_mutable_friend_add_apply()->::SnowK::NotifyFriendAddApply::MergeFrom(
          from._internal_friend_add_apply());
      break;
    }
    case kFriendProcessResult: {
      _this->_internal_mutable_friend_process_result()->::SnowK::NotifyFriendAddProcess::MergeFrom(
          from._internal_friend_process_result());
      break;
    }
    case kFriendRemove: {
      _this->_internal_mutable_friend_remove()->::SnowK::NotifyFriendRemove::MergeFrom(
          from._internal_friend_remove());
      break;
    }
    case kNewChatSessionInfo: {
      _this->_internal_mutable_new_chat_session_info()->::SnowK::NotifyNewChatSession::MergeFrom(
          from._internal_new_chat_session_info());
      break;
    }
    case kNewMessageInfo: {
      _this->_internal_mutable_new_message_info()->::SnowK::NotifyNewMessage::MergeFrom(
          from._internal_new_message_info());
      break;
    }
    case NOTIFY_REMARKS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyMessage::CopyFrom(const NotifyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnowK.NotifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMessage::IsInitialized() const {
  return true;
}

void NotifyMessage::InternalSwap(NotifyMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notify_event_id_, lhs_arena,
      &other->_impl_.notify_event_id_, rhs_arena
  );
  swap(_impl_.notify_type_, other->_impl_.notify_type_);
  swap(_impl_.notify_remarks_, other->_impl_.notify_remarks_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notify_2eproto_getter, &descriptor_table_notify_2eproto_once,
      file_level_metadata_notify_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SnowK
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SnowK::NotifyFriendAddApply*
Arena::CreateMaybeMessage< ::SnowK::NotifyFriendAddApply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::NotifyFriendAddApply >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::NotifyFriendAddProcess*
Arena::CreateMaybeMessage< ::SnowK::NotifyFriendAddProcess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::NotifyFriendAddProcess >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::NotifyFriendRemove*
Arena::CreateMaybeMessage< ::SnowK::NotifyFriendRemove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::NotifyFriendRemove >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::NotifyNewChatSession*
Arena::CreateMaybeMessage< ::SnowK::NotifyNewChatSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::NotifyNewChatSession >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::NotifyNewMessage*
Arena::CreateMaybeMessage< ::SnowK::NotifyNewMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::NotifyNewMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::SnowK::NotifyMessage*
Arena::CreateMaybeMessage< ::SnowK::NotifyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnowK::NotifyMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
