/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */


#include "notify.qpb.h"

#include <QtProtobuf/qprotobufregistration.h>

#include <cmath>

namespace SnowK {
static QtProtobuf::ProtoTypeRegistrar ProtoTypeRegistrarNotifyTypeGadget(NotifyTypeGadget::registerTypes);
void NotifyTypeGadget::registerTypes()
{
    qRegisterMetaType<NotifyType>();
    qRegisterMetaType<SnowK::NotifyTypeGadget::NotifyType>();
    qRegisterProtobufEnumType<SnowK::NotifyTypeGadget::NotifyType>();
}


class NotifyFriendAddApply_QtProtobufData : public QSharedData
{
public:
    NotifyFriendAddApply_QtProtobufData()
        : QSharedData(),
          m_userInfo(nullptr)
    {
    }

    NotifyFriendAddApply_QtProtobufData(const NotifyFriendAddApply_QtProtobufData &other)
        : QSharedData(other),
          m_userInfo(other.m_userInfo
                                               ? new UserInfo(*other.m_userInfo)
                                               : nullptr)
    {
    }

    QtProtobufPrivate::QProtobufLazyMessagePointer<UserInfo> m_userInfo;
};

NotifyFriendAddApply::~NotifyFriendAddApply() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_NotifyFriendAddApply_uint_data;
    const char qt_protobuf_NotifyFriendAddApply_char_data[37];
} qt_protobuf_NotifyFriendAddApply_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        26, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        27, /* = userInfo */
        36, /* = end-of-string-marker */
        // Field numbers:
        1, /* = userInfo */
        // Property indices:
        0, /* = userInfo */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::ExplicitPresence | QtProtobufPrivate::FieldFlag::Message), /* = userInfo */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.NotifyFriendAddApply\0" /* = full message name */
    /* field char_data: */
    "userInfo\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering NotifyFriendAddApply::staticPropertyOrdering = {
    &qt_protobuf_NotifyFriendAddApply_metadata.data
};

void NotifyFriendAddApply::registerTypes()
{
    qRegisterMetaType<NotifyFriendAddApply>();
    qRegisterMetaType<NotifyFriendAddApplyRepeated>();
}

NotifyFriendAddApply::NotifyFriendAddApply()
    : QProtobufMessage(&NotifyFriendAddApply::staticMetaObject, &NotifyFriendAddApply::staticPropertyOrdering),
      dptr(new NotifyFriendAddApply_QtProtobufData)
{
}

NotifyFriendAddApply::NotifyFriendAddApply(const NotifyFriendAddApply &other)
    = default;
NotifyFriendAddApply &NotifyFriendAddApply::operator =(const NotifyFriendAddApply &other)
{
    NotifyFriendAddApply temp(other);
    swap(temp);
    return *this;
}
NotifyFriendAddApply::NotifyFriendAddApply(NotifyFriendAddApply &&other) noexcept
    = default;
bool comparesEqual(const NotifyFriendAddApply &lhs, const NotifyFriendAddApply &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && (lhs.dptr->m_userInfo == rhs.dptr->m_userInfo
            || *lhs.dptr->m_userInfo == *rhs.dptr->m_userInfo);
}

UserInfo *NotifyFriendAddApply::userInfo_p()
{
    if (!dptr->m_userInfo)
        dptr.detach();
    return dptr->m_userInfo.get();
}

bool NotifyFriendAddApply::hasUserInfo() const
{
    return dptr->m_userInfo.operator bool();
}

const UserInfo &NotifyFriendAddApply::userInfo() const &
{
    return *dptr->m_userInfo;
}

void NotifyFriendAddApply::clearUserInfo()
{
    if (dptr->m_userInfo) {
        dptr.detach();
        dptr->m_userInfo.reset();
    }
}

void NotifyFriendAddApply::setUserInfo_p(UserInfo *userInfo)
{
    if (dptr->m_userInfo.get() != userInfo) {
        dptr.detach();
        dptr->m_userInfo.reset(userInfo);
    }
}

void NotifyFriendAddApply::setUserInfo(const UserInfo &userInfo)
{
    if (*dptr->m_userInfo != userInfo) {
        dptr.detach();
        *dptr->m_userInfo = userInfo;
    }
}

void NotifyFriendAddApply::setUserInfo(UserInfo &&userInfo)
{
    if (*dptr->m_userInfo != userInfo) {
        dptr.detach();
        *dptr->m_userInfo = std::move(userInfo);
    }
}


class NotifyFriendAddProcess_QtProtobufData : public QSharedData
{
public:
    NotifyFriendAddProcess_QtProtobufData()
        : QSharedData(),
          m_agree(false),
          m_userInfo(nullptr)
    {
    }

    NotifyFriendAddProcess_QtProtobufData(const NotifyFriendAddProcess_QtProtobufData &other)
        : QSharedData(other),
          m_agree(other.m_agree),
          m_userInfo(other.m_userInfo
                                               ? new UserInfo(*other.m_userInfo)
                                               : nullptr)
    {
    }

    bool m_agree;
    QtProtobufPrivate::QProtobufLazyMessagePointer<UserInfo> m_userInfo;
};

NotifyFriendAddProcess::~NotifyFriendAddProcess() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 9> qt_protobuf_NotifyFriendAddProcess_uint_data;
    const char qt_protobuf_NotifyFriendAddProcess_char_data[45];
} qt_protobuf_NotifyFriendAddProcess_metadata {
    // data
    {
        0, /* = version */
        2, /* = num fields */
        3, /* = field number offset */
        5, /* = property index offset */
        7, /* = field flags offset */
        28, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        29, /* = agree */
        35, /* = userInfo */
        44, /* = end-of-string-marker */
        // Field numbers:
        1, /* = agree */
        2, /* = userInfo */
        // Property indices:
        0, /* = agree */
        1, /* = userInfo */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = agree */
        uint(QtProtobufPrivate::FieldFlag::ExplicitPresence | QtProtobufPrivate::FieldFlag::Message), /* = userInfo */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.NotifyFriendAddProcess\0" /* = full message name */
    /* field char_data: */
    "agree\0userInfo\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering NotifyFriendAddProcess::staticPropertyOrdering = {
    &qt_protobuf_NotifyFriendAddProcess_metadata.data
};

void NotifyFriendAddProcess::registerTypes()
{
    qRegisterMetaType<NotifyFriendAddProcess>();
    qRegisterMetaType<NotifyFriendAddProcessRepeated>();
}

NotifyFriendAddProcess::NotifyFriendAddProcess()
    : QProtobufMessage(&NotifyFriendAddProcess::staticMetaObject, &NotifyFriendAddProcess::staticPropertyOrdering),
      dptr(new NotifyFriendAddProcess_QtProtobufData)
{
}

NotifyFriendAddProcess::NotifyFriendAddProcess(const NotifyFriendAddProcess &other)
    = default;
NotifyFriendAddProcess &NotifyFriendAddProcess::operator =(const NotifyFriendAddProcess &other)
{
    NotifyFriendAddProcess temp(other);
    swap(temp);
    return *this;
}
NotifyFriendAddProcess::NotifyFriendAddProcess(NotifyFriendAddProcess &&other) noexcept
    = default;
bool comparesEqual(const NotifyFriendAddProcess &lhs, const NotifyFriendAddProcess &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_agree == rhs.dptr->m_agree
        && (lhs.dptr->m_userInfo == rhs.dptr->m_userInfo
            || *lhs.dptr->m_userInfo == *rhs.dptr->m_userInfo);
}

bool NotifyFriendAddProcess::agree() const
{
    return dptr->m_agree;
}

UserInfo *NotifyFriendAddProcess::userInfo_p()
{
    if (!dptr->m_userInfo)
        dptr.detach();
    return dptr->m_userInfo.get();
}

bool NotifyFriendAddProcess::hasUserInfo() const
{
    return dptr->m_userInfo.operator bool();
}

const UserInfo &NotifyFriendAddProcess::userInfo() const &
{
    return *dptr->m_userInfo;
}

void NotifyFriendAddProcess::clearUserInfo()
{
    if (dptr->m_userInfo) {
        dptr.detach();
        dptr->m_userInfo.reset();
    }
}

void NotifyFriendAddProcess::setAgree(bool agree)
{
    if (dptr->m_agree != agree) {
        dptr.detach();
        dptr->m_agree = agree;
    }
}

void NotifyFriendAddProcess::setUserInfo_p(UserInfo *userInfo)
{
    if (dptr->m_userInfo.get() != userInfo) {
        dptr.detach();
        dptr->m_userInfo.reset(userInfo);
    }
}

void NotifyFriendAddProcess::setUserInfo(const UserInfo &userInfo)
{
    if (*dptr->m_userInfo != userInfo) {
        dptr.detach();
        *dptr->m_userInfo = userInfo;
    }
}

void NotifyFriendAddProcess::setUserInfo(UserInfo &&userInfo)
{
    if (*dptr->m_userInfo != userInfo) {
        dptr.detach();
        *dptr->m_userInfo = std::move(userInfo);
    }
}


class NotifyFriendRemove_QtProtobufData : public QSharedData
{
public:
    NotifyFriendRemove_QtProtobufData()
        : QSharedData()
    {
    }

    NotifyFriendRemove_QtProtobufData(const NotifyFriendRemove_QtProtobufData &other)
        : QSharedData(other),
          m_userId(other.m_userId)
    {
    }

    QString m_userId;
};

NotifyFriendRemove::~NotifyFriendRemove() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_NotifyFriendRemove_uint_data;
    const char qt_protobuf_NotifyFriendRemove_char_data[33];
} qt_protobuf_NotifyFriendRemove_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        24, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        25, /* = userId */
        32, /* = end-of-string-marker */
        // Field numbers:
        1, /* = userId */
        // Property indices:
        0, /* = userId */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = userId */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.NotifyFriendRemove\0" /* = full message name */
    /* field char_data: */
    "userId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering NotifyFriendRemove::staticPropertyOrdering = {
    &qt_protobuf_NotifyFriendRemove_metadata.data
};

void NotifyFriendRemove::registerTypes()
{
    qRegisterMetaType<NotifyFriendRemove>();
    qRegisterMetaType<NotifyFriendRemoveRepeated>();
}

NotifyFriendRemove::NotifyFriendRemove()
    : QProtobufMessage(&NotifyFriendRemove::staticMetaObject, &NotifyFriendRemove::staticPropertyOrdering),
      dptr(new NotifyFriendRemove_QtProtobufData)
{
}

NotifyFriendRemove::NotifyFriendRemove(const NotifyFriendRemove &other)
    = default;
NotifyFriendRemove &NotifyFriendRemove::operator =(const NotifyFriendRemove &other)
{
    NotifyFriendRemove temp(other);
    swap(temp);
    return *this;
}
NotifyFriendRemove::NotifyFriendRemove(NotifyFriendRemove &&other) noexcept
    = default;
bool comparesEqual(const NotifyFriendRemove &lhs, const NotifyFriendRemove &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_userId == rhs.dptr->m_userId;
}

const QString &NotifyFriendRemove::userId() const &
{
    return dptr->m_userId;
}

void NotifyFriendRemove::setUserId(const QString &userId)
{
    if (dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void NotifyFriendRemove::setUserId(QString &&userId)
{
    if (dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = std::move(userId);
    }
}


class NotifyNewChatSession_QtProtobufData : public QSharedData
{
public:
    NotifyNewChatSession_QtProtobufData()
        : QSharedData(),
          m_chatSessionInfo(nullptr)
    {
    }

    NotifyNewChatSession_QtProtobufData(const NotifyNewChatSession_QtProtobufData &other)
        : QSharedData(other),
          m_chatSessionInfo(other.m_chatSessionInfo
                                               ? new ChatSessionInfo(*other.m_chatSessionInfo)
                                               : nullptr)
    {
    }

    QtProtobufPrivate::QProtobufLazyMessagePointer<ChatSessionInfo> m_chatSessionInfo;
};

NotifyNewChatSession::~NotifyNewChatSession() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_NotifyNewChatSession_uint_data;
    const char qt_protobuf_NotifyNewChatSession_char_data[44];
} qt_protobuf_NotifyNewChatSession_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        26, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        27, /* = chatSessionInfo */
        43, /* = end-of-string-marker */
        // Field numbers:
        1, /* = chatSessionInfo */
        // Property indices:
        0, /* = chatSessionInfo */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::ExplicitPresence | QtProtobufPrivate::FieldFlag::Message), /* = chatSessionInfo */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.NotifyNewChatSession\0" /* = full message name */
    /* field char_data: */
    "chatSessionInfo\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering NotifyNewChatSession::staticPropertyOrdering = {
    &qt_protobuf_NotifyNewChatSession_metadata.data
};

void NotifyNewChatSession::registerTypes()
{
    qRegisterMetaType<NotifyNewChatSession>();
    qRegisterMetaType<NotifyNewChatSessionRepeated>();
}

NotifyNewChatSession::NotifyNewChatSession()
    : QProtobufMessage(&NotifyNewChatSession::staticMetaObject, &NotifyNewChatSession::staticPropertyOrdering),
      dptr(new NotifyNewChatSession_QtProtobufData)
{
}

NotifyNewChatSession::NotifyNewChatSession(const NotifyNewChatSession &other)
    = default;
NotifyNewChatSession &NotifyNewChatSession::operator =(const NotifyNewChatSession &other)
{
    NotifyNewChatSession temp(other);
    swap(temp);
    return *this;
}
NotifyNewChatSession::NotifyNewChatSession(NotifyNewChatSession &&other) noexcept
    = default;
bool comparesEqual(const NotifyNewChatSession &lhs, const NotifyNewChatSession &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && (lhs.dptr->m_chatSessionInfo == rhs.dptr->m_chatSessionInfo
            || *lhs.dptr->m_chatSessionInfo == *rhs.dptr->m_chatSessionInfo);
}

ChatSessionInfo *NotifyNewChatSession::chatSessionInfo_p()
{
    if (!dptr->m_chatSessionInfo)
        dptr.detach();
    return dptr->m_chatSessionInfo.get();
}

bool NotifyNewChatSession::hasChatSessionInfo() const
{
    return dptr->m_chatSessionInfo.operator bool();
}

const ChatSessionInfo &NotifyNewChatSession::chatSessionInfo() const &
{
    return *dptr->m_chatSessionInfo;
}

void NotifyNewChatSession::clearChatSessionInfo()
{
    if (dptr->m_chatSessionInfo) {
        dptr.detach();
        dptr->m_chatSessionInfo.reset();
    }
}

void NotifyNewChatSession::setChatSessionInfo_p(ChatSessionInfo *chatSessionInfo)
{
    if (dptr->m_chatSessionInfo.get() != chatSessionInfo) {
        dptr.detach();
        dptr->m_chatSessionInfo.reset(chatSessionInfo);
    }
}

void NotifyNewChatSession::setChatSessionInfo(const ChatSessionInfo &chatSessionInfo)
{
    if (*dptr->m_chatSessionInfo != chatSessionInfo) {
        dptr.detach();
        *dptr->m_chatSessionInfo = chatSessionInfo;
    }
}

void NotifyNewChatSession::setChatSessionInfo(ChatSessionInfo &&chatSessionInfo)
{
    if (*dptr->m_chatSessionInfo != chatSessionInfo) {
        dptr.detach();
        *dptr->m_chatSessionInfo = std::move(chatSessionInfo);
    }
}


class NotifyNewMessage_QtProtobufData : public QSharedData
{
public:
    NotifyNewMessage_QtProtobufData()
        : QSharedData(),
          m_messageInfo(nullptr)
    {
    }

    NotifyNewMessage_QtProtobufData(const NotifyNewMessage_QtProtobufData &other)
        : QSharedData(other),
          m_messageInfo(other.m_messageInfo
                                               ? new MessageInfo(*other.m_messageInfo)
                                               : nullptr)
    {
    }

    QtProtobufPrivate::QProtobufLazyMessagePointer<MessageInfo> m_messageInfo;
};

NotifyNewMessage::~NotifyNewMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_NotifyNewMessage_uint_data;
    const char qt_protobuf_NotifyNewMessage_char_data[36];
} qt_protobuf_NotifyNewMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        22, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        23, /* = messageInfo */
        35, /* = end-of-string-marker */
        // Field numbers:
        1, /* = messageInfo */
        // Property indices:
        0, /* = messageInfo */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::ExplicitPresence | QtProtobufPrivate::FieldFlag::Message), /* = messageInfo */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.NotifyNewMessage\0" /* = full message name */
    /* field char_data: */
    "messageInfo\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering NotifyNewMessage::staticPropertyOrdering = {
    &qt_protobuf_NotifyNewMessage_metadata.data
};

void NotifyNewMessage::registerTypes()
{
    qRegisterMetaType<NotifyNewMessage>();
    qRegisterMetaType<NotifyNewMessageRepeated>();
}

NotifyNewMessage::NotifyNewMessage()
    : QProtobufMessage(&NotifyNewMessage::staticMetaObject, &NotifyNewMessage::staticPropertyOrdering),
      dptr(new NotifyNewMessage_QtProtobufData)
{
}

NotifyNewMessage::NotifyNewMessage(const NotifyNewMessage &other)
    = default;
NotifyNewMessage &NotifyNewMessage::operator =(const NotifyNewMessage &other)
{
    NotifyNewMessage temp(other);
    swap(temp);
    return *this;
}
NotifyNewMessage::NotifyNewMessage(NotifyNewMessage &&other) noexcept
    = default;
bool comparesEqual(const NotifyNewMessage &lhs, const NotifyNewMessage &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && (lhs.dptr->m_messageInfo == rhs.dptr->m_messageInfo
            || *lhs.dptr->m_messageInfo == *rhs.dptr->m_messageInfo);
}

MessageInfo *NotifyNewMessage::messageInfo_p()
{
    if (!dptr->m_messageInfo)
        dptr.detach();
    return dptr->m_messageInfo.get();
}

bool NotifyNewMessage::hasMessageInfo() const
{
    return dptr->m_messageInfo.operator bool();
}

const MessageInfo &NotifyNewMessage::messageInfo() const &
{
    return *dptr->m_messageInfo;
}

void NotifyNewMessage::clearMessageInfo()
{
    if (dptr->m_messageInfo) {
        dptr.detach();
        dptr->m_messageInfo.reset();
    }
}

void NotifyNewMessage::setMessageInfo_p(MessageInfo *messageInfo)
{
    if (dptr->m_messageInfo.get() != messageInfo) {
        dptr.detach();
        dptr->m_messageInfo.reset(messageInfo);
    }
}

void NotifyNewMessage::setMessageInfo(const MessageInfo &messageInfo)
{
    if (*dptr->m_messageInfo != messageInfo) {
        dptr.detach();
        *dptr->m_messageInfo = messageInfo;
    }
}

void NotifyNewMessage::setMessageInfo(MessageInfo &&messageInfo)
{
    if (*dptr->m_messageInfo != messageInfo) {
        dptr.detach();
        *dptr->m_messageInfo = std::move(messageInfo);
    }
}


class NotifyMessage_QtProtobufData : public QSharedData
{
public:
    NotifyMessage_QtProtobufData()
        : QSharedData(),
          m_notifyType(NotifyTypeGadget::NotifyType::FRIEND_ADD_APPLY_NOTIFY)
    {
    }

    NotifyMessage_QtProtobufData(const NotifyMessage_QtProtobufData &other)
        : QSharedData(other),
          m_notifyEventId(other.m_notifyEventId),
          m_notifyType(other.m_notifyType),
          m_notify_remarks(other.m_notify_remarks)
    {
    }

    std::optional<QString> m_notifyEventId;
    NotifyTypeGadget::NotifyType m_notifyType;
    QtProtobufPrivate::QProtobufOneof m_notify_remarks;
};

NotifyMessage::~NotifyMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 29> qt_protobuf_NotifyMessage_uint_data;
    const char qt_protobuf_NotifyMessage_char_data[128];
} qt_protobuf_NotifyMessage_metadata {
    // data
    {
        0, /* = version */
        7, /* = num fields */
        8, /* = field number offset */
        15, /* = property index offset */
        22, /* = field flags offset */
        19, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        20, /* = notifyEventId */
        34, /* = notifyType */
        45, /* = friendAddApply */
        60, /* = friendProcessResult */
        80, /* = friendRemove */
        93, /* = newChatSessionInfo */
        112, /* = newMessageInfo */
        127, /* = end-of-string-marker */
        // Field numbers:
        1, /* = notifyEventId */
        2, /* = notifyType */
        3, /* = friendAddApply */
        4, /* = friendProcessResult */
        7, /* = friendRemove */
        5, /* = newChatSessionInfo */
        6, /* = newMessageInfo */
        // Property indices:
        0, /* = notifyEventId */
        2, /* = notifyType */
        3, /* = friendAddApply */
        5, /* = friendProcessResult */
        7, /* = friendRemove */
        9, /* = newChatSessionInfo */
        11, /* = newMessageInfo */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::Optional | QtProtobufPrivate::FieldFlag::ExplicitPresence), /* = notifyEventId */
        uint(QtProtobufPrivate::FieldFlag::Enum), /* = notifyType */
        uint(QtProtobufPrivate::FieldFlag::Oneof | QtProtobufPrivate::FieldFlag::ExplicitPresence | QtProtobufPrivate::FieldFlag::Message), /* = friendAddApply */
        uint(QtProtobufPrivate::FieldFlag::Oneof | QtProtobufPrivate::FieldFlag::ExplicitPresence | QtProtobufPrivate::FieldFlag::Message), /* = friendProcessResult */
        uint(QtProtobufPrivate::FieldFlag::Oneof | QtProtobufPrivate::FieldFlag::ExplicitPresence | QtProtobufPrivate::FieldFlag::Message), /* = friendRemove */
        uint(QtProtobufPrivate::FieldFlag::Oneof | QtProtobufPrivate::FieldFlag::ExplicitPresence | QtProtobufPrivate::FieldFlag::Message), /* = newChatSessionInfo */
        uint(QtProtobufPrivate::FieldFlag::Oneof | QtProtobufPrivate::FieldFlag::ExplicitPresence | QtProtobufPrivate::FieldFlag::Message), /* = newMessageInfo */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.NotifyMessage\0" /* = full message name */
    /* field char_data: */
    "notifyEventId\0notifyType\0friendAddApply\0friendProcessResult\0friendRemove\0"
    "newChatSessionInfo\0newMessageInfo\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering NotifyMessage::staticPropertyOrdering = {
    &qt_protobuf_NotifyMessage_metadata.data
};

void NotifyMessage::registerTypes()
{
    qRegisterMetaType<NotifyMessage>();
    qRegisterMetaType<NotifyMessageRepeated>();
}

NotifyMessage::NotifyMessage()
    : QProtobufMessage(&NotifyMessage::staticMetaObject, &NotifyMessage::staticPropertyOrdering),
      dptr(new NotifyMessage_QtProtobufData)
{
}

NotifyMessage::NotifyMessage(const NotifyMessage &other)
    = default;
NotifyMessage &NotifyMessage::operator =(const NotifyMessage &other)
{
    NotifyMessage temp(other);
    swap(temp);
    return *this;
}
NotifyMessage::NotifyMessage(NotifyMessage &&other) noexcept
    = default;
bool comparesEqual(const NotifyMessage &lhs, const NotifyMessage &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_notifyEventId == rhs.dptr->m_notifyEventId
        && lhs.dptr->m_notifyType == rhs.dptr->m_notifyType
        && lhs.dptr->m_notify_remarks == rhs.dptr->m_notify_remarks;
}

QString NotifyMessage::notifyEventId_p() const
{
    return dptr->m_notifyEventId ?
        dptr->m_notifyEventId.value() : QString();
}

bool NotifyMessage::hasNotifyEventId() const
{
    return dptr->m_notifyEventId.has_value();
}
QString NotifyMessage::notifyEventId() const
{
    Q_ASSERT(dptr->m_notifyEventId.has_value());
    return dptr->m_notifyEventId.value();
}

NotifyTypeGadget::NotifyType NotifyMessage::notifyType() const
{
    return dptr->m_notifyType;
}

NotifyFriendAddApply *NotifyMessage::friendAddApply_p()
{
    if (!dptr->m_notify_remarks.holdsField(3))
        dptr.detach();
    return dptr->m_notify_remarks.message<NotifyFriendAddApply>();
}

bool NotifyMessage::hasFriendAddApply() const
{
    return dptr->m_notify_remarks.holdsField(3);
}
NotifyFriendAddApply &NotifyMessage::friendAddApply() const
{
    Q_ASSERT(dptr->m_notify_remarks.holdsField(3));
    return *(dptr->m_notify_remarks.message<NotifyFriendAddApply>());
}

NotifyFriendAddProcess *NotifyMessage::friendProcessResult_p()
{
    if (!dptr->m_notify_remarks.holdsField(4))
        dptr.detach();
    return dptr->m_notify_remarks.message<NotifyFriendAddProcess>();
}

bool NotifyMessage::hasFriendProcessResult() const
{
    return dptr->m_notify_remarks.holdsField(4);
}
NotifyFriendAddProcess &NotifyMessage::friendProcessResult() const
{
    Q_ASSERT(dptr->m_notify_remarks.holdsField(4));
    return *(dptr->m_notify_remarks.message<NotifyFriendAddProcess>());
}

NotifyFriendRemove *NotifyMessage::friendRemove_p()
{
    if (!dptr->m_notify_remarks.holdsField(7))
        dptr.detach();
    return dptr->m_notify_remarks.message<NotifyFriendRemove>();
}

bool NotifyMessage::hasFriendRemove() const
{
    return dptr->m_notify_remarks.holdsField(7);
}
NotifyFriendRemove &NotifyMessage::friendRemove() const
{
    Q_ASSERT(dptr->m_notify_remarks.holdsField(7));
    return *(dptr->m_notify_remarks.message<NotifyFriendRemove>());
}

NotifyNewChatSession *NotifyMessage::newChatSessionInfo_p()
{
    if (!dptr->m_notify_remarks.holdsField(5))
        dptr.detach();
    return dptr->m_notify_remarks.message<NotifyNewChatSession>();
}

bool NotifyMessage::hasNewChatSessionInfo() const
{
    return dptr->m_notify_remarks.holdsField(5);
}
NotifyNewChatSession &NotifyMessage::newChatSessionInfo() const
{
    Q_ASSERT(dptr->m_notify_remarks.holdsField(5));
    return *(dptr->m_notify_remarks.message<NotifyNewChatSession>());
}

NotifyNewMessage *NotifyMessage::newMessageInfo_p()
{
    if (!dptr->m_notify_remarks.holdsField(6))
        dptr.detach();
    return dptr->m_notify_remarks.message<NotifyNewMessage>();
}

bool NotifyMessage::hasNewMessageInfo() const
{
    return dptr->m_notify_remarks.holdsField(6);
}
NotifyNewMessage &NotifyMessage::newMessageInfo() const
{
    Q_ASSERT(dptr->m_notify_remarks.holdsField(6));
    return *(dptr->m_notify_remarks.message<NotifyNewMessage>());
}

void NotifyMessage::setNotifyEventId(const QString &notifyEventId)
{
    if (!dptr->m_notifyEventId || dptr->m_notifyEventId.value() != notifyEventId) {
        dptr.detach();
        dptr->m_notifyEventId = notifyEventId;
    }
}

void NotifyMessage::setNotifyEventId(QString &&notifyEventId)
{
    if (!dptr->m_notifyEventId || dptr->m_notifyEventId.value() != notifyEventId) {
        dptr.detach();
        dptr->m_notifyEventId = std::move(notifyEventId);
    }
}

void NotifyMessage::setNotifyEventId_p(QString notifyEventId)
{
    if (!dptr->m_notifyEventId || dptr->m_notifyEventId != notifyEventId) {
        dptr.detach();
        dptr->m_notifyEventId = notifyEventId;
    }
}

void NotifyMessage::clearNotifyEventId()
{
    if (dptr->m_notifyEventId.has_value()) {
        dptr.detach();
        dptr->m_notifyEventId.reset();
    }
}
void NotifyMessage::setNotifyType(NotifyTypeGadget::NotifyType notifyType)
{
    if (dptr->m_notifyType != notifyType) {
        dptr.detach();
        dptr->m_notifyType = notifyType;
    }
}

void NotifyMessage::setFriendAddApply(const NotifyFriendAddApply &friendAddApply)
{
    if (!dptr->m_notify_remarks.isEqual(friendAddApply, 3)) {
        dptr.detach();
        dptr->m_notify_remarks.setValue(friendAddApply, 3);
    }
}

void NotifyMessage::setFriendAddApply(NotifyFriendAddApply &&friendAddApply)
{
    if (!dptr->m_notify_remarks.isEqual(friendAddApply, 3)) {
        dptr.detach();
        dptr->m_notify_remarks.setValue(std::move(friendAddApply), 3);
    }
}

void NotifyMessage::setFriendAddApply_p(NotifyFriendAddApply *friendAddApply)
{
    const NotifyFriendAddApply &value = *friendAddApply;
    if (!dptr->m_notify_remarks.isEqual(value, 3)) {
        dptr.detach();
        dptr->m_notify_remarks.setValue(value, 3);
    }
}

void NotifyMessage::setFriendProcessResult(const NotifyFriendAddProcess &friendProcessResult)
{
    if (!dptr->m_notify_remarks.isEqual(friendProcessResult, 4)) {
        dptr.detach();
        dptr->m_notify_remarks.setValue(friendProcessResult, 4);
    }
}

void NotifyMessage::setFriendProcessResult(NotifyFriendAddProcess &&friendProcessResult)
{
    if (!dptr->m_notify_remarks.isEqual(friendProcessResult, 4)) {
        dptr.detach();
        dptr->m_notify_remarks.setValue(std::move(friendProcessResult), 4);
    }
}

void NotifyMessage::setFriendProcessResult_p(NotifyFriendAddProcess *friendProcessResult)
{
    const NotifyFriendAddProcess &value = *friendProcessResult;
    if (!dptr->m_notify_remarks.isEqual(value, 4)) {
        dptr.detach();
        dptr->m_notify_remarks.setValue(value, 4);
    }
}

void NotifyMessage::setFriendRemove(const NotifyFriendRemove &friendRemove)
{
    if (!dptr->m_notify_remarks.isEqual(friendRemove, 7)) {
        dptr.detach();
        dptr->m_notify_remarks.setValue(friendRemove, 7);
    }
}

void NotifyMessage::setFriendRemove(NotifyFriendRemove &&friendRemove)
{
    if (!dptr->m_notify_remarks.isEqual(friendRemove, 7)) {
        dptr.detach();
        dptr->m_notify_remarks.setValue(std::move(friendRemove), 7);
    }
}

void NotifyMessage::setFriendRemove_p(NotifyFriendRemove *friendRemove)
{
    const NotifyFriendRemove &value = *friendRemove;
    if (!dptr->m_notify_remarks.isEqual(value, 7)) {
        dptr.detach();
        dptr->m_notify_remarks.setValue(value, 7);
    }
}

void NotifyMessage::setNewChatSessionInfo(const NotifyNewChatSession &newChatSessionInfo)
{
    if (!dptr->m_notify_remarks.isEqual(newChatSessionInfo, 5)) {
        dptr.detach();
        dptr->m_notify_remarks.setValue(newChatSessionInfo, 5);
    }
}

void NotifyMessage::setNewChatSessionInfo(NotifyNewChatSession &&newChatSessionInfo)
{
    if (!dptr->m_notify_remarks.isEqual(newChatSessionInfo, 5)) {
        dptr.detach();
        dptr->m_notify_remarks.setValue(std::move(newChatSessionInfo), 5);
    }
}

void NotifyMessage::setNewChatSessionInfo_p(NotifyNewChatSession *newChatSessionInfo)
{
    const NotifyNewChatSession &value = *newChatSessionInfo;
    if (!dptr->m_notify_remarks.isEqual(value, 5)) {
        dptr.detach();
        dptr->m_notify_remarks.setValue(value, 5);
    }
}

void NotifyMessage::setNewMessageInfo(const NotifyNewMessage &newMessageInfo)
{
    if (!dptr->m_notify_remarks.isEqual(newMessageInfo, 6)) {
        dptr.detach();
        dptr->m_notify_remarks.setValue(newMessageInfo, 6);
    }
}

void NotifyMessage::setNewMessageInfo(NotifyNewMessage &&newMessageInfo)
{
    if (!dptr->m_notify_remarks.isEqual(newMessageInfo, 6)) {
        dptr.detach();
        dptr->m_notify_remarks.setValue(std::move(newMessageInfo), 6);
    }
}

void NotifyMessage::setNewMessageInfo_p(NotifyNewMessage *newMessageInfo)
{
    const NotifyNewMessage &value = *newMessageInfo;
    if (!dptr->m_notify_remarks.isEqual(value, 6)) {
        dptr.detach();
        dptr->m_notify_remarks.setValue(value, 6);
    }
}

NotifyMessage::Notify_remarksFields NotifyMessage::notify_remarksField() const
{
    return static_cast<Notify_remarksFields>(dptr->m_notify_remarks.fieldNumber());
}
void NotifyMessage::clearNotify_remarks()
{
    if (dptr->m_notify_remarks.fieldNumber() != QtProtobuf::InvalidFieldNumber) {
        dptr.detach();
        dptr->m_notify_remarks = QtProtobufPrivate::QProtobufOneof();
    }
}
} // namespace SnowK

#include "moc_notify.qpb.cpp"
