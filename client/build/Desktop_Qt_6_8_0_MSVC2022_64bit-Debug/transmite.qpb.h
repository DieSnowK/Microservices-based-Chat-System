/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#ifndef TRANSMITE_QPB_H
#define TRANSMITE_QPB_H

#include "base.qpb.h"

#include <QtProtobuf/qprotobuflazymessagepointer.h>
#include <QtProtobuf/qprotobufmessage.h>
#include <QtProtobuf/qprotobufobject.h>
#include <QtProtobuf/qprotobufoneof.h>
#include <QtProtobuf/qtprotobuftypes.h>

#include <QtCore/qbytearray.h>
#include <QtCore/qlist.h>
#include <QtCore/qmetatype.h>
#include <QtCore/qshareddata.h>
#include <QtCore/qstring.h>

#include <optional>

namespace SnowK {
class NewMessageReq;
using NewMessageReqRepeated = QList<NewMessageReq>;
namespace NewMessageReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace NewMessageReq_QtProtobufNested

class NewMessageRsp;
using NewMessageRspRepeated = QList<NewMessageRsp>;
namespace NewMessageRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace NewMessageRsp_QtProtobufNested

class GetTransmitTargetRsp;
using GetTransmitTargetRspRepeated = QList<GetTransmitTargetRsp>;
namespace GetTransmitTargetRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace GetTransmitTargetRsp_QtProtobufNested


class NewMessageReq_QtProtobufData;
class NewMessageReq : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString userId READ userId_p WRITE setUserId_p)
    Q_PROPERTY(bool hasUserId READ hasUserId)
    Q_PROPERTY(QString sessionId READ sessionId_p WRITE setSessionId_p)
    Q_PROPERTY(bool hasSessionId READ hasSessionId)
    Q_PROPERTY(QString chatSessionId READ chatSessionId WRITE setChatSessionId SCRIPTABLE true)
    Q_PROPERTY(SnowK::MessageContent *message_p READ message_p WRITE setMessage_p SCRIPTABLE false)
    Q_PROPERTY(bool hasMessage READ hasMessage)

public:
    using QtProtobufFieldEnum = NewMessageReq_QtProtobufNested::QtProtobufFieldEnum;
    NewMessageReq();
    ~NewMessageReq();
    NewMessageReq(const NewMessageReq &other);
    NewMessageReq &operator =(const NewMessageReq &other);
    NewMessageReq(NewMessageReq &&other) noexcept;
    NewMessageReq &operator =(NewMessageReq &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(NewMessageReq &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool hasUserId() const;
    QString userId() const;

    bool hasSessionId() const;
    QString sessionId() const;

    const QString &chatSessionId() const &;

    bool hasMessage() const;
    const MessageContent &message() const &;
    void clearMessage();
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setUserId(const QString &userId);
    void setUserId(QString &&userId);
    void clearUserId();
    void setSessionId(const QString &sessionId);
    void setSessionId(QString &&sessionId);
    void clearSessionId();
    void setChatSessionId(const QString &chatSessionId);
    void setChatSessionId(QString &&chatSessionId);
    void setMessage(const MessageContent &message);
    void setMessage(MessageContent &&message);
    static void registerTypes();

private:
    friend bool comparesEqual(const NewMessageReq &lhs, const NewMessageReq &rhs) noexcept;
    friend bool operator==(const NewMessageReq &lhs, const NewMessageReq &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const NewMessageReq &lhs, const NewMessageReq &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QString userId_p() const;
    QString sessionId_p() const;
    MessageContent *message_p();
    void setUserId_p(QString userId);
    void setSessionId_p(QString sessionId);
    void setMessage_p(MessageContent *message);
    QExplicitlySharedDataPointer<NewMessageReq_QtProtobufData> dptr;
};
namespace NewMessageReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    UserIdProtoFieldNumber = 2,
    SessionIdProtoFieldNumber = 3,
    ChatSessionIdProtoFieldNumber = 4,
    MessageProtoFieldNumber = 5,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace NewMessageReq_QtProtobufNested

class NewMessageRsp_QtProtobufData;
class NewMessageRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = NewMessageRsp_QtProtobufNested::QtProtobufFieldEnum;
    NewMessageRsp();
    ~NewMessageRsp();
    NewMessageRsp(const NewMessageRsp &other);
    NewMessageRsp &operator =(const NewMessageRsp &other);
    NewMessageRsp(NewMessageRsp &&other) noexcept;
    NewMessageRsp &operator =(NewMessageRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(NewMessageRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    const QString &errmsg() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    static void registerTypes();

private:
    friend bool comparesEqual(const NewMessageRsp &lhs, const NewMessageRsp &rhs) noexcept;
    friend bool operator==(const NewMessageRsp &lhs, const NewMessageRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const NewMessageRsp &lhs, const NewMessageRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<NewMessageRsp_QtProtobufData> dptr;
};
namespace NewMessageRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace NewMessageRsp_QtProtobufNested

class GetTransmitTargetRsp_QtProtobufData;
class GetTransmitTargetRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)
    Q_PROPERTY(SnowK::MessageInfo *message_p READ message_p WRITE setMessage_p SCRIPTABLE false)
    Q_PROPERTY(bool hasMessage READ hasMessage)
    Q_PROPERTY(QStringList targetIdList READ targetIdList WRITE setTargetIdList SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = GetTransmitTargetRsp_QtProtobufNested::QtProtobufFieldEnum;
    GetTransmitTargetRsp();
    ~GetTransmitTargetRsp();
    GetTransmitTargetRsp(const GetTransmitTargetRsp &other);
    GetTransmitTargetRsp &operator =(const GetTransmitTargetRsp &other);
    GetTransmitTargetRsp(GetTransmitTargetRsp &&other) noexcept;
    GetTransmitTargetRsp &operator =(GetTransmitTargetRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(GetTransmitTargetRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    const QString &errmsg() const &;

    bool hasMessage() const;
    const MessageInfo &message() const &;
    void clearMessage();

    const QStringList &targetIdList() const &;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    void setMessage(const MessageInfo &message);
    void setMessage(MessageInfo &&message);
    void setTargetIdList(const QStringList &targetIdList);
    void setTargetIdList(QStringList &&targetIdList);
    static void registerTypes();

private:
    friend bool comparesEqual(const GetTransmitTargetRsp &lhs, const GetTransmitTargetRsp &rhs) noexcept;
    friend bool operator==(const GetTransmitTargetRsp &lhs, const GetTransmitTargetRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const GetTransmitTargetRsp &lhs, const GetTransmitTargetRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    MessageInfo *message_p();
    void setMessage_p(MessageInfo *message);
    QExplicitlySharedDataPointer<GetTransmitTargetRsp_QtProtobufData> dptr;
};
namespace GetTransmitTargetRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
    MessageProtoFieldNumber = 4,
    TargetIdListProtoFieldNumber = 5,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace GetTransmitTargetRsp_QtProtobufNested
} // namespace SnowK

#endif // TRANSMITE_QPB_H
