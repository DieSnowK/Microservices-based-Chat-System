/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */


#include "file.qpb.h"

#include <QtProtobuf/qprotobufregistration.h>

#include <cmath>

namespace SnowK {

class GetSingleFileReq_QtProtobufData : public QSharedData
{
public:
    GetSingleFileReq_QtProtobufData()
        : QSharedData()
    {
    }

    GetSingleFileReq_QtProtobufData(const GetSingleFileReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_fileId(other.m_fileId),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId)
    {
    }

    QString m_requestId;
    QString m_fileId;
    std::optional<QString> m_userId;
    std::optional<QString> m_sessionId;
};

GetSingleFileReq::~GetSingleFileReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_GetSingleFileReq_uint_data;
    const char qt_protobuf_GetSingleFileReq_char_data[58];
} qt_protobuf_GetSingleFileReq_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        22, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        23, /* = requestId */
        33, /* = fileId */
        40, /* = userId */
        47, /* = sessionId */
        57, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = fileId */
        3, /* = userId */
        4, /* = sessionId */
        // Property indices:
        0, /* = requestId */
        1, /* = fileId */
        2, /* = userId */
        4, /* = sessionId */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = requestId */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = fileId */
        uint(QtProtobufPrivate::FieldFlag::Optional | QtProtobufPrivate::FieldFlag::ExplicitPresence), /* = userId */
        uint(QtProtobufPrivate::FieldFlag::Optional | QtProtobufPrivate::FieldFlag::ExplicitPresence), /* = sessionId */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.GetSingleFileReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0fileId\0userId\0sessionId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetSingleFileReq::staticPropertyOrdering = {
    &qt_protobuf_GetSingleFileReq_metadata.data
};

void GetSingleFileReq::registerTypes()
{
    qRegisterMetaType<GetSingleFileReq>();
    qRegisterMetaType<GetSingleFileReqRepeated>();
}

GetSingleFileReq::GetSingleFileReq()
    : QProtobufMessage(&GetSingleFileReq::staticMetaObject, &GetSingleFileReq::staticPropertyOrdering),
      dptr(new GetSingleFileReq_QtProtobufData)
{
}

GetSingleFileReq::GetSingleFileReq(const GetSingleFileReq &other)
    = default;
GetSingleFileReq &GetSingleFileReq::operator =(const GetSingleFileReq &other)
{
    GetSingleFileReq temp(other);
    swap(temp);
    return *this;
}
GetSingleFileReq::GetSingleFileReq(GetSingleFileReq &&other) noexcept
    = default;
bool comparesEqual(const GetSingleFileReq &lhs, const GetSingleFileReq &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_requestId == rhs.dptr->m_requestId
        && lhs.dptr->m_fileId == rhs.dptr->m_fileId
        && lhs.dptr->m_userId == rhs.dptr->m_userId
        && lhs.dptr->m_sessionId == rhs.dptr->m_sessionId;
}

const QString &GetSingleFileReq::requestId() const &
{
    return dptr->m_requestId;
}

const QString &GetSingleFileReq::fileId() const &
{
    return dptr->m_fileId;
}

QString GetSingleFileReq::userId_p() const
{
    return dptr->m_userId ?
        dptr->m_userId.value() : QString();
}

bool GetSingleFileReq::hasUserId() const
{
    return dptr->m_userId.has_value();
}
QString GetSingleFileReq::userId() const
{
    Q_ASSERT(dptr->m_userId.has_value());
    return dptr->m_userId.value();
}

QString GetSingleFileReq::sessionId_p() const
{
    return dptr->m_sessionId ?
        dptr->m_sessionId.value() : QString();
}

bool GetSingleFileReq::hasSessionId() const
{
    return dptr->m_sessionId.has_value();
}
QString GetSingleFileReq::sessionId() const
{
    Q_ASSERT(dptr->m_sessionId.has_value());
    return dptr->m_sessionId.value();
}

void GetSingleFileReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetSingleFileReq::setRequestId(QString &&requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = std::move(requestId);
    }
}

void GetSingleFileReq::setFileId(const QString &fileId)
{
    if (dptr->m_fileId != fileId) {
        dptr.detach();
        dptr->m_fileId = fileId;
    }
}

void GetSingleFileReq::setFileId(QString &&fileId)
{
    if (dptr->m_fileId != fileId) {
        dptr.detach();
        dptr->m_fileId = std::move(fileId);
    }
}

void GetSingleFileReq::setUserId(const QString &userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void GetSingleFileReq::setUserId(QString &&userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = std::move(userId);
    }
}

void GetSingleFileReq::setUserId_p(QString userId)
{
    if (!dptr->m_userId || dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void GetSingleFileReq::clearUserId()
{
    if (dptr->m_userId.has_value()) {
        dptr.detach();
        dptr->m_userId.reset();
    }
}
void GetSingleFileReq::setSessionId(const QString &sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void GetSingleFileReq::setSessionId(QString &&sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = std::move(sessionId);
    }
}

void GetSingleFileReq::setSessionId_p(QString sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void GetSingleFileReq::clearSessionId()
{
    if (dptr->m_sessionId.has_value()) {
        dptr.detach();
        dptr->m_sessionId.reset();
    }
}

class GetSingleFileRsp_QtProtobufData : public QSharedData
{
public:
    GetSingleFileRsp_QtProtobufData()
        : QSharedData(),
          m_success(false),
          m_fileData(nullptr)
    {
    }

    GetSingleFileRsp_QtProtobufData(const GetSingleFileRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_fileData(other.m_fileData
                                               ? new FileDownloadData(*other.m_fileData)
                                               : nullptr)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    QtProtobufPrivate::QProtobufLazyMessagePointer<FileDownloadData> m_fileData;
};

GetSingleFileRsp::~GetSingleFileRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_GetSingleFileRsp_uint_data;
    const char qt_protobuf_GetSingleFileRsp_char_data[58];
} qt_protobuf_GetSingleFileRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        22, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        23, /* = requestId */
        33, /* = success */
        41, /* = errmsg */
        48, /* = fileData */
        57, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = fileData */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = fileData */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = requestId */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = success */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = errmsg */
        uint(QtProtobufPrivate::FieldFlag::ExplicitPresence | QtProtobufPrivate::FieldFlag::Message), /* = fileData */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.GetSingleFileRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0fileData\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetSingleFileRsp::staticPropertyOrdering = {
    &qt_protobuf_GetSingleFileRsp_metadata.data
};

void GetSingleFileRsp::registerTypes()
{
    qRegisterMetaType<GetSingleFileRsp>();
    qRegisterMetaType<GetSingleFileRspRepeated>();
}

GetSingleFileRsp::GetSingleFileRsp()
    : QProtobufMessage(&GetSingleFileRsp::staticMetaObject, &GetSingleFileRsp::staticPropertyOrdering),
      dptr(new GetSingleFileRsp_QtProtobufData)
{
}

GetSingleFileRsp::GetSingleFileRsp(const GetSingleFileRsp &other)
    = default;
GetSingleFileRsp &GetSingleFileRsp::operator =(const GetSingleFileRsp &other)
{
    GetSingleFileRsp temp(other);
    swap(temp);
    return *this;
}
GetSingleFileRsp::GetSingleFileRsp(GetSingleFileRsp &&other) noexcept
    = default;
bool comparesEqual(const GetSingleFileRsp &lhs, const GetSingleFileRsp &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_requestId == rhs.dptr->m_requestId
        && lhs.dptr->m_success == rhs.dptr->m_success
        && lhs.dptr->m_errmsg == rhs.dptr->m_errmsg
        && (lhs.dptr->m_fileData == rhs.dptr->m_fileData
            || *lhs.dptr->m_fileData == *rhs.dptr->m_fileData);
}

const QString &GetSingleFileRsp::requestId() const &
{
    return dptr->m_requestId;
}

bool GetSingleFileRsp::success() const
{
    return dptr->m_success;
}

const QString &GetSingleFileRsp::errmsg() const &
{
    return dptr->m_errmsg;
}

FileDownloadData *GetSingleFileRsp::fileData_p()
{
    if (!dptr->m_fileData)
        dptr.detach();
    return dptr->m_fileData.get();
}

bool GetSingleFileRsp::hasFileData() const
{
    return dptr->m_fileData.operator bool();
}

const FileDownloadData &GetSingleFileRsp::fileData() const &
{
    return *dptr->m_fileData;
}

void GetSingleFileRsp::clearFileData()
{
    if (dptr->m_fileData) {
        dptr.detach();
        dptr->m_fileData.reset();
    }
}

void GetSingleFileRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetSingleFileRsp::setRequestId(QString &&requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = std::move(requestId);
    }
}

void GetSingleFileRsp::setSuccess(bool success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void GetSingleFileRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void GetSingleFileRsp::setErrmsg(QString &&errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = std::move(errmsg);
    }
}

void GetSingleFileRsp::setFileData_p(FileDownloadData *fileData)
{
    if (dptr->m_fileData.get() != fileData) {
        dptr.detach();
        dptr->m_fileData.reset(fileData);
    }
}

void GetSingleFileRsp::setFileData(const FileDownloadData &fileData)
{
    if (*dptr->m_fileData != fileData) {
        dptr.detach();
        *dptr->m_fileData = fileData;
    }
}

void GetSingleFileRsp::setFileData(FileDownloadData &&fileData)
{
    if (*dptr->m_fileData != fileData) {
        dptr.detach();
        *dptr->m_fileData = std::move(fileData);
    }
}


class GetMultiFileReq_QtProtobufData : public QSharedData
{
public:
    GetMultiFileReq_QtProtobufData()
        : QSharedData()
    {
    }

    GetMultiFileReq_QtProtobufData(const GetMultiFileReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId),
          m_fileIdList(other.m_fileIdList)
    {
    }

    QString m_requestId;
    std::optional<QString> m_userId;
    std::optional<QString> m_sessionId;
    QStringList m_fileIdList;
};

GetMultiFileReq::~GetMultiFileReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_GetMultiFileReq_uint_data;
    const char qt_protobuf_GetMultiFileReq_char_data[61];
} qt_protobuf_GetMultiFileReq_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        21, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        22, /* = requestId */
        32, /* = userId */
        39, /* = sessionId */
        49, /* = fileIdList */
        60, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = userId */
        3, /* = sessionId */
        4, /* = fileIdList */
        // Property indices:
        0, /* = requestId */
        1, /* = userId */
        3, /* = sessionId */
        5, /* = fileIdList */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = requestId */
        uint(QtProtobufPrivate::FieldFlag::Optional | QtProtobufPrivate::FieldFlag::ExplicitPresence), /* = userId */
        uint(QtProtobufPrivate::FieldFlag::Optional | QtProtobufPrivate::FieldFlag::ExplicitPresence), /* = sessionId */
        uint(QtProtobufPrivate::FieldFlag::Repeated), /* = fileIdList */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.GetMultiFileReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0userId\0sessionId\0fileIdList\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetMultiFileReq::staticPropertyOrdering = {
    &qt_protobuf_GetMultiFileReq_metadata.data
};

void GetMultiFileReq::registerTypes()
{
    qRegisterMetaType<GetMultiFileReq>();
    qRegisterMetaType<GetMultiFileReqRepeated>();
}

GetMultiFileReq::GetMultiFileReq()
    : QProtobufMessage(&GetMultiFileReq::staticMetaObject, &GetMultiFileReq::staticPropertyOrdering),
      dptr(new GetMultiFileReq_QtProtobufData)
{
}

GetMultiFileReq::GetMultiFileReq(const GetMultiFileReq &other)
    = default;
GetMultiFileReq &GetMultiFileReq::operator =(const GetMultiFileReq &other)
{
    GetMultiFileReq temp(other);
    swap(temp);
    return *this;
}
GetMultiFileReq::GetMultiFileReq(GetMultiFileReq &&other) noexcept
    = default;
bool comparesEqual(const GetMultiFileReq &lhs, const GetMultiFileReq &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_requestId == rhs.dptr->m_requestId
        && lhs.dptr->m_userId == rhs.dptr->m_userId
        && lhs.dptr->m_sessionId == rhs.dptr->m_sessionId
        && lhs.dptr->m_fileIdList == rhs.dptr->m_fileIdList;
}

const QString &GetMultiFileReq::requestId() const &
{
    return dptr->m_requestId;
}

QString GetMultiFileReq::userId_p() const
{
    return dptr->m_userId ?
        dptr->m_userId.value() : QString();
}

bool GetMultiFileReq::hasUserId() const
{
    return dptr->m_userId.has_value();
}
QString GetMultiFileReq::userId() const
{
    Q_ASSERT(dptr->m_userId.has_value());
    return dptr->m_userId.value();
}

QString GetMultiFileReq::sessionId_p() const
{
    return dptr->m_sessionId ?
        dptr->m_sessionId.value() : QString();
}

bool GetMultiFileReq::hasSessionId() const
{
    return dptr->m_sessionId.has_value();
}
QString GetMultiFileReq::sessionId() const
{
    Q_ASSERT(dptr->m_sessionId.has_value());
    return dptr->m_sessionId.value();
}

const QStringList &GetMultiFileReq::fileIdList() const &
{
    return dptr->m_fileIdList;
}

void GetMultiFileReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetMultiFileReq::setRequestId(QString &&requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = std::move(requestId);
    }
}

void GetMultiFileReq::setUserId(const QString &userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void GetMultiFileReq::setUserId(QString &&userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = std::move(userId);
    }
}

void GetMultiFileReq::setUserId_p(QString userId)
{
    if (!dptr->m_userId || dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void GetMultiFileReq::clearUserId()
{
    if (dptr->m_userId.has_value()) {
        dptr.detach();
        dptr->m_userId.reset();
    }
}
void GetMultiFileReq::setSessionId(const QString &sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void GetMultiFileReq::setSessionId(QString &&sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = std::move(sessionId);
    }
}

void GetMultiFileReq::setSessionId_p(QString sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void GetMultiFileReq::clearSessionId()
{
    if (dptr->m_sessionId.has_value()) {
        dptr.detach();
        dptr->m_sessionId.reset();
    }
}
void GetMultiFileReq::setFileIdList(const QStringList &fileIdList)
{
    if (dptr->m_fileIdList != fileIdList) {
        dptr.detach();
        dptr->m_fileIdList = fileIdList;
    }
}

void GetMultiFileReq::setFileIdList(QStringList &&fileIdList)
{
    if (dptr->m_fileIdList != fileIdList) {
        dptr.detach();
        dptr->m_fileIdList = std::move(fileIdList);
    }
}


class GetMultiFileRsp_QtProtobufData : public QSharedData
{
public:
    GetMultiFileRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    GetMultiFileRsp_QtProtobufData(const GetMultiFileRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_fileData(other.m_fileData)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    GetMultiFileRsp::FileDataEntry m_fileData;
};

GetMultiFileRsp::~GetMultiFileRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_GetMultiFileRsp_uint_data;
    const char qt_protobuf_GetMultiFileRsp_char_data[57];
} qt_protobuf_GetMultiFileRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        21, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        22, /* = requestId */
        32, /* = success */
        40, /* = errmsg */
        47, /* = fileData */
        56, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = fileData */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = fileData */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = requestId */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = success */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = errmsg */
        uint(QtProtobufPrivate::FieldFlag::Map | QtProtobufPrivate::FieldFlag::Message), /* = fileData */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.GetMultiFileRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0fileData\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetMultiFileRsp::staticPropertyOrdering = {
    &qt_protobuf_GetMultiFileRsp_metadata.data
};

void GetMultiFileRsp::registerTypes()
{
    qRegisterMetaType<GetMultiFileRsp>();
    qRegisterMetaType<GetMultiFileRspRepeated>();
    qRegisterMetaType<GetMultiFileRsp::FileDataEntry>();
    qRegisterProtobufMapType<QString, FileDownloadData>();
}

GetMultiFileRsp::GetMultiFileRsp()
    : QProtobufMessage(&GetMultiFileRsp::staticMetaObject, &GetMultiFileRsp::staticPropertyOrdering),
      dptr(new GetMultiFileRsp_QtProtobufData)
{
}

GetMultiFileRsp::GetMultiFileRsp(const GetMultiFileRsp &other)
    = default;
GetMultiFileRsp &GetMultiFileRsp::operator =(const GetMultiFileRsp &other)
{
    GetMultiFileRsp temp(other);
    swap(temp);
    return *this;
}
GetMultiFileRsp::GetMultiFileRsp(GetMultiFileRsp &&other) noexcept
    = default;
bool comparesEqual(const GetMultiFileRsp &lhs, const GetMultiFileRsp &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_requestId == rhs.dptr->m_requestId
        && lhs.dptr->m_success == rhs.dptr->m_success
        && lhs.dptr->m_errmsg == rhs.dptr->m_errmsg
        && lhs.dptr->m_fileData == rhs.dptr->m_fileData;
}

const QString &GetMultiFileRsp::requestId() const &
{
    return dptr->m_requestId;
}

bool GetMultiFileRsp::success() const
{
    return dptr->m_success;
}

const QString &GetMultiFileRsp::errmsg() const &
{
    return dptr->m_errmsg;
}

const GetMultiFileRsp::FileDataEntry &GetMultiFileRsp::fileData() const &
{
    return dptr->m_fileData;
}

void GetMultiFileRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetMultiFileRsp::setRequestId(QString &&requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = std::move(requestId);
    }
}

void GetMultiFileRsp::setSuccess(bool success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void GetMultiFileRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void GetMultiFileRsp::setErrmsg(QString &&errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = std::move(errmsg);
    }
}

void GetMultiFileRsp::setFileData(const GetMultiFileRsp::FileDataEntry &fileData)
{
    if (dptr->m_fileData != fileData) {
        dptr.detach();
        dptr->m_fileData = fileData;
    }
}

void GetMultiFileRsp::setFileData(GetMultiFileRsp::FileDataEntry &&fileData)
{
    if (dptr->m_fileData != fileData) {
        dptr.detach();
        dptr->m_fileData = std::move(fileData);
    }
}


class PutSingleFileReq_QtProtobufData : public QSharedData
{
public:
    PutSingleFileReq_QtProtobufData()
        : QSharedData(),
          m_fileData(nullptr)
    {
    }

    PutSingleFileReq_QtProtobufData(const PutSingleFileReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId),
          m_fileData(other.m_fileData
                                               ? new FileUploadData(*other.m_fileData)
                                               : nullptr)
    {
    }

    QString m_requestId;
    std::optional<QString> m_userId;
    std::optional<QString> m_sessionId;
    QtProtobufPrivate::QProtobufLazyMessagePointer<FileUploadData> m_fileData;
};

PutSingleFileReq::~PutSingleFileReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_PutSingleFileReq_uint_data;
    const char qt_protobuf_PutSingleFileReq_char_data[60];
} qt_protobuf_PutSingleFileReq_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        22, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        23, /* = requestId */
        33, /* = userId */
        40, /* = sessionId */
        50, /* = fileData */
        59, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = userId */
        3, /* = sessionId */
        4, /* = fileData */
        // Property indices:
        0, /* = requestId */
        1, /* = userId */
        3, /* = sessionId */
        5, /* = fileData */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = requestId */
        uint(QtProtobufPrivate::FieldFlag::Optional | QtProtobufPrivate::FieldFlag::ExplicitPresence), /* = userId */
        uint(QtProtobufPrivate::FieldFlag::Optional | QtProtobufPrivate::FieldFlag::ExplicitPresence), /* = sessionId */
        uint(QtProtobufPrivate::FieldFlag::ExplicitPresence | QtProtobufPrivate::FieldFlag::Message), /* = fileData */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.PutSingleFileReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0userId\0sessionId\0fileData\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering PutSingleFileReq::staticPropertyOrdering = {
    &qt_protobuf_PutSingleFileReq_metadata.data
};

void PutSingleFileReq::registerTypes()
{
    qRegisterMetaType<PutSingleFileReq>();
    qRegisterMetaType<PutSingleFileReqRepeated>();
}

PutSingleFileReq::PutSingleFileReq()
    : QProtobufMessage(&PutSingleFileReq::staticMetaObject, &PutSingleFileReq::staticPropertyOrdering),
      dptr(new PutSingleFileReq_QtProtobufData)
{
}

PutSingleFileReq::PutSingleFileReq(const PutSingleFileReq &other)
    = default;
PutSingleFileReq &PutSingleFileReq::operator =(const PutSingleFileReq &other)
{
    PutSingleFileReq temp(other);
    swap(temp);
    return *this;
}
PutSingleFileReq::PutSingleFileReq(PutSingleFileReq &&other) noexcept
    = default;
bool comparesEqual(const PutSingleFileReq &lhs, const PutSingleFileReq &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_requestId == rhs.dptr->m_requestId
        && lhs.dptr->m_userId == rhs.dptr->m_userId
        && lhs.dptr->m_sessionId == rhs.dptr->m_sessionId
        && (lhs.dptr->m_fileData == rhs.dptr->m_fileData
            || *lhs.dptr->m_fileData == *rhs.dptr->m_fileData);
}

const QString &PutSingleFileReq::requestId() const &
{
    return dptr->m_requestId;
}

QString PutSingleFileReq::userId_p() const
{
    return dptr->m_userId ?
        dptr->m_userId.value() : QString();
}

bool PutSingleFileReq::hasUserId() const
{
    return dptr->m_userId.has_value();
}
QString PutSingleFileReq::userId() const
{
    Q_ASSERT(dptr->m_userId.has_value());
    return dptr->m_userId.value();
}

QString PutSingleFileReq::sessionId_p() const
{
    return dptr->m_sessionId ?
        dptr->m_sessionId.value() : QString();
}

bool PutSingleFileReq::hasSessionId() const
{
    return dptr->m_sessionId.has_value();
}
QString PutSingleFileReq::sessionId() const
{
    Q_ASSERT(dptr->m_sessionId.has_value());
    return dptr->m_sessionId.value();
}

FileUploadData *PutSingleFileReq::fileData_p()
{
    if (!dptr->m_fileData)
        dptr.detach();
    return dptr->m_fileData.get();
}

bool PutSingleFileReq::hasFileData() const
{
    return dptr->m_fileData.operator bool();
}

const FileUploadData &PutSingleFileReq::fileData() const &
{
    return *dptr->m_fileData;
}

void PutSingleFileReq::clearFileData()
{
    if (dptr->m_fileData) {
        dptr.detach();
        dptr->m_fileData.reset();
    }
}

void PutSingleFileReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void PutSingleFileReq::setRequestId(QString &&requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = std::move(requestId);
    }
}

void PutSingleFileReq::setUserId(const QString &userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void PutSingleFileReq::setUserId(QString &&userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = std::move(userId);
    }
}

void PutSingleFileReq::setUserId_p(QString userId)
{
    if (!dptr->m_userId || dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void PutSingleFileReq::clearUserId()
{
    if (dptr->m_userId.has_value()) {
        dptr.detach();
        dptr->m_userId.reset();
    }
}
void PutSingleFileReq::setSessionId(const QString &sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void PutSingleFileReq::setSessionId(QString &&sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = std::move(sessionId);
    }
}

void PutSingleFileReq::setSessionId_p(QString sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void PutSingleFileReq::clearSessionId()
{
    if (dptr->m_sessionId.has_value()) {
        dptr.detach();
        dptr->m_sessionId.reset();
    }
}
void PutSingleFileReq::setFileData_p(FileUploadData *fileData)
{
    if (dptr->m_fileData.get() != fileData) {
        dptr.detach();
        dptr->m_fileData.reset(fileData);
    }
}

void PutSingleFileReq::setFileData(const FileUploadData &fileData)
{
    if (*dptr->m_fileData != fileData) {
        dptr.detach();
        *dptr->m_fileData = fileData;
    }
}

void PutSingleFileReq::setFileData(FileUploadData &&fileData)
{
    if (*dptr->m_fileData != fileData) {
        dptr.detach();
        *dptr->m_fileData = std::move(fileData);
    }
}


class PutSingleFileRsp_QtProtobufData : public QSharedData
{
public:
    PutSingleFileRsp_QtProtobufData()
        : QSharedData(),
          m_success(false),
          m_fileInfo(nullptr)
    {
    }

    PutSingleFileRsp_QtProtobufData(const PutSingleFileRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_fileInfo(other.m_fileInfo
                                               ? new FileMessageInfo(*other.m_fileInfo)
                                               : nullptr)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    QtProtobufPrivate::QProtobufLazyMessagePointer<FileMessageInfo> m_fileInfo;
};

PutSingleFileRsp::~PutSingleFileRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_PutSingleFileRsp_uint_data;
    const char qt_protobuf_PutSingleFileRsp_char_data[58];
} qt_protobuf_PutSingleFileRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        22, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        23, /* = requestId */
        33, /* = success */
        41, /* = errmsg */
        48, /* = fileInfo */
        57, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = fileInfo */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = fileInfo */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = requestId */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = success */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = errmsg */
        uint(QtProtobufPrivate::FieldFlag::ExplicitPresence | QtProtobufPrivate::FieldFlag::Message), /* = fileInfo */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.PutSingleFileRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0fileInfo\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering PutSingleFileRsp::staticPropertyOrdering = {
    &qt_protobuf_PutSingleFileRsp_metadata.data
};

void PutSingleFileRsp::registerTypes()
{
    qRegisterMetaType<PutSingleFileRsp>();
    qRegisterMetaType<PutSingleFileRspRepeated>();
}

PutSingleFileRsp::PutSingleFileRsp()
    : QProtobufMessage(&PutSingleFileRsp::staticMetaObject, &PutSingleFileRsp::staticPropertyOrdering),
      dptr(new PutSingleFileRsp_QtProtobufData)
{
}

PutSingleFileRsp::PutSingleFileRsp(const PutSingleFileRsp &other)
    = default;
PutSingleFileRsp &PutSingleFileRsp::operator =(const PutSingleFileRsp &other)
{
    PutSingleFileRsp temp(other);
    swap(temp);
    return *this;
}
PutSingleFileRsp::PutSingleFileRsp(PutSingleFileRsp &&other) noexcept
    = default;
bool comparesEqual(const PutSingleFileRsp &lhs, const PutSingleFileRsp &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_requestId == rhs.dptr->m_requestId
        && lhs.dptr->m_success == rhs.dptr->m_success
        && lhs.dptr->m_errmsg == rhs.dptr->m_errmsg
        && (lhs.dptr->m_fileInfo == rhs.dptr->m_fileInfo
            || *lhs.dptr->m_fileInfo == *rhs.dptr->m_fileInfo);
}

const QString &PutSingleFileRsp::requestId() const &
{
    return dptr->m_requestId;
}

bool PutSingleFileRsp::success() const
{
    return dptr->m_success;
}

const QString &PutSingleFileRsp::errmsg() const &
{
    return dptr->m_errmsg;
}

FileMessageInfo *PutSingleFileRsp::fileInfo_p()
{
    if (!dptr->m_fileInfo)
        dptr.detach();
    return dptr->m_fileInfo.get();
}

bool PutSingleFileRsp::hasFileInfo() const
{
    return dptr->m_fileInfo.operator bool();
}

const FileMessageInfo &PutSingleFileRsp::fileInfo() const &
{
    return *dptr->m_fileInfo;
}

void PutSingleFileRsp::clearFileInfo()
{
    if (dptr->m_fileInfo) {
        dptr.detach();
        dptr->m_fileInfo.reset();
    }
}

void PutSingleFileRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void PutSingleFileRsp::setRequestId(QString &&requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = std::move(requestId);
    }
}

void PutSingleFileRsp::setSuccess(bool success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void PutSingleFileRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void PutSingleFileRsp::setErrmsg(QString &&errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = std::move(errmsg);
    }
}

void PutSingleFileRsp::setFileInfo_p(FileMessageInfo *fileInfo)
{
    if (dptr->m_fileInfo.get() != fileInfo) {
        dptr.detach();
        dptr->m_fileInfo.reset(fileInfo);
    }
}

void PutSingleFileRsp::setFileInfo(const FileMessageInfo &fileInfo)
{
    if (*dptr->m_fileInfo != fileInfo) {
        dptr.detach();
        *dptr->m_fileInfo = fileInfo;
    }
}

void PutSingleFileRsp::setFileInfo(FileMessageInfo &&fileInfo)
{
    if (*dptr->m_fileInfo != fileInfo) {
        dptr.detach();
        *dptr->m_fileInfo = std::move(fileInfo);
    }
}


class PutMultiFileReq_QtProtobufData : public QSharedData
{
public:
    PutMultiFileReq_QtProtobufData()
        : QSharedData()
    {
    }

    PutMultiFileReq_QtProtobufData(const PutMultiFileReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId),
          m_fileData(other.m_fileData)
    {
    }

    QString m_requestId;
    std::optional<QString> m_userId;
    std::optional<QString> m_sessionId;
    FileUploadDataRepeated m_fileData;
};

PutMultiFileReq::~PutMultiFileReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_PutMultiFileReq_uint_data;
    const char qt_protobuf_PutMultiFileReq_char_data[59];
} qt_protobuf_PutMultiFileReq_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        21, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        22, /* = requestId */
        32, /* = userId */
        39, /* = sessionId */
        49, /* = fileData */
        58, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = userId */
        3, /* = sessionId */
        4, /* = fileData */
        // Property indices:
        0, /* = requestId */
        1, /* = userId */
        3, /* = sessionId */
        5, /* = fileData */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = requestId */
        uint(QtProtobufPrivate::FieldFlag::Optional | QtProtobufPrivate::FieldFlag::ExplicitPresence), /* = userId */
        uint(QtProtobufPrivate::FieldFlag::Optional | QtProtobufPrivate::FieldFlag::ExplicitPresence), /* = sessionId */
        uint(QtProtobufPrivate::FieldFlag::Repeated | QtProtobufPrivate::FieldFlag::Message), /* = fileData */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.PutMultiFileReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0userId\0sessionId\0fileData\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering PutMultiFileReq::staticPropertyOrdering = {
    &qt_protobuf_PutMultiFileReq_metadata.data
};

void PutMultiFileReq::registerTypes()
{
    qRegisterMetaType<PutMultiFileReq>();
    qRegisterMetaType<PutMultiFileReqRepeated>();
}

PutMultiFileReq::PutMultiFileReq()
    : QProtobufMessage(&PutMultiFileReq::staticMetaObject, &PutMultiFileReq::staticPropertyOrdering),
      dptr(new PutMultiFileReq_QtProtobufData)
{
}

PutMultiFileReq::PutMultiFileReq(const PutMultiFileReq &other)
    = default;
PutMultiFileReq &PutMultiFileReq::operator =(const PutMultiFileReq &other)
{
    PutMultiFileReq temp(other);
    swap(temp);
    return *this;
}
PutMultiFileReq::PutMultiFileReq(PutMultiFileReq &&other) noexcept
    = default;
bool comparesEqual(const PutMultiFileReq &lhs, const PutMultiFileReq &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_requestId == rhs.dptr->m_requestId
        && lhs.dptr->m_userId == rhs.dptr->m_userId
        && lhs.dptr->m_sessionId == rhs.dptr->m_sessionId
        && lhs.dptr->m_fileData == rhs.dptr->m_fileData;
}

const QString &PutMultiFileReq::requestId() const &
{
    return dptr->m_requestId;
}

QString PutMultiFileReq::userId_p() const
{
    return dptr->m_userId ?
        dptr->m_userId.value() : QString();
}

bool PutMultiFileReq::hasUserId() const
{
    return dptr->m_userId.has_value();
}
QString PutMultiFileReq::userId() const
{
    Q_ASSERT(dptr->m_userId.has_value());
    return dptr->m_userId.value();
}

QString PutMultiFileReq::sessionId_p() const
{
    return dptr->m_sessionId ?
        dptr->m_sessionId.value() : QString();
}

bool PutMultiFileReq::hasSessionId() const
{
    return dptr->m_sessionId.has_value();
}
QString PutMultiFileReq::sessionId() const
{
    Q_ASSERT(dptr->m_sessionId.has_value());
    return dptr->m_sessionId.value();
}

const FileUploadDataRepeated &PutMultiFileReq::fileData() const &
{
    return dptr->m_fileData;
}

void PutMultiFileReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void PutMultiFileReq::setRequestId(QString &&requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = std::move(requestId);
    }
}

void PutMultiFileReq::setUserId(const QString &userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void PutMultiFileReq::setUserId(QString &&userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = std::move(userId);
    }
}

void PutMultiFileReq::setUserId_p(QString userId)
{
    if (!dptr->m_userId || dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void PutMultiFileReq::clearUserId()
{
    if (dptr->m_userId.has_value()) {
        dptr.detach();
        dptr->m_userId.reset();
    }
}
void PutMultiFileReq::setSessionId(const QString &sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void PutMultiFileReq::setSessionId(QString &&sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = std::move(sessionId);
    }
}

void PutMultiFileReq::setSessionId_p(QString sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void PutMultiFileReq::clearSessionId()
{
    if (dptr->m_sessionId.has_value()) {
        dptr.detach();
        dptr->m_sessionId.reset();
    }
}
void PutMultiFileReq::setFileData(const FileUploadDataRepeated &fileData)
{
    if (dptr->m_fileData != fileData) {
        dptr.detach();
        dptr->m_fileData = fileData;
    }
}

void PutMultiFileReq::setFileData(FileUploadDataRepeated &&fileData)
{
    if (dptr->m_fileData != fileData) {
        dptr.detach();
        dptr->m_fileData = std::move(fileData);
    }
}


class PutMultiFileRsp_QtProtobufData : public QSharedData
{
public:
    PutMultiFileRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    PutMultiFileRsp_QtProtobufData(const PutMultiFileRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_fileInfo(other.m_fileInfo)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    FileMessageInfoRepeated m_fileInfo;
};

PutMultiFileRsp::~PutMultiFileRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_PutMultiFileRsp_uint_data;
    const char qt_protobuf_PutMultiFileRsp_char_data[57];
} qt_protobuf_PutMultiFileRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        21, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        22, /* = requestId */
        32, /* = success */
        40, /* = errmsg */
        47, /* = fileInfo */
        56, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = fileInfo */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = fileInfo */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = requestId */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = success */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = errmsg */
        uint(QtProtobufPrivate::FieldFlag::Repeated | QtProtobufPrivate::FieldFlag::Message), /* = fileInfo */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.PutMultiFileRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0fileInfo\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering PutMultiFileRsp::staticPropertyOrdering = {
    &qt_protobuf_PutMultiFileRsp_metadata.data
};

void PutMultiFileRsp::registerTypes()
{
    qRegisterMetaType<PutMultiFileRsp>();
    qRegisterMetaType<PutMultiFileRspRepeated>();
}

PutMultiFileRsp::PutMultiFileRsp()
    : QProtobufMessage(&PutMultiFileRsp::staticMetaObject, &PutMultiFileRsp::staticPropertyOrdering),
      dptr(new PutMultiFileRsp_QtProtobufData)
{
}

PutMultiFileRsp::PutMultiFileRsp(const PutMultiFileRsp &other)
    = default;
PutMultiFileRsp &PutMultiFileRsp::operator =(const PutMultiFileRsp &other)
{
    PutMultiFileRsp temp(other);
    swap(temp);
    return *this;
}
PutMultiFileRsp::PutMultiFileRsp(PutMultiFileRsp &&other) noexcept
    = default;
bool comparesEqual(const PutMultiFileRsp &lhs, const PutMultiFileRsp &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_requestId == rhs.dptr->m_requestId
        && lhs.dptr->m_success == rhs.dptr->m_success
        && lhs.dptr->m_errmsg == rhs.dptr->m_errmsg
        && lhs.dptr->m_fileInfo == rhs.dptr->m_fileInfo;
}

const QString &PutMultiFileRsp::requestId() const &
{
    return dptr->m_requestId;
}

bool PutMultiFileRsp::success() const
{
    return dptr->m_success;
}

const QString &PutMultiFileRsp::errmsg() const &
{
    return dptr->m_errmsg;
}

const FileMessageInfoRepeated &PutMultiFileRsp::fileInfo() const &
{
    return dptr->m_fileInfo;
}

void PutMultiFileRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void PutMultiFileRsp::setRequestId(QString &&requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = std::move(requestId);
    }
}

void PutMultiFileRsp::setSuccess(bool success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void PutMultiFileRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void PutMultiFileRsp::setErrmsg(QString &&errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = std::move(errmsg);
    }
}

void PutMultiFileRsp::setFileInfo(const FileMessageInfoRepeated &fileInfo)
{
    if (dptr->m_fileInfo != fileInfo) {
        dptr.detach();
        dptr->m_fileInfo = fileInfo;
    }
}

void PutMultiFileRsp::setFileInfo(FileMessageInfoRepeated &&fileInfo)
{
    if (dptr->m_fileInfo != fileInfo) {
        dptr.detach();
        dptr->m_fileInfo = std::move(fileInfo);
    }
}

} // namespace SnowK

#include "moc_file.qpb.cpp"
