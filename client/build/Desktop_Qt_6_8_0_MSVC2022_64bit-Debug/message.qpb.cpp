/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */


#include "message.qpb.h"

#include <QtProtobuf/qprotobufregistration.h>

#include <cmath>

namespace SnowK {

class GetHistoryMsgReq_QtProtobufData : public QSharedData
{
public:
    GetHistoryMsgReq_QtProtobufData()
        : QSharedData(),
          m_startTime(0),
          m_overTime(0)
    {
    }

    GetHistoryMsgReq_QtProtobufData(const GetHistoryMsgReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_chatSessionId(other.m_chatSessionId),
          m_startTime(other.m_startTime),
          m_overTime(other.m_overTime),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId)
    {
    }

    QString m_requestId;
    QString m_chatSessionId;
    QtProtobuf::int64 m_startTime;
    QtProtobuf::int64 m_overTime;
    std::optional<QString> m_userId;
    std::optional<QString> m_sessionId;
};

GetHistoryMsgReq::~GetHistoryMsgReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 25> qt_protobuf_GetHistoryMsgReq_uint_data;
    const char qt_protobuf_GetHistoryMsgReq_char_data[84];
} qt_protobuf_GetHistoryMsgReq_metadata {
    // data
    {
        0, /* = version */
        6, /* = num fields */
        7, /* = field number offset */
        13, /* = property index offset */
        19, /* = field flags offset */
        22, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        23, /* = requestId */
        33, /* = chatSessionId */
        47, /* = startTime */
        57, /* = overTime */
        66, /* = userId */
        73, /* = sessionId */
        83, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = chatSessionId */
        3, /* = startTime */
        4, /* = overTime */
        5, /* = userId */
        6, /* = sessionId */
        // Property indices:
        0, /* = requestId */
        1, /* = chatSessionId */
        2, /* = startTime */
        3, /* = overTime */
        4, /* = userId */
        6, /* = sessionId */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = requestId */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = chatSessionId */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = startTime */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = overTime */
        uint(QtProtobufPrivate::FieldFlag::Optional | QtProtobufPrivate::FieldFlag::ExplicitPresence), /* = userId */
        uint(QtProtobufPrivate::FieldFlag::Optional | QtProtobufPrivate::FieldFlag::ExplicitPresence), /* = sessionId */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.GetHistoryMsgReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0chatSessionId\0startTime\0overTime\0userId\0"
    "sessionId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetHistoryMsgReq::staticPropertyOrdering = {
    &qt_protobuf_GetHistoryMsgReq_metadata.data
};

void GetHistoryMsgReq::registerTypes()
{
    qRegisterMetaType<GetHistoryMsgReq>();
    qRegisterMetaType<GetHistoryMsgReqRepeated>();
}

GetHistoryMsgReq::GetHistoryMsgReq()
    : QProtobufMessage(&GetHistoryMsgReq::staticMetaObject, &GetHistoryMsgReq::staticPropertyOrdering),
      dptr(new GetHistoryMsgReq_QtProtobufData)
{
}

GetHistoryMsgReq::GetHistoryMsgReq(const GetHistoryMsgReq &other)
    = default;
GetHistoryMsgReq &GetHistoryMsgReq::operator =(const GetHistoryMsgReq &other)
{
    GetHistoryMsgReq temp(other);
    swap(temp);
    return *this;
}
GetHistoryMsgReq::GetHistoryMsgReq(GetHistoryMsgReq &&other) noexcept
    = default;
bool comparesEqual(const GetHistoryMsgReq &lhs, const GetHistoryMsgReq &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_requestId == rhs.dptr->m_requestId
        && lhs.dptr->m_chatSessionId == rhs.dptr->m_chatSessionId
        && lhs.dptr->m_startTime == rhs.dptr->m_startTime
        && lhs.dptr->m_overTime == rhs.dptr->m_overTime
        && lhs.dptr->m_userId == rhs.dptr->m_userId
        && lhs.dptr->m_sessionId == rhs.dptr->m_sessionId;
}

const QString &GetHistoryMsgReq::requestId() const &
{
    return dptr->m_requestId;
}

const QString &GetHistoryMsgReq::chatSessionId() const &
{
    return dptr->m_chatSessionId;
}

QtProtobuf::int64 GetHistoryMsgReq::startTime() const
{
    return dptr->m_startTime;
}

QtProtobuf::int64 GetHistoryMsgReq::overTime() const
{
    return dptr->m_overTime;
}

QString GetHistoryMsgReq::userId_p() const
{
    return dptr->m_userId ?
        dptr->m_userId.value() : QString();
}

bool GetHistoryMsgReq::hasUserId() const
{
    return dptr->m_userId.has_value();
}
QString GetHistoryMsgReq::userId() const
{
    Q_ASSERT(dptr->m_userId.has_value());
    return dptr->m_userId.value();
}

QString GetHistoryMsgReq::sessionId_p() const
{
    return dptr->m_sessionId ?
        dptr->m_sessionId.value() : QString();
}

bool GetHistoryMsgReq::hasSessionId() const
{
    return dptr->m_sessionId.has_value();
}
QString GetHistoryMsgReq::sessionId() const
{
    Q_ASSERT(dptr->m_sessionId.has_value());
    return dptr->m_sessionId.value();
}

void GetHistoryMsgReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetHistoryMsgReq::setRequestId(QString &&requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = std::move(requestId);
    }
}

void GetHistoryMsgReq::setChatSessionId(const QString &chatSessionId)
{
    if (dptr->m_chatSessionId != chatSessionId) {
        dptr.detach();
        dptr->m_chatSessionId = chatSessionId;
    }
}

void GetHistoryMsgReq::setChatSessionId(QString &&chatSessionId)
{
    if (dptr->m_chatSessionId != chatSessionId) {
        dptr.detach();
        dptr->m_chatSessionId = std::move(chatSessionId);
    }
}

void GetHistoryMsgReq::setStartTime(QtProtobuf::int64 startTime)
{
    if (dptr->m_startTime != startTime) {
        dptr.detach();
        dptr->m_startTime = startTime;
    }
}

void GetHistoryMsgReq::setOverTime(QtProtobuf::int64 overTime)
{
    if (dptr->m_overTime != overTime) {
        dptr.detach();
        dptr->m_overTime = overTime;
    }
}

void GetHistoryMsgReq::setUserId(const QString &userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void GetHistoryMsgReq::setUserId(QString &&userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = std::move(userId);
    }
}

void GetHistoryMsgReq::setUserId_p(QString userId)
{
    if (!dptr->m_userId || dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void GetHistoryMsgReq::clearUserId()
{
    if (dptr->m_userId.has_value()) {
        dptr.detach();
        dptr->m_userId.reset();
    }
}
void GetHistoryMsgReq::setSessionId(const QString &sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void GetHistoryMsgReq::setSessionId(QString &&sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = std::move(sessionId);
    }
}

void GetHistoryMsgReq::setSessionId_p(QString sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void GetHistoryMsgReq::clearSessionId()
{
    if (dptr->m_sessionId.has_value()) {
        dptr.detach();
        dptr->m_sessionId.reset();
    }
}

class GetHistoryMsgRsp_QtProtobufData : public QSharedData
{
public:
    GetHistoryMsgRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    GetHistoryMsgRsp_QtProtobufData(const GetHistoryMsgRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_msgList(other.m_msgList)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    MessageInfoRepeated m_msgList;
};

GetHistoryMsgRsp::~GetHistoryMsgRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_GetHistoryMsgRsp_uint_data;
    const char qt_protobuf_GetHistoryMsgRsp_char_data[57];
} qt_protobuf_GetHistoryMsgRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        22, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        23, /* = requestId */
        33, /* = success */
        41, /* = errmsg */
        48, /* = msgList */
        56, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = msgList */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = msgList */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = requestId */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = success */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = errmsg */
        uint(QtProtobufPrivate::FieldFlag::Repeated | QtProtobufPrivate::FieldFlag::Message), /* = msgList */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.GetHistoryMsgRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0msgList\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetHistoryMsgRsp::staticPropertyOrdering = {
    &qt_protobuf_GetHistoryMsgRsp_metadata.data
};

void GetHistoryMsgRsp::registerTypes()
{
    qRegisterMetaType<GetHistoryMsgRsp>();
    qRegisterMetaType<GetHistoryMsgRspRepeated>();
}

GetHistoryMsgRsp::GetHistoryMsgRsp()
    : QProtobufMessage(&GetHistoryMsgRsp::staticMetaObject, &GetHistoryMsgRsp::staticPropertyOrdering),
      dptr(new GetHistoryMsgRsp_QtProtobufData)
{
}

GetHistoryMsgRsp::GetHistoryMsgRsp(const GetHistoryMsgRsp &other)
    = default;
GetHistoryMsgRsp &GetHistoryMsgRsp::operator =(const GetHistoryMsgRsp &other)
{
    GetHistoryMsgRsp temp(other);
    swap(temp);
    return *this;
}
GetHistoryMsgRsp::GetHistoryMsgRsp(GetHistoryMsgRsp &&other) noexcept
    = default;
bool comparesEqual(const GetHistoryMsgRsp &lhs, const GetHistoryMsgRsp &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_requestId == rhs.dptr->m_requestId
        && lhs.dptr->m_success == rhs.dptr->m_success
        && lhs.dptr->m_errmsg == rhs.dptr->m_errmsg
        && lhs.dptr->m_msgList == rhs.dptr->m_msgList;
}

const QString &GetHistoryMsgRsp::requestId() const &
{
    return dptr->m_requestId;
}

bool GetHistoryMsgRsp::success() const
{
    return dptr->m_success;
}

const QString &GetHistoryMsgRsp::errmsg() const &
{
    return dptr->m_errmsg;
}

const MessageInfoRepeated &GetHistoryMsgRsp::msgList() const &
{
    return dptr->m_msgList;
}

void GetHistoryMsgRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetHistoryMsgRsp::setRequestId(QString &&requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = std::move(requestId);
    }
}

void GetHistoryMsgRsp::setSuccess(bool success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void GetHistoryMsgRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void GetHistoryMsgRsp::setErrmsg(QString &&errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = std::move(errmsg);
    }
}

void GetHistoryMsgRsp::setMsgList(const MessageInfoRepeated &msgList)
{
    if (dptr->m_msgList != msgList) {
        dptr.detach();
        dptr->m_msgList = msgList;
    }
}

void GetHistoryMsgRsp::setMsgList(MessageInfoRepeated &&msgList)
{
    if (dptr->m_msgList != msgList) {
        dptr.detach();
        dptr->m_msgList = std::move(msgList);
    }
}


class GetRecentMsgReq_QtProtobufData : public QSharedData
{
public:
    GetRecentMsgReq_QtProtobufData()
        : QSharedData(),
          m_msgCount(0)
    {
    }

    GetRecentMsgReq_QtProtobufData(const GetRecentMsgReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_chatSessionId(other.m_chatSessionId),
          m_msgCount(other.m_msgCount),
          m_curTime(other.m_curTime),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId)
    {
    }

    QString m_requestId;
    QString m_chatSessionId;
    QtProtobuf::int64 m_msgCount;
    std::optional<QtProtobuf::int64> m_curTime;
    std::optional<QString> m_userId;
    std::optional<QString> m_sessionId;
};

GetRecentMsgReq::~GetRecentMsgReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 25> qt_protobuf_GetRecentMsgReq_uint_data;
    const char qt_protobuf_GetRecentMsgReq_char_data[81];
} qt_protobuf_GetRecentMsgReq_metadata {
    // data
    {
        0, /* = version */
        6, /* = num fields */
        7, /* = field number offset */
        13, /* = property index offset */
        19, /* = field flags offset */
        21, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        22, /* = requestId */
        32, /* = chatSessionId */
        46, /* = msgCount */
        55, /* = curTime */
        63, /* = userId */
        70, /* = sessionId */
        80, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = chatSessionId */
        3, /* = msgCount */
        4, /* = curTime */
        5, /* = userId */
        6, /* = sessionId */
        // Property indices:
        0, /* = requestId */
        1, /* = chatSessionId */
        2, /* = msgCount */
        3, /* = curTime */
        5, /* = userId */
        7, /* = sessionId */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = requestId */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = chatSessionId */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = msgCount */
        uint(QtProtobufPrivate::FieldFlag::Optional | QtProtobufPrivate::FieldFlag::ExplicitPresence), /* = curTime */
        uint(QtProtobufPrivate::FieldFlag::Optional | QtProtobufPrivate::FieldFlag::ExplicitPresence), /* = userId */
        uint(QtProtobufPrivate::FieldFlag::Optional | QtProtobufPrivate::FieldFlag::ExplicitPresence), /* = sessionId */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.GetRecentMsgReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0chatSessionId\0msgCount\0curTime\0userId\0"
    "sessionId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetRecentMsgReq::staticPropertyOrdering = {
    &qt_protobuf_GetRecentMsgReq_metadata.data
};

void GetRecentMsgReq::registerTypes()
{
    qRegisterMetaType<GetRecentMsgReq>();
    qRegisterMetaType<GetRecentMsgReqRepeated>();
}

GetRecentMsgReq::GetRecentMsgReq()
    : QProtobufMessage(&GetRecentMsgReq::staticMetaObject, &GetRecentMsgReq::staticPropertyOrdering),
      dptr(new GetRecentMsgReq_QtProtobufData)
{
}

GetRecentMsgReq::GetRecentMsgReq(const GetRecentMsgReq &other)
    = default;
GetRecentMsgReq &GetRecentMsgReq::operator =(const GetRecentMsgReq &other)
{
    GetRecentMsgReq temp(other);
    swap(temp);
    return *this;
}
GetRecentMsgReq::GetRecentMsgReq(GetRecentMsgReq &&other) noexcept
    = default;
bool comparesEqual(const GetRecentMsgReq &lhs, const GetRecentMsgReq &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_requestId == rhs.dptr->m_requestId
        && lhs.dptr->m_chatSessionId == rhs.dptr->m_chatSessionId
        && lhs.dptr->m_msgCount == rhs.dptr->m_msgCount
        && lhs.dptr->m_curTime == rhs.dptr->m_curTime
        && lhs.dptr->m_userId == rhs.dptr->m_userId
        && lhs.dptr->m_sessionId == rhs.dptr->m_sessionId;
}

const QString &GetRecentMsgReq::requestId() const &
{
    return dptr->m_requestId;
}

const QString &GetRecentMsgReq::chatSessionId() const &
{
    return dptr->m_chatSessionId;
}

QtProtobuf::int64 GetRecentMsgReq::msgCount() const
{
    return dptr->m_msgCount;
}

QtProtobuf::int64 GetRecentMsgReq::curTime_p() const
{
    return dptr->m_curTime ?
        dptr->m_curTime.value() : QtProtobuf::int64();
}

bool GetRecentMsgReq::hasCurTime() const
{
    return dptr->m_curTime.has_value();
}
QtProtobuf::int64 GetRecentMsgReq::curTime() const
{
    Q_ASSERT(dptr->m_curTime.has_value());
    return dptr->m_curTime.value();
}

QString GetRecentMsgReq::userId_p() const
{
    return dptr->m_userId ?
        dptr->m_userId.value() : QString();
}

bool GetRecentMsgReq::hasUserId() const
{
    return dptr->m_userId.has_value();
}
QString GetRecentMsgReq::userId() const
{
    Q_ASSERT(dptr->m_userId.has_value());
    return dptr->m_userId.value();
}

QString GetRecentMsgReq::sessionId_p() const
{
    return dptr->m_sessionId ?
        dptr->m_sessionId.value() : QString();
}

bool GetRecentMsgReq::hasSessionId() const
{
    return dptr->m_sessionId.has_value();
}
QString GetRecentMsgReq::sessionId() const
{
    Q_ASSERT(dptr->m_sessionId.has_value());
    return dptr->m_sessionId.value();
}

void GetRecentMsgReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetRecentMsgReq::setRequestId(QString &&requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = std::move(requestId);
    }
}

void GetRecentMsgReq::setChatSessionId(const QString &chatSessionId)
{
    if (dptr->m_chatSessionId != chatSessionId) {
        dptr.detach();
        dptr->m_chatSessionId = chatSessionId;
    }
}

void GetRecentMsgReq::setChatSessionId(QString &&chatSessionId)
{
    if (dptr->m_chatSessionId != chatSessionId) {
        dptr.detach();
        dptr->m_chatSessionId = std::move(chatSessionId);
    }
}

void GetRecentMsgReq::setMsgCount(QtProtobuf::int64 msgCount)
{
    if (dptr->m_msgCount != msgCount) {
        dptr.detach();
        dptr->m_msgCount = msgCount;
    }
}

void GetRecentMsgReq::setCurTime(QtProtobuf::int64 curTime)
{
    if (!dptr->m_curTime || dptr->m_curTime.value() != curTime) {
        dptr.detach();
        dptr->m_curTime = curTime;
    }
}

void GetRecentMsgReq::setCurTime_p(QtProtobuf::int64 curTime)
{
    if (!dptr->m_curTime || dptr->m_curTime != curTime) {
        dptr.detach();
        dptr->m_curTime = curTime;
    }
}

void GetRecentMsgReq::clearCurTime()
{
    if (dptr->m_curTime.has_value()) {
        dptr.detach();
        dptr->m_curTime.reset();
    }
}
void GetRecentMsgReq::setUserId(const QString &userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void GetRecentMsgReq::setUserId(QString &&userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = std::move(userId);
    }
}

void GetRecentMsgReq::setUserId_p(QString userId)
{
    if (!dptr->m_userId || dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void GetRecentMsgReq::clearUserId()
{
    if (dptr->m_userId.has_value()) {
        dptr.detach();
        dptr->m_userId.reset();
    }
}
void GetRecentMsgReq::setSessionId(const QString &sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void GetRecentMsgReq::setSessionId(QString &&sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = std::move(sessionId);
    }
}

void GetRecentMsgReq::setSessionId_p(QString sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void GetRecentMsgReq::clearSessionId()
{
    if (dptr->m_sessionId.has_value()) {
        dptr.detach();
        dptr->m_sessionId.reset();
    }
}

class GetRecentMsgRsp_QtProtobufData : public QSharedData
{
public:
    GetRecentMsgRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    GetRecentMsgRsp_QtProtobufData(const GetRecentMsgRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_msgList(other.m_msgList)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    MessageInfoRepeated m_msgList;
};

GetRecentMsgRsp::~GetRecentMsgRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_GetRecentMsgRsp_uint_data;
    const char qt_protobuf_GetRecentMsgRsp_char_data[56];
} qt_protobuf_GetRecentMsgRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        21, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        22, /* = requestId */
        32, /* = success */
        40, /* = errmsg */
        47, /* = msgList */
        55, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = msgList */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = msgList */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = requestId */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = success */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = errmsg */
        uint(QtProtobufPrivate::FieldFlag::Repeated | QtProtobufPrivate::FieldFlag::Message), /* = msgList */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.GetRecentMsgRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0msgList\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetRecentMsgRsp::staticPropertyOrdering = {
    &qt_protobuf_GetRecentMsgRsp_metadata.data
};

void GetRecentMsgRsp::registerTypes()
{
    qRegisterMetaType<GetRecentMsgRsp>();
    qRegisterMetaType<GetRecentMsgRspRepeated>();
}

GetRecentMsgRsp::GetRecentMsgRsp()
    : QProtobufMessage(&GetRecentMsgRsp::staticMetaObject, &GetRecentMsgRsp::staticPropertyOrdering),
      dptr(new GetRecentMsgRsp_QtProtobufData)
{
}

GetRecentMsgRsp::GetRecentMsgRsp(const GetRecentMsgRsp &other)
    = default;
GetRecentMsgRsp &GetRecentMsgRsp::operator =(const GetRecentMsgRsp &other)
{
    GetRecentMsgRsp temp(other);
    swap(temp);
    return *this;
}
GetRecentMsgRsp::GetRecentMsgRsp(GetRecentMsgRsp &&other) noexcept
    = default;
bool comparesEqual(const GetRecentMsgRsp &lhs, const GetRecentMsgRsp &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_requestId == rhs.dptr->m_requestId
        && lhs.dptr->m_success == rhs.dptr->m_success
        && lhs.dptr->m_errmsg == rhs.dptr->m_errmsg
        && lhs.dptr->m_msgList == rhs.dptr->m_msgList;
}

const QString &GetRecentMsgRsp::requestId() const &
{
    return dptr->m_requestId;
}

bool GetRecentMsgRsp::success() const
{
    return dptr->m_success;
}

const QString &GetRecentMsgRsp::errmsg() const &
{
    return dptr->m_errmsg;
}

const MessageInfoRepeated &GetRecentMsgRsp::msgList() const &
{
    return dptr->m_msgList;
}

void GetRecentMsgRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetRecentMsgRsp::setRequestId(QString &&requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = std::move(requestId);
    }
}

void GetRecentMsgRsp::setSuccess(bool success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void GetRecentMsgRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void GetRecentMsgRsp::setErrmsg(QString &&errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = std::move(errmsg);
    }
}

void GetRecentMsgRsp::setMsgList(const MessageInfoRepeated &msgList)
{
    if (dptr->m_msgList != msgList) {
        dptr.detach();
        dptr->m_msgList = msgList;
    }
}

void GetRecentMsgRsp::setMsgList(MessageInfoRepeated &&msgList)
{
    if (dptr->m_msgList != msgList) {
        dptr.detach();
        dptr->m_msgList = std::move(msgList);
    }
}


class MsgSearchReq_QtProtobufData : public QSharedData
{
public:
    MsgSearchReq_QtProtobufData()
        : QSharedData()
    {
    }

    MsgSearchReq_QtProtobufData(const MsgSearchReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId),
          m_chatSessionId(other.m_chatSessionId),
          m_searchKey(other.m_searchKey)
    {
    }

    QString m_requestId;
    std::optional<QString> m_userId;
    std::optional<QString> m_sessionId;
    QString m_chatSessionId;
    QString m_searchKey;
};

MsgSearchReq::~MsgSearchReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 21> qt_protobuf_MsgSearchReq_uint_data;
    const char qt_protobuf_MsgSearchReq_char_data[71];
} qt_protobuf_MsgSearchReq_metadata {
    // data
    {
        0, /* = version */
        5, /* = num fields */
        6, /* = field number offset */
        11, /* = property index offset */
        16, /* = field flags offset */
        18, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        19, /* = requestId */
        29, /* = userId */
        36, /* = sessionId */
        46, /* = chatSessionId */
        60, /* = searchKey */
        70, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = userId */
        3, /* = sessionId */
        4, /* = chatSessionId */
        5, /* = searchKey */
        // Property indices:
        0, /* = requestId */
        1, /* = userId */
        3, /* = sessionId */
        5, /* = chatSessionId */
        6, /* = searchKey */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = requestId */
        uint(QtProtobufPrivate::FieldFlag::Optional | QtProtobufPrivate::FieldFlag::ExplicitPresence), /* = userId */
        uint(QtProtobufPrivate::FieldFlag::Optional | QtProtobufPrivate::FieldFlag::ExplicitPresence), /* = sessionId */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = chatSessionId */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = searchKey */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.MsgSearchReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0userId\0sessionId\0chatSessionId\0searchKey\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering MsgSearchReq::staticPropertyOrdering = {
    &qt_protobuf_MsgSearchReq_metadata.data
};

void MsgSearchReq::registerTypes()
{
    qRegisterMetaType<MsgSearchReq>();
    qRegisterMetaType<MsgSearchReqRepeated>();
}

MsgSearchReq::MsgSearchReq()
    : QProtobufMessage(&MsgSearchReq::staticMetaObject, &MsgSearchReq::staticPropertyOrdering),
      dptr(new MsgSearchReq_QtProtobufData)
{
}

MsgSearchReq::MsgSearchReq(const MsgSearchReq &other)
    = default;
MsgSearchReq &MsgSearchReq::operator =(const MsgSearchReq &other)
{
    MsgSearchReq temp(other);
    swap(temp);
    return *this;
}
MsgSearchReq::MsgSearchReq(MsgSearchReq &&other) noexcept
    = default;
bool comparesEqual(const MsgSearchReq &lhs, const MsgSearchReq &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_requestId == rhs.dptr->m_requestId
        && lhs.dptr->m_userId == rhs.dptr->m_userId
        && lhs.dptr->m_sessionId == rhs.dptr->m_sessionId
        && lhs.dptr->m_chatSessionId == rhs.dptr->m_chatSessionId
        && lhs.dptr->m_searchKey == rhs.dptr->m_searchKey;
}

const QString &MsgSearchReq::requestId() const &
{
    return dptr->m_requestId;
}

QString MsgSearchReq::userId_p() const
{
    return dptr->m_userId ?
        dptr->m_userId.value() : QString();
}

bool MsgSearchReq::hasUserId() const
{
    return dptr->m_userId.has_value();
}
QString MsgSearchReq::userId() const
{
    Q_ASSERT(dptr->m_userId.has_value());
    return dptr->m_userId.value();
}

QString MsgSearchReq::sessionId_p() const
{
    return dptr->m_sessionId ?
        dptr->m_sessionId.value() : QString();
}

bool MsgSearchReq::hasSessionId() const
{
    return dptr->m_sessionId.has_value();
}
QString MsgSearchReq::sessionId() const
{
    Q_ASSERT(dptr->m_sessionId.has_value());
    return dptr->m_sessionId.value();
}

const QString &MsgSearchReq::chatSessionId() const &
{
    return dptr->m_chatSessionId;
}

const QString &MsgSearchReq::searchKey() const &
{
    return dptr->m_searchKey;
}

void MsgSearchReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void MsgSearchReq::setRequestId(QString &&requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = std::move(requestId);
    }
}

void MsgSearchReq::setUserId(const QString &userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void MsgSearchReq::setUserId(QString &&userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = std::move(userId);
    }
}

void MsgSearchReq::setUserId_p(QString userId)
{
    if (!dptr->m_userId || dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void MsgSearchReq::clearUserId()
{
    if (dptr->m_userId.has_value()) {
        dptr.detach();
        dptr->m_userId.reset();
    }
}
void MsgSearchReq::setSessionId(const QString &sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void MsgSearchReq::setSessionId(QString &&sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = std::move(sessionId);
    }
}

void MsgSearchReq::setSessionId_p(QString sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void MsgSearchReq::clearSessionId()
{
    if (dptr->m_sessionId.has_value()) {
        dptr.detach();
        dptr->m_sessionId.reset();
    }
}
void MsgSearchReq::setChatSessionId(const QString &chatSessionId)
{
    if (dptr->m_chatSessionId != chatSessionId) {
        dptr.detach();
        dptr->m_chatSessionId = chatSessionId;
    }
}

void MsgSearchReq::setChatSessionId(QString &&chatSessionId)
{
    if (dptr->m_chatSessionId != chatSessionId) {
        dptr.detach();
        dptr->m_chatSessionId = std::move(chatSessionId);
    }
}

void MsgSearchReq::setSearchKey(const QString &searchKey)
{
    if (dptr->m_searchKey != searchKey) {
        dptr.detach();
        dptr->m_searchKey = searchKey;
    }
}

void MsgSearchReq::setSearchKey(QString &&searchKey)
{
    if (dptr->m_searchKey != searchKey) {
        dptr.detach();
        dptr->m_searchKey = std::move(searchKey);
    }
}


class MsgSearchRsp_QtProtobufData : public QSharedData
{
public:
    MsgSearchRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    MsgSearchRsp_QtProtobufData(const MsgSearchRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_msgList(other.m_msgList)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    MessageInfoRepeated m_msgList;
};

MsgSearchRsp::~MsgSearchRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_MsgSearchRsp_uint_data;
    const char qt_protobuf_MsgSearchRsp_char_data[53];
} qt_protobuf_MsgSearchRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        18, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        19, /* = requestId */
        29, /* = success */
        37, /* = errmsg */
        44, /* = msgList */
        52, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = msgList */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = msgList */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = requestId */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = success */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = errmsg */
        uint(QtProtobufPrivate::FieldFlag::Repeated | QtProtobufPrivate::FieldFlag::Message), /* = msgList */
    },
    // char_data
    /* metadata char_data: */
    "SnowK.MsgSearchRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0msgList\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering MsgSearchRsp::staticPropertyOrdering = {
    &qt_protobuf_MsgSearchRsp_metadata.data
};

void MsgSearchRsp::registerTypes()
{
    qRegisterMetaType<MsgSearchRsp>();
    qRegisterMetaType<MsgSearchRspRepeated>();
}

MsgSearchRsp::MsgSearchRsp()
    : QProtobufMessage(&MsgSearchRsp::staticMetaObject, &MsgSearchRsp::staticPropertyOrdering),
      dptr(new MsgSearchRsp_QtProtobufData)
{
}

MsgSearchRsp::MsgSearchRsp(const MsgSearchRsp &other)
    = default;
MsgSearchRsp &MsgSearchRsp::operator =(const MsgSearchRsp &other)
{
    MsgSearchRsp temp(other);
    swap(temp);
    return *this;
}
MsgSearchRsp::MsgSearchRsp(MsgSearchRsp &&other) noexcept
    = default;
bool comparesEqual(const MsgSearchRsp &lhs, const MsgSearchRsp &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_requestId == rhs.dptr->m_requestId
        && lhs.dptr->m_success == rhs.dptr->m_success
        && lhs.dptr->m_errmsg == rhs.dptr->m_errmsg
        && lhs.dptr->m_msgList == rhs.dptr->m_msgList;
}

const QString &MsgSearchRsp::requestId() const &
{
    return dptr->m_requestId;
}

bool MsgSearchRsp::success() const
{
    return dptr->m_success;
}

const QString &MsgSearchRsp::errmsg() const &
{
    return dptr->m_errmsg;
}

const MessageInfoRepeated &MsgSearchRsp::msgList() const &
{
    return dptr->m_msgList;
}

void MsgSearchRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void MsgSearchRsp::setRequestId(QString &&requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = std::move(requestId);
    }
}

void MsgSearchRsp::setSuccess(bool success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void MsgSearchRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void MsgSearchRsp::setErrmsg(QString &&errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = std::move(errmsg);
    }
}

void MsgSearchRsp::setMsgList(const MessageInfoRepeated &msgList)
{
    if (dptr->m_msgList != msgList) {
        dptr.detach();
        dptr->m_msgList = msgList;
    }
}

void MsgSearchRsp::setMsgList(MessageInfoRepeated &&msgList)
{
    if (dptr->m_msgList != msgList) {
        dptr.detach();
        dptr->m_msgList = std::move(msgList);
    }
}

} // namespace SnowK

#include "moc_message.qpb.cpp"
