/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#ifndef SPEECH_QPB_H
#define SPEECH_QPB_H

#include <QtProtobuf/qprotobuflazymessagepointer.h>
#include <QtProtobuf/qprotobufmessage.h>
#include <QtProtobuf/qprotobufobject.h>
#include <QtProtobuf/qprotobufoneof.h>
#include <QtProtobuf/qtprotobuftypes.h>

#include <QtCore/qbytearray.h>
#include <QtCore/qlist.h>
#include <QtCore/qmetatype.h>
#include <QtCore/qshareddata.h>
#include <QtCore/qstring.h>

#include <optional>

namespace SnowK {
class SpeechRecognitionReq;
using SpeechRecognitionReqRepeated = QList<SpeechRecognitionReq>;
namespace SpeechRecognitionReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SpeechRecognitionReq_QtProtobufNested

class SpeechRecognitionRsp;
using SpeechRecognitionRspRepeated = QList<SpeechRecognitionRsp>;
namespace SpeechRecognitionRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SpeechRecognitionRsp_QtProtobufNested


class SpeechRecognitionReq_QtProtobufData;
class SpeechRecognitionReq : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QByteArray speechContent READ speechContent WRITE setSpeechContent SCRIPTABLE true)
    Q_PROPERTY(QString userId READ userId_p WRITE setUserId_p)
    Q_PROPERTY(bool hasUserId READ hasUserId)
    Q_PROPERTY(QString sessionId READ sessionId_p WRITE setSessionId_p)
    Q_PROPERTY(bool hasSessionId READ hasSessionId)

public:
    using QtProtobufFieldEnum = SpeechRecognitionReq_QtProtobufNested::QtProtobufFieldEnum;
    SpeechRecognitionReq();
    ~SpeechRecognitionReq();
    SpeechRecognitionReq(const SpeechRecognitionReq &other);
    SpeechRecognitionReq &operator =(const SpeechRecognitionReq &other);
    SpeechRecognitionReq(SpeechRecognitionReq &&other) noexcept;
    SpeechRecognitionReq &operator =(SpeechRecognitionReq &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SpeechRecognitionReq &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    const QByteArray &speechContent() const &;

    bool hasUserId() const;
    QString userId() const;

    bool hasSessionId() const;
    QString sessionId() const;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSpeechContent(const QByteArray &speechContent);
    void setSpeechContent(QByteArray &&speechContent);
    void setUserId(const QString &userId);
    void setUserId(QString &&userId);
    void clearUserId();
    void setSessionId(const QString &sessionId);
    void setSessionId(QString &&sessionId);
    void clearSessionId();
    static void registerTypes();

private:
    friend bool comparesEqual(const SpeechRecognitionReq &lhs, const SpeechRecognitionReq &rhs) noexcept;
    friend bool operator==(const SpeechRecognitionReq &lhs, const SpeechRecognitionReq &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SpeechRecognitionReq &lhs, const SpeechRecognitionReq &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QString userId_p() const;
    QString sessionId_p() const;
    void setUserId_p(QString userId);
    void setSessionId_p(QString sessionId);
    QExplicitlySharedDataPointer<SpeechRecognitionReq_QtProtobufData> dptr;
};
namespace SpeechRecognitionReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SpeechContentProtoFieldNumber = 2,
    UserIdProtoFieldNumber = 3,
    SessionIdProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SpeechRecognitionReq_QtProtobufNested

class SpeechRecognitionRsp_QtProtobufData;
class SpeechRecognitionRsp : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg_p WRITE setErrmsg_p)
    Q_PROPERTY(bool hasErrmsg READ hasErrmsg)
    Q_PROPERTY(QString recognitionResult READ recognitionResult_p WRITE setRecognitionResult_p)
    Q_PROPERTY(bool hasRecognitionResult READ hasRecognitionResult)

public:
    using QtProtobufFieldEnum = SpeechRecognitionRsp_QtProtobufNested::QtProtobufFieldEnum;
    SpeechRecognitionRsp();
    ~SpeechRecognitionRsp();
    SpeechRecognitionRsp(const SpeechRecognitionRsp &other);
    SpeechRecognitionRsp &operator =(const SpeechRecognitionRsp &other);
    SpeechRecognitionRsp(SpeechRecognitionRsp &&other) noexcept;
    SpeechRecognitionRsp &operator =(SpeechRecognitionRsp &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SpeechRecognitionRsp &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    const QString &requestId() const &;

    bool success() const;

    bool hasErrmsg() const;
    QString errmsg() const;

    bool hasRecognitionResult() const;
    QString recognitionResult() const;
    void setRequestId(const QString &requestId);
    void setRequestId(QString &&requestId);
    void setSuccess(bool success);
    void setErrmsg(const QString &errmsg);
    void setErrmsg(QString &&errmsg);
    void clearErrmsg();
    void setRecognitionResult(const QString &recognitionResult);
    void setRecognitionResult(QString &&recognitionResult);
    void clearRecognitionResult();
    static void registerTypes();

private:
    friend bool comparesEqual(const SpeechRecognitionRsp &lhs, const SpeechRecognitionRsp &rhs) noexcept;
    friend bool operator==(const SpeechRecognitionRsp &lhs, const SpeechRecognitionRsp &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SpeechRecognitionRsp &lhs, const SpeechRecognitionRsp &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QString errmsg_p() const;
    QString recognitionResult_p() const;
    void setErrmsg_p(QString errmsg);
    void setRecognitionResult_p(QString recognitionResult);
    QExplicitlySharedDataPointer<SpeechRecognitionRsp_QtProtobufData> dptr;
};
namespace SpeechRecognitionRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
    RecognitionResultProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SpeechRecognitionRsp_QtProtobufNested
} // namespace SnowK

#endif // SPEECH_QPB_H
